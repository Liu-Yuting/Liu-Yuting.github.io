<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>FastAPI-2：快速入门</title>
      <link href="/my-hexo/2023/11/06/python/fastapi/fastapi-2-kuai-su-ru-men/"/>
      <url>/my-hexo/2023/11/06/python/fastapi/fastapi-2-kuai-su-ru-men/</url>
      
        <content type="html"><![CDATA[<h1 id="FastAPI-2：快速入门"><a href="#FastAPI-2：快速入门" class="headerlink" title="FastAPI-2：快速入门"></a>FastAPI-2：快速入门</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> fastapi<span class="token comment"># 将来需要将应用程序部署到生产环境可以安装 uvicorn 作为服务器</span>pip <span class="token function">install</span> uvicorn<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="最简单的代码栗子"><a href="#最简单的代码栗子" class="headerlink" title="最简单的代码栗子"></a>最简单的代码栗子</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPIapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">'message'</span><span class="token punctuation">:</span> <span class="token string">"Hello World"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="运行-uvicorn-命令，启动服务器"><a href="#运行-uvicorn-命令，启动服务器" class="headerlink" title="运行 uvicorn 命令，启动服务器"></a>运行 <code>uvicorn</code> 命令，启动服务器</h2><p>进入 <code>.py</code> 文件所属目录的命令行</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">uvicorn main<span class="token punctuation">:</span>app <span class="token operator">-</span><span class="token operator">-</span><span class="token builtin">reload</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>main</strong> ：main.py文件（一个Python[模块]）；</li><li><strong>app</strong> ：在 main.py 文件中通过 app = FastAPI() 创建的对象；</li><li><strong>–reload</strong> ：让服务器在更新代码后自动重新启动，仅在开发时使用该选项。</li></ul><h3 id="服务启动示例"><a href="#服务启动示例" class="headerlink" title="服务启动示例"></a>服务启动示例</h3><img src="/my-hexo/2023/11/06/python/fastapi/fastapi-2-kuai-su-ru-men/FastAPI-2%EF%BC%9A%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-1.png" class=""><h3 id="浏览器访问"><a href="#浏览器访问" class="headerlink" title="浏览器访问"></a>浏览器访问</h3><img src="/my-hexo/2023/11/06/python/fastapi/fastapi-2-kuai-su-ru-men/FastAPI-2%EF%BC%9A%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-2.png" class=""><h3 id="查看交互式文档"><a href="#查看交互式文档" class="headerlink" title="查看交互式文档"></a>查看交互式文档</h3><img src="/my-hexo/2023/11/06/python/fastapi/fastapi-2-kuai-su-ru-men/FastAPI-2%EF%BC%9A%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-3.png" class=""><h3 id="查看可选的API文档"><a href="#查看可选的API文档" class="headerlink" title="查看可选的API文档"></a>查看可选的API文档</h3><img src="/my-hexo/2023/11/06/python/fastapi/fastapi-2-kuai-su-ru-men/FastAPI-2%EF%BC%9A%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-4.png" class=""><h2 id="OpenAPI"><a href="#OpenAPI" class="headerlink" title="OpenAPI"></a>OpenAPI</h2><p>FastAPI使用API的OpenAPI标准为所有API生成schema</p><h3 id="schema"><a href="#schema" class="headerlink" title="schema"></a>schema</h3><ul><li>是对事务的一种定义或描述；</li><li>它并非具体的实现代码，只是抽象描述；</li></ul><h3 id="API-Schema"><a href="#API-Schema" class="headerlink" title="API Schema"></a>API Schema</h3><ul><li>OpenAPI 是一种规定如何定义API Schema的规范；</li><li>定义的OpenAPI Schema将包括API路径，以及它们肯能使用的参数等等；</li><li>比如：这个API的作用是什么，需要必传哪些参数，请求方法是什么。</li></ul><h3 id="Data-Schema"><a href="#Data-Schema" class="headerlink" title="Data Schema"></a>Data Schema</h3><ul><li>指的是某些数据比如JSON的结构；</li><li>它可以表示JSON的属性及其具有的数据类型；</li><li>比如：某个属性的数据类型是什么，有没有默认值，是不是必填，作用是什么。</li></ul><h3 id="JSON-Schema"><a href="#JSON-Schema" class="headerlink" title="JSON Schema"></a>JSON Schema</h3><ul><li>OpenAPI会为API定义API Schema，一般会包括API发送和接收的数据的定义，比如：发送的数据的类型，是否必填；</li><li>这些定义会以JSON数据格式展示出来，所以都会称为JSON Schema。</li></ul><h3 id="查看-openapi-json"><a href="#查看-openapi-json" class="headerlink" title="查看 openapi.json"></a>查看 openapi.json</h3><p>原始的OpenAPI Schema，其实它只是一个自动生成的包含了所有API描述的JSON数据结构。</p><img src="/my-hexo/2023/11/06/python/fastapi/fastapi-2-kuai-su-ru-men/FastAPI-2%EF%BC%9A%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-5.png" class=""><h2 id="拆分代码详情"><a href="#拆分代码详情" class="headerlink" title="拆分代码详情"></a>拆分代码详情</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">### 第一步</span><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token comment"># 1、FastAPI 是一个为API提供了所有功能的Python类，必写就对了；</span><span class="token comment"># 2、FastAPI 是直接从 Starlette 继承的类，可以通过FastAPI使用所有的Starlette的功能。</span><span class="token comment">### 第二步</span>app <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 1、app就是FastAPI类的一个实例对象啦；</span><span class="token comment"># 2、重点：app 将是创建所有API的主要交互对象；</span><span class="token comment"># 3、要点：uvicorn 执行命令时也会用到app。</span><span class="token comment"># 将app变量名换一下：</span>my_app <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 那么运行时也需要换</span>uvicorn main<span class="token punctuation">:</span>my_app <span class="token operator">-</span><span class="token operator">-</span><span class="token builtin">reload</span><span class="token comment">### 第三步</span><span class="token comment"># 创建一个路径操作</span><span class="token comment"># 路径</span><span class="token comment"># 1、指的是URL中从第一个 / 起的后半部分，即常说的path</span><span class="token comment"># 2、比如：https://example.com/items/foo 的路径就是 /items/foo</span><span class="token comment"># 3、路径也称为：端点路由</span><span class="token comment"># 操作：就是HTTP请求方式</span>    <span class="token comment"># 1、POST</span>    <span class="token comment"># 2、GET</span>    <span class="token comment"># 3、PUT</span>    <span class="token comment"># 4、DELETE</span>    <span class="token comment"># 5、OPTIONS</span>    <span class="token comment"># 6、HEAD</span>    <span class="token comment"># 7、PATCH</span>    <span class="token comment"># 8、TRACE</span><span class="token comment"># 在 HTTP 协议中，可以使用以上的其中一种（或多种）与每个路径进行通信</span><span class="token comment"># 遵守RESTFul风格的话</span><span class="token comment"># 通常使用：</span>    <span class="token comment"># 1、POST：新建数据</span>    <span class="token comment"># 2、GET：获取数据</span>    <span class="token comment"># 3、PUT：更新数据</span>    <span class="token comment"># 4、DELETE：删除数据</span><span class="token comment"># 定义一个路径操作装饰器</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token comment"># 有两点含义</span>    <span class="token comment"># 1、请求路径为'/'</span>    <span class="token comment"># 2、使用 get 请求</span><span class="token comment"># 其它请求方法的装饰器</span>    <span class="token comment"># 1、@app.post()</span>    <span class="token comment"># 2、@app.put()</span>    <span class="token comment"># 3、@app.delete()</span>    <span class="token comment"># 4、@app.potions()</span>    <span class="token comment"># 5、@app.head()</span>    <span class="token comment"># 6、@app.patch()</span>    <span class="token comment"># 7、@app.trace()</span>    <span class="token comment">### 第四步</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># 1、这就是一个普通的Python函数；</span><span class="token comment"># 2、每当FastAPI接收一个使用 GET 方法访问路径为 / 的请求时这个函数会被调用；</span><span class="token comment"># 3、在这个栗子中，它是一个 async 函数（异步处理函数）。</span><span class="token comment"># 可以不加 async</span><span class="token keyword">def</span> <span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">### 第五步</span><span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">'message'</span><span class="token punctuation">:</span> <span class="token string">'Hello World'</span><span class="token punctuation">}</span><span class="token comment"># 1、可以返回一个 dict、list，也可是 str、int单个值；</span><span class="token comment"># 2、还可以返回 Pydantic 模型；</span><span class="token comment"># 3、还可以是其他会自动转换为JSON的对象和模型（包括ORM对象等）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="FastAPI入门总结"><a href="#FastAPI入门总结" class="headerlink" title="FastAPI入门总结"></a>FastAPI入门总结</h2><p>编写一个最简单的FastAPI应用程序五部曲</p><ol><li>导入FastAPI</li><li>创建一个app实例</li><li>编写一个路径操作装饰器，如 <code>@app.get('/')</code></li><li>编写一个路径操作函数，如 <code>def first():</code></li><li>运行开发服务器，如 <code>uvicron main:app --reload</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> FasAPI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> FastAPI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笔记</title>
      <link href="/my-hexo/2023/11/06/bi-ji/"/>
      <url>/my-hexo/2023/11/06/bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h1><h2 id="一、Python的requirements-txt文件"><a href="#一、Python的requirements-txt文件" class="headerlink" title="一、Python的requirements.txt文件"></a>一、Python的requirements.txt文件</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 自动生成requirements.txt文件</span>pip freeze <span class="token operator">&gt;</span> requirements<span class="token punctuation">.</span>txt<span class="token comment"># 安装requirements.txt依赖</span>pip install <span class="token operator">-</span>r requirements<span class="token punctuation">.</span>txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、vim编辑器中文乱码问题"><a href="#二、vim编辑器中文乱码问题" class="headerlink" title="二、vim编辑器中文乱码问题"></a>二、vim编辑器中文乱码问题</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 执行（打开vi编辑器新建.vimrc文件）</span>$: <span class="token function">vi</span> ~/.vimrc---------------------------------<span class="token comment"># 文件内容</span><span class="token builtin class-name">set</span> <span class="token assign-left variable">encoding</span><span class="token operator">=</span>utf-8  <span class="token comment"># 显示的编码</span><span class="token builtin class-name">set</span> <span class="token assign-left variable">fileencoding</span><span class="token operator">=</span>utf-8  <span class="token comment"># 写入文件的编码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、Nginx配置"><a href="#三、Nginx配置" class="headerlink" title="三、Nginx配置"></a>三、Nginx配置</h2><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token comment"># 配置静态文件</span><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>    <span class="token directive"><span class="token keyword">location</span> ^~/static</span> <span class="token punctuation">{</span>  <span class="token comment"># 静态文件路由</span>        <span class="token directive"><span class="token keyword">alias</span> /usr/project/static</span><span class="token punctuation">;</span>  <span class="token comment"># 静态文件所在目录</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment"># 配置项目相关</span><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>    <span class="token directive"><span class="token keyword">location</span> /api</span> <span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">proxy_pass</span> http://127.0.0.1:8000</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">proxy_set_header</span> Host <span class="token variable">$host</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Protocol https</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Forwarded-For <span class="token variable">$proxy_add_x_forwarded_for</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">proxy_set_header</span> X-USERTOKEN <span class="token variable">$http_x_usertoken</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">proxy_connect_timeout</span> xxx</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">proxy_read_timeout</span> xxx</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">proxy_send_timeout</span> xxx</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、pymysql"><a href="#四、pymysql" class="headerlink" title="四、pymysql"></a>四、pymysql</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymysqldb <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>user<span class="token operator">=</span><span class="token string">'用户名'</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">'密码'</span><span class="token punctuation">,</span> host<span class="token operator">=</span><span class="token string">'主机ip'</span><span class="token punctuation">,</span> database<span class="token operator">=</span><span class="token string">'要连接的库名'</span><span class="token punctuation">)</span>  <span class="token comment"># 连接数据库</span>sql <span class="token operator">=</span> <span class="token string">'sql语句'</span><span class="token triple-quoted-string string">'''使用with，调用完自动close()'''</span><span class="token keyword">with</span> db<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">)</span>  <span class="token comment"># 连接成功，返回True</span>    cur <span class="token operator">=</span> db<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 创建游标</span>    cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>  <span class="token comment"># 执行sql语句</span>    cur<span class="token punctuation">.</span>description  <span class="token comment"># 显示每列的详细信息</span><span class="token keyword">print</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">)</span>  <span class="token comment"># with结束以后自动关闭，返回False</span><span class="token triple-quoted-string string">'''使用try'''</span>cur <span class="token operator">=</span> db<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 创建游标</span><span class="token keyword">try</span><span class="token punctuation">:</span>    cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>  <span class="token comment"># 执行sql语句</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>  <span class="token comment"># 捕获异常</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    cur<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 关掉游标</span>    db<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 断开连接</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、sqlite3"><a href="#五、sqlite3" class="headerlink" title="五、sqlite3"></a>五、sqlite3</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sqlite3con <span class="token operator">=</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">'sqlite3文件所在位置'</span><span class="token punctuation">)</span>  <span class="token comment"># 创建连接</span>cur <span class="token operator">=</span> con<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 创建游标</span>sql <span class="token operator">=</span> <span class="token string">'sql语句'</span><span class="token keyword">try</span><span class="token punctuation">:</span>    cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>  <span class="token comment"># 执行sql语句</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>  <span class="token comment"># 捕获异常</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    cur<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 关掉游标</span>    con<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 断开连接</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token comment">-- lua 操作sqlite3</span><span class="token keyword">local</span> sqlite3 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"sqlite3"</span><span class="token punctuation">)</span><span class="token keyword">local</span> env <span class="token operator">=</span> sqlite3<span class="token punctuation">.</span><span class="token function">sqlite3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">local</span> sql <span class="token operator">=</span> env<span class="token punctuation">:</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">"db文件路径"</span><span class="token punctuation">)</span><span class="token keyword">local</span> cursor<span class="token punctuation">,</span> errorString <span class="token operator">=</span> sql<span class="token punctuation">:</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token string">"SQL语句"</span><span class="token punctuation">)</span><span class="token keyword">local</span> row <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment">-- 定义空table获取cursor中的数据</span><span class="token keyword">while</span> <span class="token keyword">true</span> <span class="token keyword">do</span>    row <span class="token operator">=</span> cursor<span class="token punctuation">:</span><span class="token function">fetch</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> row <span class="token operator">~=</span> <span class="token keyword">nil</span> <span class="token keyword">then</span>        <span class="token keyword">break</span>   <span class="token keyword">end</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 其他操作</span><span class="token comment"># 开启表头：.header on</span><span class="token comment"># 列 对 齐：.mode column</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="六、scp远程拷贝"><a href="#六、scp远程拷贝" class="headerlink" title="六、scp远程拷贝"></a>六、scp远程拷贝</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">scp</span> 连接名@连接地址:文件位置 要放到的位置<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="七、find查找文件"><a href="#七、find查找文件" class="headerlink" title="七、find查找文件"></a>七、find查找文件</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> <span class="token parameter variable">-name</span> <span class="token string">'文件名'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="八、MySQL基本查询语句"><a href="#八、MySQL基本查询语句" class="headerlink" title="八、MySQL基本查询语句"></a>八、MySQL基本查询语句</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> 表名 <span class="token keyword">WHERE</span> 条件<span class="token punctuation">;</span>  <span class="token comment"># 查询</span><span class="token keyword">UPDATE</span> 表名 <span class="token keyword">SET</span> 要修改的内容 <span class="token keyword">WHERE</span> 条件<span class="token punctuation">;</span>  <span class="token comment"># 修改</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> 表名 <span class="token punctuation">(</span>字段名<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span>字段对应内容<span class="token punctuation">)</span>； <span class="token comment"># 添加数据</span><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> 表名 <span class="token keyword">WHERE</span> 条件<span class="token punctuation">;</span>  <span class="token comment"># 删除字段</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> {表名}  <span class="token comment"># 删除表</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="九、es相关功能"><a href="#九、es相关功能" class="headerlink" title="九、es相关功能"></a>九、es相关功能</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token string">'localhost:9200/_cat/indices?v'</span>  <span class="token comment"># 查看所有索引</span><span class="token function">curl</span> <span class="token string">'localhost:9200/_cat/indices?v&amp;s={列名}'</span>  <span class="token comment"># 查看所有索引，根据某一列进行排序</span><span class="token function">curl</span> <span class="token parameter variable">-XPOST</span> <span class="token string">'http://localhost:9200/{索引名称}/_unfreeze'</span>  <span class="token comment"># 索引解冻</span><span class="token function">curl</span> <span class="token parameter variable">-XGET</span> <span class="token string">'http://localhost:9200/_mapping?pretty'</span>  <span class="token comment"># 查看所有type</span><span class="token function">curl</span> <span class="token parameter variable">-XGET</span> <span class="token string">'http://localhost:9200/_cat/templates/?v'</span>  <span class="token comment"># 查看所有模板</span><span class="token function">curl</span> <span class="token parameter variable">-XGET</span> <span class="token string">'http://localhost:9200/{索引名称}/_search?pretty'</span>  <span class="token comment"># 查看索引数据</span><span class="token function">curl</span> <span class="token parameter variable">-XGET</span> <span class="token string">'http://localhost:9200/{索引名称}/_mapping?pretty'</span>  <span class="token comment"># 查看索引结构</span><span class="token function">curl</span> <span class="token parameter variable">-XGET</span> <span class="token string">'http://localhost:9200/{索引名称}/_mapping/field/{字段名}?pretty'</span>  <span class="token comment"># 查看索引下字段的映射</span><span class="token function">curl</span> <span class="token parameter variable">-XGET</span> <span class="token string">'http://localhost:9200/_index_template/{索引模板名称}'</span>  <span class="token comment"># 查看索引模板名称</span><span class="token function">curl</span> <span class="token parameter variable">-XGET</span> <span class="token string">'http://localhost:9200/_component_template/{组件模板名称}'</span>  <span class="token comment"># 查看组件模板</span><span class="token comment"># es的cat命令</span><span class="token assign-left variable">EsIp</span><span class="token operator">=</span><span class="token string">"http://localhost:9200/"</span><span class="token function">curl</span> <span class="token parameter variable">-XGET</span> <span class="token variable">${EsIp}</span>_cat/master?help  <span class="token comment"># help 查看帮助</span><span class="token function">curl</span> <span class="token parameter variable">-XGET</span> <span class="token variable">${EsIp}</span>_cat/master?v  <span class="token comment"># verbose 显示列名，查看master节点</span><span class="token function">curl</span> <span class="token parameter variable">-XGET</span> <span class="token variable">${EsIp}</span>_cat/master?v<span class="token operator">&amp;</span><span class="token assign-left variable">h</span><span class="token operator">=</span>host,ip,node  <span class="token comment"># Headers 只显示特定列</span><span class="token function">curl</span> <span class="token parameter variable">-XGET</span> <span class="token variable">${EsIp}</span>_cat/indices?v<span class="token operator">&amp;</span><span class="token assign-left variable">h</span><span class="token operator">=</span>index,docs.count,store.size<span class="token operator">&amp;</span><span class="token assign-left variable">bytes</span><span class="token operator">=</span>kb  <span class="token comment"># Bytes 数字格式化展示</span><span class="token function">curl</span> <span class="token parameter variable">-XGET</span> <span class="token variable">${EsIp}</span>_cat/indices?v<span class="token operator">&amp;</span><span class="token assign-left variable">h</span><span class="token operator">=</span>index,docs.count,store.size<span class="token operator">&amp;</span><span class="token assign-left variable">bytes</span><span class="token operator">=</span>kb<span class="token operator">&amp;</span><span class="token assign-left variable">format</span><span class="token operator">=</span>json<span class="token operator">&amp;</span>pretty  <span class="token comment"># json格式输出</span><span class="token function">curl</span> <span class="token parameter variable">-XGET</span> <span class="token variable">${EsIp}</span>_cat/indices?v<span class="token operator">&amp;</span><span class="token assign-left variable">h</span><span class="token operator">=</span>index,docs.count,store.size<span class="token operator">&amp;</span><span class="token assign-left variable">bytes</span><span class="token operator">=</span>kb<span class="token operator">&amp;</span><span class="token assign-left variable">format</span><span class="token operator">=</span>yaml<span class="token operator">&amp;</span>pretty  <span class="token comment"># yaml格式输出</span><span class="token function">curl</span> <span class="token parameter variable">-XGET</span> <span class="token variable">${EsIp}</span>_cat/indices?v<span class="token operator">&amp;</span><span class="token assign-left variable">h</span><span class="token operator">=</span>index,docs.count,store.size<span class="token operator">&amp;</span><span class="token assign-left variable">bytes</span><span class="token operator">=</span>kb<span class="token operator">&amp;</span>pretty<span class="token operator">&amp;</span><span class="token assign-left variable">s</span><span class="token operator">=</span>index,docs.count:desc  <span class="token comment"># Sort排序，根据index升序，docs.count降序</span><span class="token function">curl</span> <span class="token parameter variable">-XGET</span> <span class="token variable">${EsIp}</span>_cat/health?v<span class="token operator">&amp;</span><span class="token assign-left variable">h</span><span class="token operator">=</span>cluster,status  <span class="token comment"># 查看集群健康状态</span><span class="token function">curl</span> <span class="token parameter variable">-XGET</span> <span class="token variable">${EsIp}</span>_cat/nodes?v  <span class="token comment"># 查看集群节点</span><span class="token function">curl</span> <span class="token parameter variable">-XGET</span> <span class="token variable">${EsIp}</span>_cat/nodes?v<span class="token operator">&amp;</span><span class="token assign-left variable">h</span><span class="token operator">=</span>ip,node.role,name,disk.avail  <span class="token comment"># 磁盘剩余</span><span class="token function">curl</span> <span class="token parameter variable">-XGET</span> <span class="token variable">${EsIp}</span>_cat/allocation?v  <span class="token comment"># 查看每个数据节点上的分片数（shards），以及每个数据节点磁盘剩余</span><span class="token function">curl</span> <span class="token parameter variable">-XGET</span> <span class="token variable">${EsIp}</span>_cat/pending_tasks?v  <span class="token comment"># 查看被挂起的任务</span><span class="token function">curl</span> <span class="token parameter variable">-XGET</span> <span class="token variable">${EsIp}</span>_cat/plugins?v  <span class="token comment"># 查看每个节点正在运行的插件</span><span class="token function">curl</span> <span class="token parameter variable">-XGET</span> <span class="token variable">${EsIp}</span>_cat/nodeattrs?v  <span class="token comment"># 查看每个节点的自定义属性</span><span class="token function">curl</span> <span class="token parameter variable">-XGET</span> <span class="token variable">${EsIp}</span>_cat/recovery/.kibana?v<span class="token operator">&amp;</span><span class="token assign-left variable">format</span><span class="token operator">=</span>json<span class="token operator">&amp;</span>pretty  <span class="token comment"># 查看索引分片的恢复视图</span><span class="token function">curl</span> <span class="token parameter variable">-XGET</span> <span class="token variable">${EsIp}</span>_cat/fielddata?v<span class="token operator">&amp;</span><span class="token assign-left variable">h</span><span class="token operator">=</span>node,field,size  <span class="token comment"># 查看每个数据节点上fielddate当前占用的堆栈内存</span><span class="token function">curl</span> <span class="token parameter variable">-XGET</span> <span class="token variable">${EsIp}</span>_cat/recovery/.kibana?v<span class="token operator">&amp;</span><span class="token assign-left variable">format</span><span class="token operator">=</span>json<span class="token operator">&amp;</span>pretty  <span class="token comment"># 对某一字段进行查看</span><span class="token function">curl</span> <span class="token parameter variable">-XGET</span> <span class="token variable">${EsIp}</span>_cat/repositories?v  <span class="token comment"># 查看注册的快照仓库</span><span class="token function">curl</span> <span class="token parameter variable">-XGET</span> <span class="token variable">${EsIp}</span>_cat/snapshots/repo1?v  <span class="token comment"># 查看快照仓库下的快照</span><span class="token function">curl</span> <span class="token parameter variable">-XGET</span> <span class="token variable">${EsIp}</span>_cat/thread_pool/bulk?v<span class="token operator">&amp;</span><span class="token assign-left variable">format</span><span class="token operator">=</span>json<span class="token operator">&amp;</span>pretty  <span class="token comment"># 查看每个节点线程池的统计信息</span><span class="token function">curl</span> <span class="token parameter variable">-XGET</span> <span class="token variable">${EsIp}</span>_cat/indices/.monitoring*?v<span class="token operator">&amp;</span><span class="token assign-left variable">h</span><span class="token operator">=</span>index,health  <span class="token comment"># 查看索引</span><span class="token function">curl</span> <span class="token parameter variable">-XGET</span> <span class="token variable">${EsIp}</span>_cat/aliases?v<span class="token operator">&amp;</span><span class="token assign-left variable">h</span><span class="token operator">=</span>alias,index  <span class="token comment"># 查看别名</span><span class="token function">curl</span> <span class="token parameter variable">-XGET</span> <span class="token variable">${EsIp}</span>_cat/templates?v<span class="token operator">&amp;</span><span class="token assign-left variable">format</span><span class="token operator">=</span>json<span class="token operator">&amp;</span>pretty  <span class="token comment"># 查看索引模板</span><span class="token function">curl</span> <span class="token parameter variable">-XGET</span> <span class="token variable">${EsIp}</span>_cat/count?v  <span class="token comment"># 整个集群文档数</span><span class="token function">curl</span> <span class="token parameter variable">-XGET</span> <span class="token variable">${EsIp}</span>_cat/count/.monitoring*?v  <span class="token comment"># 某一类索引文档数</span><span class="token function">curl</span> <span class="token parameter variable">-XGET</span> <span class="token variable">${EsIp}</span>_cat/shards?v<span class="token operator">&amp;</span><span class="token assign-left variable">format</span><span class="token operator">=</span>json<span class="token operator">&amp;</span>pretty<span class="token operator">&amp;</span><span class="token assign-left variable">s</span><span class="token operator">=</span>index  <span class="token comment"># 查看每个索引的分片</span><span class="token function">curl</span> <span class="token parameter variable">-XGET</span> <span class="token variable">${EsIp}</span>_cat/segments/.kibana?v<span class="token operator">&amp;</span><span class="token assign-left variable">format</span><span class="token operator">=</span>json<span class="token operator">&amp;</span>pretty  <span class="token comment"># 查看每个索引的segment</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="十、字符串转换为字典"><a href="#十、字符串转换为字典" class="headerlink" title="十、字符串转换为字典"></a>十、字符串转换为字典</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">'{"name": "Justin Bieber", "age": 44, "gender": "男"}'</span><span class="token keyword">import</span> jsonuser_dict <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Justin Bieber"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token string">"gender"</span><span class="token punctuation">:</span> <span class="token string">"男"</span><span class="token punctuation">}</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token keyword">import</span> astuser_dict <span class="token operator">=</span> ast<span class="token punctuation">.</span>lateral_eval<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>user_dict<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Justin Bieber"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token string">"gender"</span><span class="token punctuation">:</span> <span class="token string">"男"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="十一、IP转换、判断是否合法"><a href="#十一、IP转换、判断是否合法" class="headerlink" title="十一、IP转换、判断是否合法"></a>十一、IP转换、判断是否合法</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 端口范围 [0, 65535]</span><span class="token keyword">import</span> socket<span class="token punctuation">,</span> structsocket<span class="token punctuation">.</span>inet_ntoa<span class="token punctuation">(</span>struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">"!I"</span><span class="token punctuation">,</span> ip<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 整型转换为字符型 int -&gt; str</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token comment">--判断ip是否合法</span><span class="token keyword">function</span> <span class="token function">JudgeIPString</span><span class="token punctuation">(</span>ipStr<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token function">type</span><span class="token punctuation">(</span>ipStr<span class="token punctuation">)</span> <span class="token operator">~=</span> <span class="token string">"string"</span> <span class="token keyword">then</span>        <span class="token keyword">return</span> <span class="token keyword">false</span><span class="token punctuation">;</span>    <span class="token keyword">end</span>        <span class="token comment">--判断长度</span>    <span class="token keyword">local</span> len <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span>ipStr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> len <span class="token operator">&lt;</span> <span class="token number">7</span> <span class="token keyword">or</span> len <span class="token operator">&gt;</span> <span class="token number">15</span> <span class="token keyword">then</span> <span class="token comment">--长度不对</span>        <span class="token keyword">return</span> <span class="token keyword">false</span><span class="token punctuation">;</span>    <span class="token keyword">end</span>     <span class="token comment">--判断出现的非数字字符</span>    <span class="token keyword">local</span> point <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>ipStr<span class="token punctuation">,</span> <span class="token string">"%p"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">--字符"."出现的位置</span>    <span class="token keyword">local</span> pointNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">--字符"."出现的次数 正常ip有3个"."</span>    <span class="token keyword">while</span> point <span class="token operator">~=</span> <span class="token keyword">nil</span> <span class="token keyword">do</span>        <span class="token keyword">if</span> string<span class="token punctuation">.</span><span class="token function">sub</span><span class="token punctuation">(</span>ipStr<span class="token punctuation">,</span> point<span class="token punctuation">,</span> point<span class="token punctuation">)</span> <span class="token operator">~=</span> <span class="token string">"."</span> <span class="token keyword">then</span> <span class="token comment">--得到非数字符号不是字符"."</span>            <span class="token keyword">return</span> <span class="token keyword">false</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>        pointNum <span class="token operator">=</span> pointNum <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        point <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>ipStr<span class="token punctuation">,</span> <span class="token string">"%p"</span><span class="token punctuation">,</span> point <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> pointNum <span class="token operator">&gt;</span> <span class="token number">3</span> <span class="token keyword">then</span>            <span class="token keyword">return</span> <span class="token keyword">false</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>    <span class="token keyword">end</span>    <span class="token keyword">if</span> pointNum <span class="token operator">~=</span> <span class="token number">3</span> <span class="token keyword">then</span> <span class="token comment">--不是正确的ip格式</span>        <span class="token keyword">return</span> <span class="token keyword">false</span><span class="token punctuation">;</span>    <span class="token keyword">end</span>     <span class="token comment">--判断数字对不对</span>    <span class="token keyword">local</span> num <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> w <span class="token keyword">in</span> string<span class="token punctuation">.</span><span class="token function">gmatch</span><span class="token punctuation">(</span>ipStr<span class="token punctuation">,</span> <span class="token string">"%d+"</span><span class="token punctuation">)</span> <span class="token keyword">do</span>        num<span class="token punctuation">[</span><span class="token operator">#</span>num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> w<span class="token punctuation">;</span>        <span class="token keyword">local</span> kk <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> kk <span class="token operator">==</span> <span class="token keyword">nil</span> <span class="token keyword">or</span> kk <span class="token operator">&gt;</span> <span class="token number">255</span> <span class="token keyword">then</span> <span class="token comment">--不是数字或超过ip正常取值范围了</span>            <span class="token keyword">return</span> <span class="token keyword">false</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>    <span class="token keyword">end</span>     <span class="token keyword">if</span> <span class="token operator">#</span>num <span class="token operator">~=</span> <span class="token number">4</span> <span class="token keyword">then</span> <span class="token comment">--不是4段数字</span>        <span class="token keyword">return</span> <span class="token keyword">false</span><span class="token punctuation">;</span>    <span class="token keyword">end</span>     <span class="token keyword">return</span> ipStr<span class="token punctuation">;</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="十二、Redis查询key"><a href="#十二、Redis查询key" class="headerlink" title="十二、Redis查询key"></a>十二、Redis查询key</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ redis-cli$ keys *  <span class="token comment"># 查询所有的键</span>$ dbsize  <span class="token comment"># 获取键的总数</span>$ exists key <span class="token punctuation">[</span>key<span class="token punctuation">]</span>  <span class="token comment"># 查看键是否存在</span>$ del <span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token punctuation">[</span>key<span class="token punctuation">]</span>  <span class="token comment"># 删除键，可以删除一个或多个</span>$ <span class="token builtin class-name">type</span> <span class="token punctuation">[</span>key<span class="token punctuation">]</span>  <span class="token comment"># 查看键的类型</span>$ get <span class="token punctuation">[</span>key<span class="token punctuation">]</span>  <span class="token comment"># 查看键中的值</span>$ <span class="token builtin class-name">set</span> <span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token punctuation">[</span>value<span class="token punctuation">]</span>  <span class="token comment"># 存放键值</span>$ mset <span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token punctuation">[</span>value<span class="token punctuation">]</span> <span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token punctuation">[</span>value<span class="token punctuation">]</span>  <span class="token comment"># 批量存放键值</span>$ append <span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token punctuation">[</span>value<span class="token punctuation">]</span>  <span class="token comment"># 追加内容</span>$ <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="十三、celery相关"><a href="#十三、celery相关" class="headerlink" title="十三、celery相关"></a>十三、celery相关</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''启动相关'''</span><span class="token comment"># celery启动worker命令</span>celery <span class="token operator">-</span>A <span class="token punctuation">{</span>包含celery文件的文件夹名称<span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">{</span>celery启动文件<span class="token punctuation">}</span> worker <span class="token operator">-</span>l infocelery app <span class="token punctuation">{</span>包含celery文件的文件夹名称<span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">{</span>celery启动文件<span class="token punctuation">}</span> worker <span class="token operator">-</span>l info<span class="token comment"># 上面两条命令作用相同</span><span class="token comment"># celery启动beat的命令</span>celery beat <span class="token operator">-</span>A <span class="token punctuation">{</span>包含celery文件的文件夹名称<span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">{</span>celery启动文件<span class="token punctuation">}</span> <span class="token operator">-</span>l info  <span class="token comment"># Linux</span>celery beat app <span class="token punctuation">{</span>包含celery文件的文件夹名称<span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">{</span>celery启动文件<span class="token punctuation">}</span> <span class="token operator">-</span>l infocelery <span class="token operator">-</span>A <span class="token punctuation">{</span>包含celery文件的文件夹名称<span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">{</span>celery启动文件<span class="token punctuation">}</span> beat <span class="token operator">-</span>l info <span class="token comment"># Windows</span><span class="token comment"># 以上两条命令作用相同</span><span class="token triple-quoted-string string">'''停止相关'''</span><span class="token comment"># 杀死所有celery进程</span>ps auxww <span class="token operator">|</span> grep <span class="token string">'celery'</span> <span class="token operator">|</span> awk <span class="token string">'{print $2}'</span> <span class="token operator">|</span> xargs kill <span class="token operator">-</span><span class="token number">9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="十四、Python操作"><a href="#十四、Python操作" class="headerlink" title="十四、Python操作"></a>十四、Python操作</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''判断某键是否在字典中'''</span><span class="token punctuation">{</span>字典变量<span class="token punctuation">}</span><span class="token punctuation">.</span>__contains__<span class="token punctuation">(</span><span class="token string">'{键}'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="十五、MongoDB查询语法（大多数不能使用符号的都可以）"><a href="#十五、MongoDB查询语法（大多数不能使用符号的都可以）" class="headerlink" title="十五、MongoDB查询语法（大多数不能使用符号的都可以）"></a>十五、MongoDB查询语法（大多数不能使用符号的都可以）</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$gt</span><span class="token builtin class-name">:</span> 大于<span class="token variable">$lt</span><span class="token builtin class-name">:</span> 小于<span class="token variable">$gte</span><span class="token builtin class-name">:</span> 大于等于<span class="token variable">$lte</span><span class="token builtin class-name">:</span> 小于等于<span class="token variable">$ne</span><span class="token builtin class-name">:</span> 不等于<span class="token variable">$mod</span><span class="token builtin class-name">:</span> 取模运算db.things.find<span class="token punctuation">(</span><span class="token string">"this.a % 10 == 1"</span><span class="token punctuation">)</span> <span class="token operator">==</span> db.things.find<span class="token punctuation">(</span><span class="token punctuation">{</span>a: <span class="token punctuation">{</span><span class="token variable">$mod</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token number">10</span>, <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token variable">$all</span> 和 <span class="token variable">$in</span><span class="token builtin class-name">:</span> 匹配条件内所有的值<span class="token punctuation">{</span>a: <span class="token punctuation">[</span> <span class="token number">1</span>, <span class="token number">2</span>, <span class="token number">3</span> <span class="token punctuation">]</span><span class="token punctuation">}</span>这个：<span class="token variable"><span class="token variable">`</span>db.things.find<span class="token punctuation">(</span><span class="token punctuation">{</span>a: <span class="token punctuation">{</span>$all: <span class="token punctuation">[</span> <span class="token number">2</span>, <span class="token number">3</span> <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">`</span></span>可以匹配；这个：<span class="token variable"><span class="token variable">`</span>db.things.find<span class="token punctuation">(</span><span class="token punctuation">{</span>a: <span class="token punctuation">{</span>$all: <span class="token punctuation">[</span> <span class="token number">2</span>, <span class="token number">3</span>, <span class="token number">4</span> <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">`</span></span>无法匹配。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="十六、设备一分钟内允许返回的重启思路"><a href="#十六、设备一分钟内允许返回的重启思路" class="headerlink" title="十六、设备一分钟内允许返回的重启思路"></a>十六、设备一分钟内允许返回的重启思路</h2><blockquote><h3 id="python实现："><a href="#python实现：" class="headerlink" title="python实现："></a>python实现：</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;</span><span class="token comment"># 格式化获取现在时间(时：分)</span><span class="token operator">&gt;</span>now_time <span class="token operator">=</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%H:%M"</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token comment"># 分隔</span><span class="token operator">&gt;</span>now_time <span class="token operator">=</span> now_time<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token comment"># 给`分`位数字加一</span><span class="token operator">&gt;</span>dis_time <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>now_time<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token comment"># 再将时间进行替换拼接</span><span class="token operator">&gt;</span>now_time <span class="token operator">=</span> <span class="token string">":"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>dis_time <span class="token keyword">if</span> now_time<span class="token punctuation">.</span>index<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">else</span> i <span class="token keyword">for</span> i <span class="token keyword">in</span> now_time<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token comment"># 执行定时关机</span><span class="token operator">&gt;</span>os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"shutdown -r </span><span class="token interpolation"><span class="token punctuation">{</span>now_time<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="node-js实现："><a href="#node-js实现：" class="headerlink" title="node.js实现："></a>node.js实现：</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&gt;</span><span class="token comment">// 导入moment模块</span><span class="token operator">&gt;</span><span class="token keyword">const</span> moment <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'moment'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&gt;</span><span class="token keyword">var</span> execSync <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"child_process"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>execSync<span class="token punctuation">;</span><span class="token operator">&gt;</span><span class="token comment">// var now_time = moment().format('YYYY-MM-DD HH:mm:ss');</span><span class="token operator">&gt;</span><span class="token comment">// 获取现在时间（时：分）</span><span class="token operator">&gt;</span><span class="token keyword">var</span> now_time <span class="token operator">=</span> <span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'HH:mm'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&gt;</span><span class="token comment">// 给`分`位数字加一</span><span class="token operator">&gt;</span><span class="token keyword">var</span> dis_time <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>now_time<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">&gt;</span><span class="token comment">// 转换成字符串</span><span class="token operator">&gt;</span><span class="token keyword">var</span> dis_time <span class="token operator">=</span> dis_time<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&gt;</span><span class="token comment">// 定义一个空数组</span><span class="token operator">&gt;</span><span class="token keyword">var</span> new_time <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&gt;</span><span class="token comment">// 将需要的数（时、分）加入数组</span><span class="token operator">&gt;</span>new_time<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>now_time<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&gt;</span>new_time<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>dis_time<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&gt;</span><span class="token comment">// 将数组转换为字符串</span><span class="token operator">&gt;</span><span class="token keyword">var</span> new_time <span class="token operator">=</span> new_time<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&gt;</span><span class="token function">execSync</span><span class="token punctuation">(</span><span class="token string">"shutdown -r "</span> <span class="token operator">+</span> new_time<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="十七、node-js时间模块"><a href="#十七、node-js时间模块" class="headerlink" title="十七、node.js时间模块"></a>十七、node.js时间模块</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> moment <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'moment'</span><span class="token punctuation">)</span><span class="token keyword">var</span> now_time <span class="token operator">=</span> <span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM-DD HH:mm:ss'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="十八、tar命令"><a href="#十八、tar命令" class="headerlink" title="十八、tar命令"></a>十八、tar命令</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># tar打包命令</span>打包：tar <span class="token parameter variable">-cvf</span> 打包以后的文件名 要打包的文件名例子：tar <span class="token parameter variable">-cvf</span> flask.tar flask/打包：tar <span class="token parameter variable">-zcvf</span> 压缩以后的文件名 要压缩的文件名例子：tar <span class="token parameter variable">-zcvf</span> flask.tar.gz flask/<span class="token comment"># tar解压命令</span>解包：tar -xvf<span class="token punctuation">(</span>-zxvf<span class="token punctuation">)</span> 压缩包名指定位置解包：tar -xvf<span class="token punctuation">(</span>-zxvf<span class="token punctuation">)</span> 压缩包名 <span class="token parameter variable">-C</span> 要解压的位置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="十九、websocket"><a href="#十九、websocket" class="headerlink" title="十九、websocket"></a>十九、websocket</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 报错是需要可证的，直接取消验证许可</span><span class="token keyword">import</span> ssl<span class="token keyword">from</span> websocket <span class="token keyword">import</span> create_connectionurl <span class="token operator">=</span> <span class="token string">'wss://127.0.0.1/...'</span>ws <span class="token operator">=</span> create_connection<span class="token punctuation">(</span>url<span class="token punctuation">,</span> sslopt<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'cert_reqs'</span><span class="token punctuation">:</span> ssl<span class="token punctuation">.</span>CERT_NONE<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment"># 报错是没有'http、https、ws、wss'协议的，url的前缀不对</span>url <span class="token operator">=</span> <span class="token string">'`wss`://localhost/...'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二十、ip相关命令"><a href="#二十、ip相关命令" class="headerlink" title="二十、ip相关命令"></a>二十、ip相关命令</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ifconfig</span> eth0 <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">'inet addr'</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{ print $2}'</span> <span class="token operator">|</span> <span class="token function">awk</span> -F: <span class="token string">'{print $2}'</span>  <span class="token comment"># 获取eth0的ip</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="二十一、Linux一些命令说明"><a href="#二十一、Linux一些命令说明" class="headerlink" title="二十一、Linux一些命令说明"></a>二十一、Linux一些命令说明</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">~/  <span class="token comment">#是指 [/home/使用的用户/] </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="二十二、systemctl-服务命令无法启动"><a href="#二十二、systemctl-服务命令无法启动" class="headerlink" title="二十二、systemctl 服务命令无法启动"></a>二十二、systemctl 服务命令无法启动</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 因环境变量无法启动</span><span class="token comment"># 场景：python使用的sqlite3与系统中的sqlite3版本不一致导致项目无法启动</span><span class="token comment"># 解决：</span><span class="token comment"># 创建文件：/etc/systemd/system/[服务].service.d/[任意名称].conf</span><span class="token comment"># **注**：服务名称必须与.service文件的相同</span><span class="token comment"># /etc/systemd/system/*.service.d/*.conf</span><span class="token punctuation">[</span>Server<span class="token punctuation">]</span><span class="token assign-left variable">Environment</span><span class="token operator">=</span><span class="token string">"环境变量"</span><span class="token assign-left variable">Environment</span><span class="token operator">=</span><span class="token string">"环境变量"</span><span class="token punctuation">..</span>.<span class="token comment"># 重启服务</span>systemctl daemon-reload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二十三、无法加载文件-WindowsPowerShell-profile-ps1，因为在此系统上禁止-运行脚本"><a href="#二十三、无法加载文件-WindowsPowerShell-profile-ps1，因为在此系统上禁止-运行脚本" class="headerlink" title="二十三、无法加载文件 WindowsPowerShell\profile.ps1，因为在此系统上禁止 运行脚本"></a>二十三、无法加载文件 WindowsPowerShell\profile.ps1，因为在此系统上禁止 运行脚本</h2><img src="/my-hexo/2023/11/06/bi-ji/%E7%AC%94%E8%AE%B0-23.png" class=""><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 解决方案：</span><span class="token comment"># 使用管理员身份打开，Power Shell（Windows终端）</span>Set-ExecutionPolicy RemoteSigned<span class="token comment"># --如果弹出选项就输入： Y</span>Get-ExecutionPolicy<span class="token comment"># --输出：RemoteSigned</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二十四、命令行里面使用python导入报错"><a href="#二十四、命令行里面使用python导入报错" class="headerlink" title="二十四、命令行里面使用python导入报错"></a>二十四、命令行里面使用python导入报错</h2><img src="/my-hexo/2023/11/06/bi-ji/%E7%AC%94%E8%AE%B0-24.png" class=""><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 解决方法</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> django<span class="token punctuation">.</span>conf <span class="token keyword">import</span> settings  <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> settings<span class="token punctuation">.</span>configure<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="二十五、Vue-打包命令"><a href="#二十五、Vue-打包命令" class="headerlink" title="二十五、Vue 打包命令"></a>二十五、Vue 打包命令</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> run build<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="二十六、Navicat-远程连接数据库"><a href="#二十六、Navicat-远程连接数据库" class="headerlink" title="二十六、Navicat 远程连接数据库"></a>二十六、Navicat 远程连接数据库</h2><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 查询被连接主机MySQL用户状态USE mysql;SELECT host,user FROM user WHERE user="root";&gt;&gt;&gt; host       user&gt;&gt;&gt; localhost  root# 修改状态UPDATE user SET host="%" WHERE user="root";# 这样，任意机器都可以使用Navicat连接该设备的数据库了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二十七、MySQL初始化"><a href="#二十七、MySQL初始化" class="headerlink" title="二十七、MySQL初始化"></a>二十七、MySQL初始化</h2><blockquote><p>MySQL 报错MySQL.sock，不存在</p><p>ERROR 2002 (HY000): Can’t connect to local MySQL server through socket ‘/var/run/mysqld/mysqld.sock’ (2)</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">service</span> mysqld stop          <span class="token comment"># 停止MySQL服务</span><span class="token function">rm</span> <span class="token parameter variable">-rf</span> /var/lib/mysql/*      <span class="token comment"># 删除 /var/lib/mysql/ 下的所有文件</span><span class="token comment"># 下面的操作看情况进行</span><span class="token function">rm</span> /var/lock/subsys/mysqld   <span class="token comment"># 删除锁定文件</span><span class="token function">killall</span> mysqld               <span class="token comment"># 杀死所有MySQL进程</span><span class="token comment"># 上面的操作看情况进行</span>mysqld <span class="token parameter variable">--initialize</span>          <span class="token comment"># 初始化MySQL</span><span class="token function">service</span> mysql start          <span class="token comment"># 启动MySQL服务</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="免密启动"><a href="#免密启动" class="headerlink" title="免密启动"></a>免密启动</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/mysql/mysql.conf.d/mysqld.cnf<span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>skip-grant-table<span class="token comment"># 退出</span><span class="token function">service</span> mysql restart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="清空-authentication-string-字段"><a href="#清空-authentication-string-字段" class="headerlink" title="清空 authentication_string 字段"></a>清空 authentication_string 字段</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql -uroot                 # 进入MySQLUSE mysql;                   # 使用mysql数据库UPDATE `user`SET authentication_string=""WHERE user="root";           # 修改root用户密码为空exit                         # 退出数据库# 关闭免密，并重启服务<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql -urootSET password='自己的密码';FLUSH PRIVILEGES;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="二十八、Vue自适应"><a href="#二十八、Vue自适应" class="headerlink" title="二十八、Vue自适应"></a>二十八、Vue自适应</h2><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;el-col        :lg="{ span: 3, offset: 0 }"        :md="{ span: 8, offset: 0 }"        :sm="{ span: 8, offset: 0 }"        :xl="{ span: 6, offset: 0 }"         :xs="{ span: 8, offset: 0 }" &gt;&lt;/el-col&gt;&lt;!--栅栏一共24个lg: 大屏显示器，办公使用md：中屏显示器，笔记本                   span 栅格占据的列数 offset 栅格左侧的间隔数sm：小屏显示器，平板xs：超小屏显示器，手机xl：2k屏幕。--&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二十九、nvm-node管理器"><a href="#二十九、nvm-node管理器" class="headerlink" title="二十九、nvm node管理器"></a>二十九、nvm node管理器</h2><p><strong>注</strong>：nvm安装前删除计算机中的node.js</p><h3 id="第一步：下载nvm"><a href="#第一步：下载nvm" class="headerlink" title="第一步：下载nvm"></a>第一步：下载nvm</h3><blockquote><p>路径：<a href="https://github.com/coreybutler/nvm-windows/releases">Releases · coreybutler/nvm-windows (github.com)</a></p></blockquote><img src="/my-hexo/2023/11/06/bi-ji/%E7%AC%94%E8%AE%B0-29.png" class=""><h3 id="第二步：安装"><a href="#第二步：安装" class="headerlink" title="第二步：安装"></a>第二步：安装</h3><blockquote><p>安装步骤</p><h4 id="第一步：同意协议、下一步；（没什么说的，就不加图了）"><a href="#第一步：同意协议、下一步；（没什么说的，就不加图了）" class="headerlink" title="第一步：同意协议、下一步；（没什么说的，就不加图了）"></a>第一步：同意协议、下一步；（没什么说的，就不加图了）</h4><h4 id="第二步：选择nvm本地安装目录；（最好不要有空格）"><a href="#第二步：选择nvm本地安装目录；（最好不要有空格）" class="headerlink" title="第二步：选择nvm本地安装目录；（最好不要有空格）"></a>第二步：选择nvm本地安装目录；（最好不要有空格）</h4><h4 id="第三步：设置nodejs快捷方式路径；（需要手动创建名为nodejs的快捷方式）"><a href="#第三步：设置nodejs快捷方式路径；（需要手动创建名为nodejs的快捷方式）" class="headerlink" title="第三步：设置nodejs快捷方式路径；（需要手动创建名为nodejs的快捷方式）"></a>第三步：设置nodejs快捷方式路径；（需要手动创建名为nodejs的快捷方式）</h4><h4 id="第四部：install-finish"><a href="#第四部：install-finish" class="headerlink" title="第四部：install -> finish"></a>第四部：install -&gt; finish</h4></blockquote><h3 id="第三步：查看"><a href="#第三步：查看" class="headerlink" title="第三步：查看"></a>第三步：查看</h3><blockquote><p>命令窗口键入：nvm （查看是否安装成功）</p></blockquote><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>–help</td><td>显示命令行帮助信息</td></tr><tr><td>–version</td><td>打印当前nvm版本号</td></tr><tr><td>deactivate</td><td>取消当前nvm命令行效果</td></tr><tr><td>install [-s] <version></version></td><td>从源下载一个版本为<version>的node.js</version></td></tr><tr><td>uninstall <version></version></td><td>卸载一个版本为<version>的node.js</version></td></tr><tr><td>use <version></version></td><td>使用<version>版本的node</version></td></tr><tr><td>current</td><td>查看当前使用的node版本</td></tr><tr><td>ls</td><td>查看所有<strong>本地</strong>可用的node版本</td></tr><tr><td>ls <version></version></td><td>查看指定版本</td></tr><tr><td>ls-remote</td><td>查看所有可用的远程版本（Linux与Mac）</td></tr><tr><td>list available</td><td>同上（windows）</td></tr></tbody></table><h2 id="三十、搭梯子"><a href="#三十、搭梯子" class="headerlink" title="三十、搭梯子"></a>三十、搭梯子</h2><p>购买远程代理：<a href="https://x.syksdw.com/#/dashboard">X寄场</a></p><p>登录用户名：<a href="mailto:lyt_sy@sina.com">lyt_sy@sina.com</a></p><p>密    码：设置好的密码</p><p>安装包路径：<a href="https://github.com/97668589/v2rayN/releases/tag/v6.9">v2rayN</a></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ol><li><p>双击运行；</p><img src="/my-hexo/2023/11/06/bi-ji/%E7%AC%94%E8%AE%B0-30-1.png" class=""><ul><li>如果没有将程序放到桌面，找不到程序可以双击右下角<img src="/my-hexo/2023/11/06/bi-ji/%E7%AC%94%E8%AE%B0-30-2.png" class=""></li></ul></li><li><p>登录x-寄场：复制v2ray订阅地址；</p><img src="/my-hexo/2023/11/06/bi-ji/%E7%AC%94%E8%AE%B0-30-3.png" class=""></li><li><p>填写备注等信息，注意：勾选<strong>备用</strong>，然后保存；</p><img src="/my-hexo/2023/11/06/bi-ji/%E7%AC%94%E8%AE%B0-30-4.png" class=""></li><li><p>更新当前订阅；</p><img src="/my-hexo/2023/11/06/bi-ji/%E7%AC%94%E8%AE%B0-30-5.png" class=""></li><li><p>测试-启用节点（选择一个右键即可）。</p><img src="/my-hexo/2023/11/06/bi-ji/%E7%AC%94%E8%AE%B0-30-6.png" class=""></li></ol><h2 id="三十一、PostgreSQL设置自增长"><a href="#三十一、PostgreSQL设置自增长" class="headerlink" title="三十一、PostgreSQL设置自增长"></a>三十一、PostgreSQL设置自增长</h2><pre class="line-numbers language-postgresql" data-language="postgresql"><code class="language-postgresql">-- PostgreSQL 与 MySQL 不同，MySQL设置自增长直接用autoincrement设置，PostgreSQL需要先设置序列对象，并在创建字段时使用该序列对象作为缺省值，需要设置该字段不为空/* 设置序列对象 */[CREATE | ALTER | DROP] SEQUENCE IF NOT EXISTS &lt;序列对象名&gt;_seqINCREMENT 1          -- 序列每次自增多少START 1              -- 从1开始MINVALUE 1           -- 序列最小值MAXVALUE 2147483647  -- 序列最大值CACHE 1              -- 缓存序列（服务器重启之后缓存会丢失)NO CYCLE;            -- 是否循环（NO CYCLE | CYCLE: 序列增长到最大值之后是否从新开始）/* 创建表时引用 */CREATE TABLE &lt;表名&gt; (    "id" int4 NOT NULL DEFAULT NEXTVAL('&lt;序列对象名&gt;_seq::regclass'),    ......)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三十二、VSCode-远程免密连接"><a href="#三十二、VSCode-远程免密连接" class="headerlink" title="三十二、VSCode 远程免密连接"></a>三十二、VSCode 远程免密连接</h2><p>VSCode没有保存密码功能，只能通过ssh秘钥的方式进行自动登录，下面是使用RSA秘钥方式自动登录开发服务器。</p><blockquote><p>默认每次连接，打开文件都得输入密码，当密码很复杂的时候这是一件很痛苦的是。</p></blockquote><h3 id="1-生成秘钥对"><a href="#1-生成秘钥对" class="headerlink" title="1.生成秘钥对"></a>1.生成秘钥对</h3><p>默认电脑上安装了git，没有的话就先安装；打开终端或者git-bash输入以下命令（邮箱使用自己的）。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-C</span> <span class="token string">"&lt;邮箱&gt;"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后一路回车直到完成；秘钥文件存放在：<code>C:\User\&lt;用户名&gt;\.ssh</code></p><h3 id="2-将公钥上传到服务器"><a href="#2-将公钥上传到服务器" class="headerlink" title="2.将公钥上传到服务器"></a>2.将公钥上传到服务器</h3><ol><li>将id_rsa.pub重命名为authorized_keys；</li><li>然后上传到服务器的/root/.ssh目录下（没有则新建.ssh）；</li><li>修改VSCode的ssh_config文件。</li></ol><h3 id="3-配置VSCode远程ssh文件"><a href="#3-配置VSCode远程ssh文件" class="headerlink" title="3.配置VSCode远程ssh文件"></a>3.配置VSCode远程ssh文件</h3><p>以下是配置文件的栗子</p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini">Host &lt;服务IP&gt;    HostName &lt;服务名称&gt;    User &lt;ssh用户名&gt;    Port &lt;ssh连接端口&gt;    PreferredAuthentications publickey    IdentityFile &lt;本地key文件&gt;<span class="token comment"># 举例</span>Host 10.10.0.189    HostName 10.10.0.189    User root    Port 10022    PreferredAuthentications LGGawZI4EhMyjgvlcrTVYQMwZfe2c19cHzxABL3IUPA    IdentityFile "C:\Users\22759\.ssh\id_rsa"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-常见问题解决方法"><a href="#4-常见问题解决方法" class="headerlink" title="4.常见问题解决方法"></a>4.常见问题解决方法</h3><ol><li><p>文件权限不对</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">chmod</span> <span class="token number">700</span> /root$ <span class="token function">chmod</span> <span class="token number">700</span> /root/.ssh$ <span class="token function">chmod</span> <span class="token number">644</span> /root/.ssh/authorized_keys<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>sshd配置问题</p><p>编辑/etc/ssh/sshd_config文件；找到对应配置取消前面注释。</p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token comment"># 开启秘钥登录</span>PubkeyAuthentication yesAuthorizedKeysFile .ssh/authorized_keys .ssh/authorized_keys2<span class="token comment"># 将下面的配置注释掉</span><span class="token comment"># RSAAuthentication no</span><span class="token comment"># 退出并执行重启sshd</span>service sshd restart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> MySQL </tag>
            
            <tag> Linux </tag>
            
            <tag> Nginx </tag>
            
            <tag> sqlite3 </tag>
            
            <tag> ES </tag>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FastAPI-1：介绍</title>
      <link href="/my-hexo/2023/11/06/python/fastapi/fastapi-1-jie-shao/"/>
      <url>/my-hexo/2023/11/06/python/fastapi/fastapi-1-jie-shao/</url>
      
        <content type="html"><![CDATA[<h1 id="FastAPI-1：介绍"><a href="#FastAPI-1：介绍" class="headerlink" title="FastAPI-1：介绍"></a>FastAPI-1：介绍</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>为啥要学它呢，因为学 <code>Flask</code> 的时候发现有人更推荐它代替 <code>Flask</code> ，看了下介绍，感觉很强，而且也能拿来做平台，当然学起来！卷起来！</p><h2 id="为什么要是用FastAPI？"><a href="#为什么要是用FastAPI？" class="headerlink" title="为什么要是用FastAPI？"></a>为什么要是用FastAPI？</h2><ul><li>日渐没落的是后端HTML渲染这种方式，比如 <code>Flask + Jinja2</code> </li><li>前后端分离成为主流</li><li>异步框架</li></ul><p>官方地址：<a href="https://fastapi.tiangolo.com/">https://fastapi.tiangolo.com/</a></p><h2 id="FastAPI是什么？"><a href="#FastAPI是什么？" class="headerlink" title="FastAPI是什么？"></a>FastAPI是什么？</h2><ul><li><code>FastAPI</code> 是一个现代、快速（高性能）的web框架</li><li>用于基于标准 <code>Python</code> 类型提示是用 <code>Python 3.6+</code> 构建API</li></ul><h2 id="FastAPI版本要求"><a href="#FastAPI版本要求" class="headerlink" title="FastAPI版本要求"></a>FastAPI版本要求</h2><p>Python3.6+</p><h2 id="FastAPI优点"><a href="#FastAPI优点" class="headerlink" title="FastAPI优点"></a>FastAPI优点</h2><p>官方说明：</p><ul><li>类型检查、自动swagger UI、支持asyncio、强大的依赖注入系统；</li><li>围绕着框架本身的插件生态，比如pydantic、SQLAlchemy，成熟；</li><li>速度快：非常高的性能，与 <code>NodeJS</code> 和 <code>Go</code> 不相上下，多亏 <code>Starlette</code> 和 <code>Pydantic</code> ， FastAPI是最快的 <code>Python</code> 框架之一；</li><li>编码快：将开发特性所需的速度提高大约 200% 到 300%；</li><li>错误少：减少大约 40% 的人为（开发）错误；</li><li>直观：强大的编辑器支持，支持多场景开发，调试所花的时间更少；</li><li>简单：被设计为易于使用和学习，减少阅读文档的时间；</li><li>代码少：最小化重复，更少的错误；</li><li>健壮：代码可随时部署到生产环境，并自动提供交互文档；</li><li>标准：基于（并完全兼容）api的开放标准：OpenAPI（以前称为Swagger）和JSON模式</li></ul><h2 id="Pydantic-在-FastAPI"><a href="#Pydantic-在-FastAPI" class="headerlink" title="Pydantic 在 FastAPI"></a>Pydantic 在 FastAPI</h2><ul><li>FastAPI是完全建立在Pydantic的基础上的；</li><li>Pydantic是一个用来执行数据校验的Python库，具体教程可看：<a href="https://www.cnblogs.com/poloyy/tag/Pydantic/">https://www.cnblogs.com/poloyy/tag/Pydantic/</a></li></ul><h2 id="Type-Hints-在FastAPI"><a href="#Type-Hints-在FastAPI" class="headerlink" title="Type Hints 在FastAPI"></a>Type Hints 在FastAPI</h2><ul><li>Type Hints 介绍：<a href="https://www.cnblogs.com/poloyy/p/15145380.html">https://www.cnblogs.com/poloyy/p/15145380.html</a></li><li>typing 模块：<a href="https://www.cnblogs.com/poloyy/p/15150315.html">https://www.cnblogs.com/poloyy/p/15150315.html</a></li></ul><h3 id="使用FastAPI时用Type-Hints声明参数可以获得"><a href="#使用FastAPI时用Type-Hints声明参数可以获得" class="headerlink" title="使用FastAPI时用Type Hints声明参数可以获得"></a>使用FastAPI时用Type Hints声明参数可以获得</h3><ul><li>编辑器支持智能提示，错误检查；</li><li>类型检查，不对会报warning；</li></ul><h3 id="FastAPI还会用类型提示来做"><a href="#FastAPI还会用类型提示来做" class="headerlink" title="FastAPI还会用类型提示来做"></a>FastAPI还会用类型提示来做</h3><ul><li><strong>定义参数要求</strong> ：声明对请求路径参数、查询参数、请求头、请求体、依赖等的要求；</li><li><strong>转换数据</strong> ：将来自请求的数据转换为需要的类型；</li><li>**校验数据 **：对于每一个请求当数据校验失败时自动生成错误信息返回给客户端；</li><li><strong>使用 OpenAPI 记录API</strong> ：然后用于自动生成交互式文档的用户界面，参数会显示对应的类型注释。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> FasAPI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> FastAPI </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
