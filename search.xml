<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>cksum</title>
      <link href="/2023/12/06/linux/command/1-wen-jian-guan-li/cksum/"/>
      <url>/2023/12/06/linux/command/1-wen-jian-guan-li/cksum/</url>
      
        <content type="html"><![CDATA[<h1 id="cksum"><a href="#cksum" class="headerlink" title="cksum"></a>cksum</h1><p>Linux cksum命令用于检查文件的CRC是否正确。确保文件从一个系统传输到另一个系统的过程中不被损坏。CRC是一种排错检查方式，该校验法的标准由CCITT所指定，至少可检测到99.998%的已知错误。指定文件交由指令”cksum”进行校验后，该指令会返回校验结果提供用户核对文件是否正确无误，若不指定任何文件名称或是所给予的文件名为”-“，则指令”cksum”会从标准输入设备中读取数据。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cksum</span> <span class="token punctuation">[</span>--help<span class="token punctuation">]</span><span class="token punctuation">[</span>--version<span class="token punctuation">]</span><span class="token punctuation">[</span>文件<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h2><ul><li>–help: 帮助信息。</li><li>–version: 版本信息。</li><li>文件: 需要进行检查的文件路径。</li></ul><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 使用指令"cksum"计算文件"testfile"的完整性，输入如下命令</span>$ <span class="token function">cksum</span> textfile<span class="token comment"># 以上命令执行后，将输出校验码等相关信息，具体输出信息如下</span>$ <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">1263453430</span> <span class="token number">78</span> testfile<span class="token comment"># 尚明的输出信息中，"1263453430"标识校验码，"78"表示字节数。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong>：如果文件中有任何字符被修改，都将改变计算后CRC校验码的值。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Command </category>
          
          <category> 文件管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Command </tag>
            
            <tag> 文件管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>chown</title>
      <link href="/2023/12/05/linux/command/1-wen-jian-guan-li/chown/"/>
      <url>/2023/12/05/linux/command/1-wen-jian-guan-li/chown/</url>
      
        <content type="html"><![CDATA[<h1 id="chown"><a href="#chown" class="headerlink" title="chown"></a>chown</h1><p>Linux chown（英文全拼：change owner）命令用于设置文件所有者和文件关联组的命令。Linux/Unix是多人多工操作系统，所有的文件皆有拥有者。利用chown将指定文件的拥有者改为指定的用户或组，用户可以是用户名或者用户ID，组可以是组名或者组ID，文件是以空格分开的要改变权限的文件列表，支持通配符。</p><p>chown需要<code>root</code>权限才能执行此命令。只用超级用户和属于组的文件所有者才能变更文件关联组。非超级用户如果需要设置关联组可能需要使用<a href="./chgrp.md">chgrp</a>命令。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chown</span> <span class="token punctuation">[</span>-cfhvR<span class="token punctuation">]</span><span class="token punctuation">[</span>--help<span class="token punctuation">]</span><span class="token punctuation">[</span>--version<span class="token punctuation">]</span> <span class="token operator">&lt;</span>用户<span class="token operator">&gt;</span><span class="token punctuation">[</span>:<span class="token operator">&lt;</span>组<span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>文件<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h2><ul><li>用户: 新的文件拥有者或拥有者ID。</li><li>组: 新的文件拥有者所在的组名称或ID。</li><li>-c: 显示更改部分的信息。</li><li>-f: 忽略错误信息。</li><li>-h: 修复符号链接。</li><li>-v: 显示详细的处理信息。</li><li>-R: 处理指定目录以及其子目录下的所有文件。</li><li>–help: 显示辅助说明。</li><li>–version: 显示版本信息。</li></ul><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 把 /var/run/httpd.pid 的所属者设置成root</span>$ <span class="token function">chown</span> root /var/run/httpd.pid<span class="token comment"># 将文件 file.txt 的拥有者设置为admin, 群体的使用者设置成adminGroup</span>$ <span class="token function">chown</span> admin:adminGroup file.txt<span class="token comment"># 将当前目录下的所有文件与子目录的拥有者皆设置为admin，群体的使用者adminGroup</span>$ <span class="token function">chown</span> <span class="token parameter variable">-R</span> admin:adminGroup *<span class="token comment"># 把 /home/admin 的关联组设置为512(关联组ID)，不改变所有者</span>$ <span class="token function">chown</span> :512 /home/admin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Command </category>
          
          <category> 文件管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Command </tag>
            
            <tag> 文件管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>chmod</title>
      <link href="/2023/12/04/linux/command/1-wen-jian-guan-li/chmod/"/>
      <url>/2023/12/04/linux/command/1-wen-jian-guan-li/chmod/</url>
      
        <content type="html"><![CDATA[<h1 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h1><p>Linux chmod (英文全拼：change mode) 命令是控制用户对文件的权限的，命令。</p><p>Linux/Unix的文件调用权限分为三级：文件所有者（Owner）、用户组（Group）、其他用户（Other Users）。</p><img src="/2023/12/04/linux/command/1-wen-jian-guan-li/chmod/chmod-1.jpg" class=""><p>只有文件所有者和超级用户可以修改文件或目录的权限。可以使用绝对模式（八进制数字模式），符号模式指定文件的权限。</p><img src="/2023/12/04/linux/command/1-wen-jian-guan-li/chmod/chmod-2.png" class=""><p><strong>使用权限</strong> ：所有使用者</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> <span class="token punctuation">[</span>-cfvr<span class="token punctuation">]</span> <span class="token punctuation">[</span>--help<span class="token punctuation">]</span> <span class="token punctuation">[</span>--version<span class="token punctuation">]</span> mode file<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="参数说明："><a href="#参数说明：" class="headerlink" title="参数说明："></a>参数说明：</h3><h4 id="mode：权限设定字符串，格式如下："><a href="#mode：权限设定字符串，格式如下：" class="headerlink" title="mode：权限设定字符串，格式如下："></a>mode：权限设定字符串，格式如下：</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>ugoa<span class="token punctuation">..</span>.<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">[</span>+-<span class="token operator">=</span><span class="token punctuation">]</span><span class="token punctuation">[</span>rwxX<span class="token punctuation">]</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span><span class="token punctuation">[</span>,<span class="token punctuation">..</span>.<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="其中："><a href="#其中：" class="headerlink" title="其中："></a>其中：</h4><ul><li><code>u</code> 表示该文件的拥有者， <code>g</code> 表示与该文件的拥有者属于同一个群体（group）者， <code>o</code> 表示其他以外的人， <code>a</code> 表示这三者皆是。</li><li><code>+</code> 表示增加权限、 <code>-</code> 表示取消权限、 <code>=</code> 表示唯一设定权限。</li><li><code>r</code> 表示可读取， <code>w</code> 表示可写入， <code>x</code> 表示可执行， <code>X</code> 表示只有当该文件是个子目录或者该文件已经被设定为可执行。</li></ul><h4 id="其他参数说明："><a href="#其他参数说明：" class="headerlink" title="其他参数说明："></a>其他参数说明：</h4><ul><li>-c：如该文件权限确实已经更改，才显示其更改动作。</li><li>-f：若该文件权限无法被更改也不要显示错误讯息。</li><li>-v：显示权限变更的详细信息。</li><li>-R：对目前目录下的所有文件与子目录进行相同的权限变更（即以递归的方式逐个变更）。</li><li>–help：显示辅助说明。</li><li>–version：显示版本。</li></ul><h2 id="符号模式"><a href="#符号模式" class="headerlink" title="符号模式"></a>符号模式</h2><p>使用符号模式可以设置多个项目： <code>who</code> （用户类型）， <code>operator</code> （操作符） 和 <code>permission</code> （权限），每个项目的设置可以用逗号隔开。命令 <code>chmod</code> 将修改 <code>who</code> 指定的用户类型对文件的访问权限，用户类型由一个或者多个字母在 <code>who</code> 的位置来说明，如 <code>who</code> 的符号模式表所示：</p><table><thead><tr><th>who</th><th>用户类型</th><th>说明</th></tr></thead><tbody><tr><td>u</td><td>user</td><td>文件所有者</td></tr><tr><td>g</td><td>group</td><td>文件所有者所在组</td></tr><tr><td>o</td><td>others</td><td>所有其他用户</td></tr><tr><td>a</td><td>all</td><td>所用用户，相当于ugo</td></tr></tbody></table><p>operator的符号模式表：</p><table><thead><tr><th>Operator</th><th>说明</th></tr></thead><tbody><tr><td>+</td><td>为指定的用户类型增加权限</td></tr><tr><td>-</td><td>去除指定用户类型的权限</td></tr><tr><td>=</td><td>设置指定用户权限的设置，即将用户类型的所有权限重新设置</td></tr></tbody></table><p>permission的符号模式表：</p><table><thead><tr><th>模式</th><th>名字</th><th>说明</th></tr></thead><tbody><tr><td>r</td><td>读</td><td>设置为可读权限</td></tr><tr><td>w</td><td>写</td><td>设置为可写权限</td></tr><tr><td>x</td><td>执行权限</td><td>设置为可执行权限</td></tr><tr><td>X</td><td>特殊执行权限</td><td>只有当文件为目录文件，或者其他类型的用户有可执行权限时，才将文件权限设置可执行</td></tr><tr><td>s</td><td>setuid/gid</td><td>当文件被执行时，根据who参数指定的用户类型设置文件的setuid或者setgid权限</td></tr><tr><td>t</td><td>粘贴位</td><td>设置粘贴位，只有超级用户可以设置该位，只有文件所有者u可以使用该位</td></tr></tbody></table><h2 id="八进制语法"><a href="#八进制语法" class="headerlink" title="八进制语法"></a>八进制语法</h2><p>chmod命令可以使用八进制数来指定权限。文件或目录的权限位是由9个权限位来控制，每三位为一组，它们分别是文件所有者（User）的读、写、执行，用户组（Group）的读、写、执行以及其他用户（Other）的读、写、执行。历史上，文件权限被放在一个比特掩码中，掩码中指定的比特位设为1，用来说明一个类具有相应的优先级。</p><table><thead><tr><th>#</th><th>权限</th><th>rwx</th><th>二进制</th></tr></thead><tbody><tr><td>7</td><td>读+写+执行</td><td>rwx</td><td>111</td></tr><tr><td>6</td><td>读+写</td><td>rw-</td><td>110</td></tr><tr><td>5</td><td>读+执行</td><td>r-x</td><td>101</td></tr><tr><td>4</td><td>只读</td><td>r–</td><td>100</td></tr><tr><td>3</td><td>写+执行</td><td>-wx</td><td>011</td></tr><tr><td>2</td><td>只写</td><td>-w-</td><td>010</td></tr><tr><td>1</td><td>只执行</td><td>–x</td><td>001</td></tr><tr><td>0</td><td>无</td><td>—</td><td>000</td></tr></tbody></table><p>例如，765将这样解释：</p><ul><li>所有者的权限用数字表达：属组的那三个权限位的数字加起来的总和。如rwx，也就是4+2+1，应该是7。</li><li>用户组的权限用数字表达：属组的那个权限位数字的相加的总和。如rw-，也就是4+2+0，应该是6。</li><li>其它用户的权限数字表达：其它用户权限位的数字相加的总和。如r-x，也就是 4+0+1，应该是5。</li></ul><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 将文件file设为所有人皆可读取：</span><span class="token function">chmod</span> ugo+r <span class="token function">file</span><span class="token comment"># 将文件file设为所有人皆可读取：</span><span class="token function">chmod</span> a+r <span class="token function">file</span><span class="token comment"># 将文件file1和文件file2设为该文件拥有者，与其所属同一个群体者可写入，但其它以外的人则不可写入：</span><span class="token function">chmod</span> ug+w,o-w file1 file2<span class="token comment"># 将ex文件拥有者增加可执行权限：</span><span class="token function">chmod</span> u+x ex<span class="token comment"># 将目前目录下的所有文件与子目录皆设为任何人可读取：</span><span class="token function">chmod</span> <span class="token parameter variable">-R</span> a+r *<span class="token comment"># 此外chmod也可以用数字来表示权限如：</span><span class="token function">chmod</span> <span class="token number">777</span> <span class="token function">file</span><span class="token comment"># 语法为：</span><span class="token function">chmod</span> abc <span class="token function">file</span><span class="token comment"># 其中a,b,c各为一个数字，分别表示User、Group、Other的权限。</span><span class="token assign-left variable">r</span><span class="token operator">=</span><span class="token number">4</span>, <span class="token assign-left variable">w</span><span class="token operator">=</span><span class="token number">2</span>, <span class="token assign-left variable">x</span><span class="token operator">=</span><span class="token number">1</span><span class="token comment"># 若要rwx属性则 4+2+1=7</span><span class="token comment"># 若要rw-属性则 4+2+0=6</span><span class="token comment"># 若要r-x属性则 4+1+0=5</span><span class="token function">chmod</span> <span class="token assign-left variable">a</span><span class="token operator">=</span>rwx <span class="token function">file</span> 和 <span class="token function">chmod</span> <span class="token number">777</span> <span class="token function">file</span> 效果相同<span class="token function">chmod</span> <span class="token assign-left variable">ug</span><span class="token operator">=</span>rwx,o<span class="token operator">=</span>x <span class="token function">file</span> 和 <span class="token function">chmod</span> <span class="token number">771</span> <span class="token function">file</span> 效果相同<span class="token comment"># 若用 `chmod 4755 file` 可使此程序具有root的权限。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="更多说明"><a href="#更多说明" class="headerlink" title="更多说明"></a>更多说明</h2><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>chmod a+r file</td><td>给file的所有用户增加读权限</td></tr><tr><td>chmod a-x file</td><td>删除file的所有用户的执行权限</td></tr><tr><td>chmod a+rw file</td><td>给file的所有用户增加读写权限</td></tr><tr><td>chmod +rwx file</td><td>给file的所有用户增加读写执行权限</td></tr><tr><td>chmod u=rw,go= file</td><td>对file的所有者设置读写权限，清空该用户组和其他用户对file的所有权限（空格代表无权限）</td></tr><tr><td>chmod -R u+r,go-r docs</td><td>对目录docs和其子目录层次结构中的所有文件给用户增加读权限，而对用户组和其他用户删除读权限</td></tr><tr><td>chmod 664 file</td><td>对file的拥有者和用户组设置读写权限，为其其他用户设置读权限。</td></tr><tr><td>chmod 0755 file</td><td>相当于u=rwx(4+2+1)，go=rw（4+1 &amp; 4+1）。0没有特殊模式。</td></tr><tr><td>chmod 4755 file</td><td>4设置了设置用户ID位，剩下的相当于u=rwx（4+2+1),go=rx(4+1 &amp; 4+1)。</td></tr><tr><td>find path/ -type d -exec chmod a-x {} ;</td><td>删除可执行权限对path/以及其所有的目录（不包含文件）的所有用户，使用’-type f’匹配文件</td></tr><tr><td>find path/ -tyoe d -exec chmod a+x {} ;</td><td>允许所有用户浏览或通过目录path/</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Command </category>
          
          <category> 文件管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Command </tag>
            
            <tag> 文件管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>chgrp</title>
      <link href="/2023/12/03/linux/command/1-wen-jian-guan-li/chgrp/"/>
      <url>/2023/12/03/linux/command/1-wen-jian-guan-li/chgrp/</url>
      
        <content type="html"><![CDATA[<h1 id="chgrp"><a href="#chgrp" class="headerlink" title="chgrp"></a>chgrp</h1><p>Linux chgrp （英文全拼：change group）命令用于变更文件或目录的所属群组。与<a href="">chown</a>命令不同，chgrp允许普通用户改变文件所属的组，只要该用户是该组的一员。在UNIX系统家族里，文件或目录权限的掌控以拥有者及所属群组来管理。可以使用chgrp指令去变更文件与目录的所属群组，设置方式采用群组名或群组识别码皆可。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chgrp</span> <span class="token punctuation">[</span>-cfhRv<span class="token punctuation">]</span><span class="token punctuation">[</span>--help<span class="token punctuation">]</span><span class="token punctuation">[</span>--version<span class="token punctuation">]</span><span class="token punctuation">[</span>所属群组<span class="token punctuation">]</span><span class="token punctuation">[</span>文件或目录<span class="token punctuation">]</span> 或 <span class="token function">chgrp</span> <span class="token punctuation">[</span>-cfhRv<span class="token punctuation">]</span><span class="token punctuation">[</span>--help<span class="token punctuation">]</span><span class="token punctuation">[</span>--reference<span class="token operator">=</span><span class="token operator">&lt;</span>参考文件或目录<span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token punctuation">[</span>--version<span class="token punctuation">]</span><span class="token punctuation">[</span>文件或目录<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h2><ul><li>-c 或 –changes: 效果类似”-v”参数，但仅汇报更改的部分。</li><li>-f 或 –quiet 或 –silent: 不显示错误信息。</li><li>-h 或 –no-dereference: 只对符号连接的文件作修改，而不改动其他任何相关文件。</li><li>-R 或 –recursive: 递归处理，将指定目录下的所有文件及子目录一并处理。</li><li>-v 或 –verbose: 显示命令行执行过程。</li><li>–help: 在线帮助。</li><li>–reference=&lt;参考文件或目录&gt;: 把指定文件或目录的所属群组全部设成和参考文件或目录的所属群组相同。</li><li>–version: 显示版本信息。</li></ul><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1、改变文件的群组属性</span>$ <span class="token function">chgrp</span> <span class="token parameter variable">-v</span> bin <span class="token operator">&lt;</span>文件名<span class="token operator">&gt;</span><span class="token comment"># 输出(使用别人的，自己没有通过)</span>$ ll$ <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> ---xrw-r-- <span class="token number">1</span> root root <span class="token number">302108</span> <span class="token number">11</span>-13 06:03 log2012.log$ <span class="token function">chgrp</span> <span class="token parameter variable">-v</span> bin log2012.log<span class="token comment"># "log2012.log" 的所属组已更改为 bin</span>$ ll$ <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> ---xrw-r-- <span class="token number">1</span> root bin  <span class="token number">302108</span> <span class="token number">11</span>-13 06:03 log2012.log<span class="token comment"># 说明：将log2012.log文件由root群组改为bin群组。</span><span class="token comment"># 2、根据指定文件改变文件的群组属性</span><span class="token function">chgrp</span> <span class="token parameter variable">--regerence</span><span class="token operator">=</span>log2012.log log2013.log<span class="token comment"># 输出</span>$ ll$ <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> ---xrw-r-- <span class="token number">1</span> root bin  <span class="token number">302108</span> <span class="token number">11</span>-13 06:03 log2012.log$ <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> -rw-r--r-- <span class="token number">1</span> root root     <span class="token number">61</span> <span class="token number">11</span>-13 06:03 log2013.log$ <span class="token function">chgrp</span> <span class="token parameter variable">--reference</span><span class="token operator">=</span>log2012.log log2013.log$ ll$ <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> ---xrw-r-- <span class="token number">1</span> root bin  <span class="token number">302108</span> <span class="token number">11</span>-13 06:03 log2012.log$ <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> -rw-r--r-- <span class="token number">1</span> root bin      <span class="token number">61</span> <span class="token number">11</span>-13 06:03 log2013.log<span class="token comment"># 说明：改变文件log2013.log的群组属性，使得文件log2013.log的群组属性和参考文件log2012.log的群组属性相同。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Command </category>
          
          <category> 文件管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Command </tag>
            
            <tag> 文件管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>chattr</title>
      <link href="/2023/12/02/linux/command/1-wen-jian-guan-li/chattr/"/>
      <url>/2023/12/02/linux/command/1-wen-jian-guan-li/chattr/</url>
      
        <content type="html"><![CDATA[<h1 id="chattr"><a href="#chattr" class="headerlink" title="chattr"></a>chattr</h1><p>Linux chattr命令用于改变文件属性。这项指令可改变存放在ext2文件系统上的文件或目录属性，这些属性共有以下8种模式：</p><ol><li>a: 让文件或目录仅供附加用途。</li><li>b: 不更新文件或目录的最后存取时间。</li><li>c: 将文件或目录压缩后存放。</li><li>d: 将文件或目录排除在倾倒操作之外。</li><li>i: 不得任意改动文件或目录。</li><li>s: 保密性删除文件或目录。</li><li>S: 即时更新文件或目录。</li><li>u: 预防以外删除。</li></ol><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">chattr <span class="token punctuation">[</span>-RV<span class="token punctuation">]</span><span class="token punctuation">[</span>-v<span class="token operator">&lt;</span>版本号<span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token punctuation">[</span>+/-/<span class="token operator">=</span><span class="token operator">&lt;</span>属性<span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token punctuation">[</span>文件或目录<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><ul><li>-R: 递归处理，将指定目录下的所有文件及子目录一并处理。</li><li>-v&lt;版本编号&gt;: 设置文件或目录版本。</li><li>-V: 显示指令执行过程。</li><li>+&lt;属性&gt;: 开启文件或目录的该项属性。</li><li>-&lt;属性&gt;: 关闭文件或目录的该项属性。</li><li>=&lt;属性&gt;: 指定文件或目录的该项属性。</li></ul><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 用chattr命令防止系统中某个关键文件被修改 </span>$ chattr +i /var/log/auditweb/auditweb.log-20230828$ lsattr /var/log/auditweb/auditweb.log-20230828<span class="token comment"># 会显示如下属性</span>$ <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> ----i---------e----- auditweb.log-20230828<span class="token comment"># 让某个文件只能往里面追加数据，但不能删除，适用于各种日志文件：</span>$ chattr +a /var/log/message<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Command </category>
          
          <category> 文件管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Command </tag>
            
            <tag> 文件管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cat</title>
      <link href="/2023/12/01/linux/command/1-wen-jian-guan-li/cat/"/>
      <url>/2023/12/01/linux/command/1-wen-jian-guan-li/cat/</url>
      
        <content type="html"><![CDATA[<h1 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h1><p>cat（英文全拼：concatenate）命令用于连接文件并打印到标准输出设备上。</p><h2 id="使用权限"><a href="#使用权限" class="headerlink" title="使用权限"></a>使用权限</h2><p>所有使用者</p><h2 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> <span class="token punctuation">[</span>-AbeEnstTuv<span class="token punctuation">]</span> <span class="token punctuation">[</span>--help<span class="token punctuation">]</span> <span class="token punctuation">[</span>--version<span class="token punctuation">]</span> fileName<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="参数说明："><a href="#参数说明：" class="headerlink" title="参数说明："></a>参数说明：</h3><ul><li>-n 或 –number：由1开始对所有输出的行数编号。</li><li>-b 或 –number-nonblank：和 <code>-n</code> 相似，只不过对于空白行不编号。</li><li>-s 或 –squeeze-blank：当遇到有连续两行以上的空白行，就换为一行的空白行。</li><li>-v 或 –show-nonprinting：使用 <code>^</code>和 <code>M-</code> 符号，除了 <code>LFD</code> 和 <code>TAB</code> 之外。</li><li>-E 或 –show-ends：在每行结束处显示 <code>$</code> 。</li><li>-T 或 –show-tabs：将 <code>TAB</code> 字符显示为 <code>^I</code> 。</li><li>-A 或 –show-all：等价于 <code>-vET</code> 。</li><li>-e ：等价于 <code>-vE</code> 选项。</li><li>-t ：等价于 <code>-vT</code> 选项。</li></ul><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>把textfile的文档内容加上行号后输入到 filetext 文档里：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> <span class="token parameter variable">-n</span> textfile <span class="token operator">&gt;</span> filetext<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将textfile和filetext的文档内容加上行号（空白行不加）之后将内容附加到text文件中：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> <span class="token parameter variable">-b</span> textfile filetext <span class="token operator">&gt;</span> text<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>清空 /etc/text.txt 文件内容：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> /dev/null <span class="token operator">&gt;</span> /etc/text.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>cat也可以用来制作镜像文件。例如要制作软盘的镜像文件，将软盘放好后输入：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> /dev/fd0 <span class="token operator">&gt;</span> OUTFILE<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>相反，如果想把image file写道软盘，输入：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> IMG_FILE <span class="token operator">&gt;</span> /dev/fd0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="注："><a href="#注：" class="headerlink" title="注："></a>注：</h3><ul><li>1、OUTFILE指输出的镜像文件名。</li><li>2、IMG_FILE指镜像文件名。</li><li>3、若从镜像文件写会device时，device容量需与镜像相当。</li><li>4、通常用制作开机磁片。</li></ul><h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><p>dev/null：在类Unix系统中，/dev/null称空设备，是一个特殊的设备文件，它丢弃一切写入其中的数据(但报告写入操作成功)，读取它则会立即得到一个EOF。</p><p>使用 <code>cat $filename &gt; /dev/null</code> 则不会得到任何信息，因为我们将本来通过标准输出显示的文件信息重定向到了 <code>/dev/null</code> 中。</p><p>使用 <code>cat $filename 1 &gt; /dev/null </code> 也会得到同样的效果，因为默认重定向的1 就是标准输出。如果你对 shell 脚本或者重定向比较熟悉的话，应该会联想到2，也即标准错误输出。</p><p>如果我们不想看到错误输出呢？我们可以禁止标准错误 <code>cat $badname 2 &gt; /dev/null</code> 。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Command </category>
          
          <category> 文件管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Command </tag>
            
            <tag> 文件管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AWK</title>
      <link href="/2023/11/30/linux/command/1-wen-jian-guan-li/awk/"/>
      <url>/2023/11/30/linux/command/1-wen-jian-guan-li/awk/</url>
      
        <content type="html"><![CDATA[<h1 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>AWK是一种处理文本文件的语言，是一个强大的文本分析工具。之所以叫 AWK 是因为其取了三位创始人 Alfred Aho，Peter Weinberger, 和 Brian Kernighan 的 Family Name 的首字符。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">awk</span> <span class="token punctuation">[</span>选项参数<span class="token punctuation">]</span> <span class="token string">'script'</span> <span class="token assign-left variable">var</span><span class="token operator">=</span>value file<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">awk</span> <span class="token punctuation">[</span>选项参数<span class="token punctuation">]</span> <span class="token parameter variable">-f</span> scriptfile <span class="token assign-left variable">var</span><span class="token operator">=</span>value file<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="选项参数"><a href="#选项参数" class="headerlink" title="选项参数"></a>选项参数</h3><ul><li><p>-F fs or –field-separator fs</p><p>指定输入文件折分隔符，fs是一个字符串或者是一个正则表达式。</p></li><li><p>-v var=value or -asign var=value</p><p>赋值一个用户定义变量</p></li><li><p>-f scriptfile or –file seriptfile</p><p>从脚本文件中读取awk命令</p></li><li><p>-mf nnn and -mr nnn</p><p>对nnn值设置内在限制，-mf选项限制分配给nnn的最大块数目；-mr选项限制记录的最大数目。这两个功能是Bell实验室版awk的扩展功能，在标准awk中不适用。</p></li><li><p>-W compact or –compat, -W traditional or –traditional</p><p>在兼容模式下运行awk。所以gawk的行为和标准的awk完全一样，所有的awk扩展都被忽略。</p></li><li><p>-W copyleft or –copyleft, -W copyright or –copyright</p><p>打印简短的版权信息。</p></li><li><p>-W help or –help, -W usage or -usage</p><p>打印全部awk选项和每一个选项的简短说明。</p></li><li><p>-W lint or –lint</p><p>打印不能向传统unix平台移植的结构的警告。</p></li><li><p>-W lint-old or –lint-old</p><p>打印关于怒能向传统unix平台移植的结构的警告。</p></li><li><p>-W posix</p><p>打开兼容模式。但有以下限制，不识别：/x、函数关键字、func、换码序列以及当fs是一个空格时，将新行作为一个域分隔符；操作符 <code>**和**</code> <code>=</code> 不能替代 <code>^和^</code> <code>=</code> ；flush无效。</p></li><li><p>-W re-interval or –re-inerval</p><p>允许间隔正则表达式的使用，参考（grep中的posix字符类）。</p></li><li><p>-W source program-text or –source program-text</p><p>使用program-text作为源代码，可与-f命令混用。</p></li><li><p>-W version or –version</p><p>打印bug报告信息的版本。</p></li></ul><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>testfile文件内容如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> testfile<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">2</span> this is a <span class="token builtin class-name">test</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">3</span> Are you like <span class="token function">awk</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> This's a <span class="token builtin class-name">test</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">10</span> There are orange,apple,mongo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="用法一："><a href="#用法一：" class="headerlink" title="用法一："></a>用法一：</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">awk</span> <span class="token string">'{[pattern] action}'</span> <span class="token punctuation">{</span>filenames<span class="token punctuation">}</span>  <span class="token comment"># 行匹配语句 awk ''只能用单引号</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 每行按空格或TAB分隔，输出文本中的1、4项</span>$ <span class="token function">awk</span> <span class="token string">'{print $1,$4}'</span> testfile<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">2</span> a<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">3</span> like<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> This<span class="token string">'s &gt;&gt;&gt; 10 orange,apple,mongo# ---------------------------------------------# 格式化输出$ awk '</span><span class="token punctuation">{</span>printf <span class="token string">"%-8s %-10s<span class="token entity" title="\n">\n</span>"</span>, <span class="token variable">$1</span>, <span class="token variable">$4</span><span class="token punctuation">}</span><span class="token string">' testfile&gt;&gt;&gt; 2        a         &gt;&gt;&gt; 3        like      &gt;&gt;&gt; This'</span>s             <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">10</span>       orange,apple,mongo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="用法二："><a href="#用法二：" class="headerlink" title="用法二："></a>用法二：</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">awk</span> <span class="token parameter variable">-F</span>  <span class="token comment"># -F相当于内置变量FS，指定分割字符</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="实例：-1"><a href="#实例：-1" class="headerlink" title="实例："></a>实例：</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 使用","分隔</span>$ <span class="token function">awk</span> -F, <span class="token string">'{print $1,$2}'</span> testfile<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">2</span> this is a <span class="token builtin class-name">test</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">3</span> Are you like <span class="token function">awk</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> This<span class="token string">'s a test &gt;&gt;&gt; 10 There are orange apple# ---------------------------------------------# 或者使用内建变量$ awk '</span>BEGIN<span class="token punctuation">{</span>FS<span class="token operator">=</span><span class="token string">","</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>print <span class="token variable">$1</span>,<span class="token variable">$2</span><span class="token punctuation">}</span><span class="token string">' testfile&gt;&gt;&gt; 2 this is a test &gt;&gt;&gt; 3 Are you like awk &gt;&gt;&gt; This'</span>s a <span class="token builtin class-name">test</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">10</span> There are orange apple<span class="token comment"># ---------------------------------------------</span><span class="token comment"># 使用多个分隔符，先使用空格分隔，然后对分隔结果再使用","分隔</span>$ <span class="token function">awk</span> <span class="token parameter variable">-F</span> <span class="token string">'[ ,]'</span> <span class="token string">'{print $1,$2,$5}'</span> testfile<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">2</span> this <span class="token builtin class-name">test</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">3</span> Are <span class="token function">awk</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> This's a <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">10</span> There apple<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="用法三："><a href="#用法三：" class="headerlink" title="用法三："></a>用法三：</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">awk</span> <span class="token parameter variable">-v</span>  <span class="token comment"># 设置变量</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="实例：-2"><a href="#实例：-2" class="headerlink" title="实例："></a>实例：</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">awk</span> <span class="token parameter variable">-va</span><span class="token operator">=</span><span class="token number">1</span> <span class="token string">'{print $1, $1+a}'</span> testfile<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token number">3</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">3</span> <span class="token number">4</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> This<span class="token string">'s 1&gt;&gt;&gt; 10 11# ---------------------------------------------$ awk -va=1 -vb=s '</span><span class="token punctuation">{</span>print <span class="token variable">$1</span>, <span class="token variable">$1</span>+a, <span class="token variable">$1b</span><span class="token punctuation">}</span><span class="token string">' testfile&gt;&gt;&gt; 2 3 2s&gt;&gt;&gt; 3 4 3s&gt;&gt;&gt; This'</span>s <span class="token number">1</span> This'ss<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">10</span> <span class="token number">11</span> 10s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="用法四："><a href="#用法四：" class="headerlink" title="用法四："></a>用法四：</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">awk</span> <span class="token parameter variable">-f</span> <span class="token punctuation">{</span>awk脚本<span class="token punctuation">}</span> <span class="token punctuation">{</span>文件名<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="实例：-3"><a href="#实例：-3" class="headerlink" title="实例："></a>实例：</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">awk</span> <span class="token parameter variable">-f</span> cal.awk testfile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>= += -= *= /= %= ^= **=</td><td>赋值</td></tr><tr><td>?:</td><td>C条件表达式</td></tr><tr><td>||</td><td>逻辑或</td></tr><tr><td>&amp;&amp;</td><td>逻辑与</td></tr><tr><td>~ 和 !~</td><td>匹配正则表达式和不匹配正则表达式</td></tr><tr><td>&lt; &lt;= &gt; &gt;= != ==</td><td>关系运算符</td></tr><tr><td>空格</td><td>连接</td></tr><tr><td>+ -</td><td>加、减</td></tr><tr><td>* / %</td><td>乘、除与求余</td></tr><tr><td>+ - !</td><td>一元加，减和逻辑非</td></tr><tr><td>^ ***</td><td>求幂</td></tr><tr><td>++ –</td><td>增加或减少，作为前缀或后缀</td></tr><tr><td>$</td><td>字段引用</td></tr><tr><td>in</td><td>数组成员</td></tr></tbody></table><p>过滤第一列大于2的行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">awk</span> <span class="token string">'$1&gt;2'</span> testfile<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">3</span> Are you like <span class="token function">awk</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> This's a <span class="token builtin class-name">test</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">10</span> There are orange,apple,mongo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>过滤第一列等于2的行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">awk</span> <span class="token string">'$1==2 {print $1,$3}'</span> testfile<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">2</span> is<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>过滤第一列大于2并且第二列等于’Are’的行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">awk</span> <span class="token string">'$1&gt;2 &amp;&amp; $2=="Are" {print $1, $2, $3}'</span> testfile<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">3</span> Are you<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="内建变量"><a href="#内建变量" class="headerlink" title="内建变量"></a>内建变量</h3><table><thead><tr><th>变量</th><th>描述</th></tr></thead><tbody><tr><td>$n</td><td>当前记录的第n个字段，字段间由FS分隔</td></tr><tr><td>$0</td><td>完整的输入记录</td></tr><tr><td>ARGC</td><td>命令行参数的数目</td></tr><tr><td>ARGIND</td><td>命令行中当前文件的位置（从0开始算）</td></tr><tr><td>ARGV</td><td>包含命令行参数的数组</td></tr><tr><td>CONVFMT</td><td>数字转换格式（默认值为%.6g）ENVIRON环境变量关联数组</td></tr><tr><td>ERRNO</td><td>最后一个系统错误描述</td></tr><tr><td>FIELDWIDTHS</td><td>字段宽度列表(用空格键分隔)</td></tr><tr><td>FILENAME</td><td>当前文件名</td></tr><tr><td>FNR</td><td>各文件分别计数的行号</td></tr><tr><td>FS</td><td>字段分隔符(默认是任何空格)</td></tr><tr><td>IGNORECASE</td><td>如果为真，则进行忽略大小写的匹配</td></tr><tr><td>NF</td><td>一条记录的字段的数目</td></tr><tr><td>NR</td><td>已经读出的记录数，就是行号，从1开始</td></tr><tr><td>OFMT</td><td>数字的输出格式(默认值是%.6g)</td></tr><tr><td>OFS</td><td>输出字段分隔符，默认值与输入字段分隔符一致。</td></tr><tr><td>ORS</td><td>输出记录分隔符(默认值是一个换行符)</td></tr><tr><td>RLENGTH</td><td>由match函数所匹配的字符串的长度</td></tr><tr><td>RS</td><td>记录分隔符(默认是一个换行符)</td></tr><tr><td>RSTART</td><td>由match函数所匹配的字符串的第一个位置</td></tr><tr><td>SUBSEP</td><td>数组下标分隔符(默认值是/034)</td></tr></tbody></table><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">awk</span> <span class="token string">'BEGIN{printf "%4s %4s %4s %4s %4s %4s %4s %4s %4s\n","FILENAME","ARGC","FNR","FS","NF","NR","OFS","ORS","RS";printf "---------------------------------------------\n"} {printf "%4s %4s %4s %4s %4s %4s %4s %4s %4s\n",FILENAME,ARGC,FNR,FS,NF,NR,OFS,ORS,RS}'</span>  testfile<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> FILENAME ARGC  FNR   FS   NF   NR  OFS  ORS   RS<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> ---------------------------------------------<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> testfile    <span class="token number">2</span>    <span class="token number">1</span>         <span class="token number">5</span>    <span class="token number">1</span>         <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> testfile    <span class="token number">2</span>    <span class="token number">2</span>         <span class="token number">5</span>    <span class="token number">2</span>         <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> testfile    <span class="token number">2</span>    <span class="token number">3</span>         <span class="token number">3</span>    <span class="token number">3</span>         <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> testfile    <span class="token number">2</span>    <span class="token number">4</span>         <span class="token number">4</span>    <span class="token number">4</span>      <span class="token comment"># ------------------------------------------------</span><span class="token function">awk</span> -F<span class="token punctuation">\</span>' <span class="token string">'BEGIN{printf "%4s %4s %4s %4s %4s %4s %4s %4s %4s\n","FILENAME","ARGC","FNR","FS","NF","NR","OFS","ORS","RS";printf "---------------------------------------------\n"} {printf "%4s %4s %4s %4s %4s %4s %4s %4s %4s\n",FILENAME,ARGC,FNR,FS,NF,NR,OFS,ORS,RS}'</span> testfile<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> FILENAME ARGC  FNR   FS   NF   NR  OFS  ORS   RS<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> -----------------------------------------------<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> testfile    <span class="token number">2</span>    <span class="token number">1</span>    <span class="token string">'    1    1         &gt;&gt;&gt; testfile    2    2    '</span>    <span class="token number">1</span>    <span class="token number">2</span>         <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> testfile    <span class="token number">2</span>    <span class="token number">3</span>    <span class="token string">'    2    3         &gt;&gt;&gt; testfile    2    4    '</span>    <span class="token number">1</span>    <span class="token number">4</span>  <span class="token comment"># --------------------------------------------------</span><span class="token comment"># 输出顺序号 NR，匹配文本行号</span><span class="token function">awk</span> <span class="token string">'{print NR,FNR,$1,$2,$3}'</span> testfile<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">2</span> this is<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">3</span> Are you<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">3</span> <span class="token number">3</span> This<span class="token string">'s a test&gt;&gt;&gt; 4 4 10 There are# ---------------------------------------------------awk '</span><span class="token punctuation">{</span>print <span class="token variable">$1</span>,<span class="token variable">$2</span>,<span class="token variable">$5</span><span class="token punctuation">}</span><span class="token string">' OFS=" $ "&gt;&gt;&gt; 2 $ this $ test&gt;&gt;&gt; 3 $ Are $ awk&gt;&gt;&gt; This'</span>s $ a $ <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">10</span> $ There $ <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用正则，字符串匹配"><a href="#使用正则，字符串匹配" class="headerlink" title="使用正则，字符串匹配"></a>使用正则，字符串匹配</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#输出第二列包含 'th'，并打印第二列与第四列</span><span class="token function">awk</span> <span class="token string">'$2 ~ /th/ {print $2,$4}'</span> testfile<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> this a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>~</code> 表示模式开始。<code>//</code> 中是模式。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 输出包含're'的行</span><span class="token function">awk</span> <span class="token string">'/re/ '</span> testfile<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">3</span> Are you like <span class="token function">awk</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">10</span> There are orange,apple,mongo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="忽略大小写"><a href="#忽略大小写" class="headerlink" title="忽略大小写"></a>忽略大小写</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">awk</span> <span class="token string">'BEGIN{IGNORECASE=1} /this/'</span> testfile<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">2</span> this is a <span class="token builtin class-name">test</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> This's a <span class="token builtin class-name">test</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="模式取反"><a href="#模式取反" class="headerlink" title="模式取反"></a>模式取反</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">awk</span> <span class="token string">'$2 !~ /th/ {print $2,$4}'</span> testfile<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Are like<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> There orange,apple,mongo<span class="token comment"># ------------------------------------------</span><span class="token function">awk</span> <span class="token string">'!/th/ {print $2,$4}'</span> testfile<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Are like<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> There orange,apple,mongo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="awk脚本"><a href="#awk脚本" class="headerlink" title="awk脚本"></a>awk脚本</h2><p>关于awk脚本，我们需要注意两个关键词BEGIN和END。</p><ul><li>BEGIN {这里面放的是执行前的语句}</li><li>END {这里面放的是处理完所有的行后要执行的语句}</li><li>{这里面放到是处理每一行时要执行的语句}</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 举例文件</span><span class="token function">cat</span> testfile<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Marry   <span class="token number">2143</span> <span class="token number">78</span> <span class="token number">84</span> <span class="token number">77</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Jack    <span class="token number">2321</span> <span class="token number">66</span> <span class="token number">78</span> <span class="token number">45</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Tom     <span class="token number">2122</span> <span class="token number">48</span> <span class="token number">77</span> <span class="token number">71</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Mike    <span class="token number">2537</span> <span class="token number">87</span> <span class="token number">97</span> <span class="token number">95</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Bob     <span class="token number">2415</span> <span class="token number">40</span> <span class="token number">57</span> <span class="token number">62</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>脚本如下 (cal.awk)：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/awk -f</span><span class="token comment"># 运行前</span>BEGIN <span class="token punctuation">{</span>math <span class="token operator">=</span> <span class="token number">0</span>english <span class="token operator">=</span> <span class="token number">0</span>computer <span class="token operator">=</span> <span class="token number">0</span><span class="token builtin class-name">printf</span> <span class="token string">"NAME NO. MATH ENGLISH COMPUTER TOTAL<span class="token entity" title="\n">\n</span>"</span><span class="token builtin class-name">printf</span> <span class="token string">"------------------------------------<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">}</span><span class="token comment"># 运行中</span><span class="token punctuation">{</span><span class="token assign-left variable">math</span><span class="token operator">+=</span><span class="token variable">$3</span><span class="token assign-left variable">english</span><span class="token operator">+=</span><span class="token variable">$4</span><span class="token assign-left variable">computer</span><span class="token operator">+=</span><span class="token variable">$5</span><span class="token builtin class-name">printf</span><span class="token string">"%-6s %-6s %4d %8d %8d %8d<span class="token entity" title="\n">\n</span>"</span>, <span class="token variable">$1</span>, <span class="token variable">$2</span>, <span class="token variable">$3</span>, <span class="token variable">$4</span>, <span class="token variable">$5</span>, <span class="token variable">$3</span>+<span class="token variable">$4</span>+<span class="token variable">$5</span><span class="token punctuation">}</span><span class="token comment"># 运行后</span>END <span class="token punctuation">{</span><span class="token builtin class-name">printf</span> <span class="token string">"------------------------------------<span class="token entity" title="\n">\n</span>"</span><span class="token builtin class-name">printf</span> <span class="token string">"  TOTAL:%10d %8d %8d<span class="token entity" title="\n">\n</span>"</span>, math, english, computer<span class="token builtin class-name">printf</span> <span class="token string">"AVERAGE:%10.2f %8.2f %8.2f<span class="token entity" title="\n">\n</span>"</span>, math/NR, english/NR, computer/NR<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">awk</span> <span class="token parameter variable">-f</span> cal.awk testfile <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> NAME NO. MATH ENGLISH COMPUTER TOTAL<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> ------------------------------------<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Marry  <span class="token number">2143</span>     <span class="token number">78</span>       <span class="token number">84</span>       <span class="token number">77</span>      <span class="token number">239</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Jack   <span class="token number">2321</span>     <span class="token number">66</span>       <span class="token number">78</span>       <span class="token number">45</span>      <span class="token number">189</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Tom    <span class="token number">2122</span>     <span class="token number">48</span>       <span class="token number">77</span>       <span class="token number">71</span>      <span class="token number">196</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Mike   <span class="token number">2537</span>     <span class="token number">87</span>       <span class="token number">97</span>       <span class="token number">95</span>      <span class="token number">279</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Bob    <span class="token number">2415</span>     <span class="token number">40</span>       <span class="token number">57</span>       <span class="token number">62</span>      <span class="token number">159</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> ------------------------------------<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>   TOTAL:       <span class="token number">319</span>      <span class="token number">393</span>      <span class="token number">350</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> AVERAGE:     <span class="token number">63.80</span>    <span class="token number">78.60</span>    <span class="token number">70.00</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="另外一些实例"><a href="#另外一些实例" class="headerlink" title="另外一些实例"></a>另外一些实例</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># awk的 'hello world' 程序为</span>BEGIN <span class="token punctuation">{</span> print <span class="token string">"Hello World!"</span><span class="token punctuation">}</span><span class="token comment"># 计算文件大小</span>$ <span class="token function">ls</span> <span class="token parameter variable">-l</span> <span class="token string">"文件名"</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{sum+=$5} END {print sum}'</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">110</span><span class="token comment"># 从文件中找出长度大于80的行</span>$ <span class="token function">awk</span> <span class="token string">'length&gt;80'</span> testfile<span class="token comment"># 打印九九乘法表</span>$ <span class="token function">seq</span> <span class="token number">9</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'H;g'</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token parameter variable">-v</span> <span class="token assign-left variable">RS</span><span class="token operator">=</span><span class="token string">''</span> <span class="token string">'{for(i=1;i&lt;=NF;i++)printf("%dx%d=%d%s", i, NR, i*NR, i==NR?"\n":"\t")}'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><p><strong>awk、sed、grep更适合的方向：</strong></p><ul><li>grep 更适合单纯的查找或匹配文本</li><li>sed 更适合编辑匹配到的文本</li><li>awk 更适合格式化文本，对文本进行较复杂格式处理</li></ul><p>关于awk内建变量个人见解，简单易懂</p><p>解释一下变量：</p><p>变量：分为内置变量和自定义变量;输入分隔符FS和输出分隔符OFS都属于内置变量。</p><p>内置变量就是awk预定义好的、内置在awk内部的变量，而自定义变量就是用户定义的变量。</p><ul><li>FS(Field Separator)：输入字段分隔符， 默认为空白字符</li><li>OFS(Out of Field Separator)：输出字段分隔符， 默认为空白字符</li><li>RS(Record Separator)：输入记录分隔符(输入换行符)， 指定输入时的换行符</li><li>ORS(Output Record Separate)：输出记录分隔符（输出换行符），输出时用指定符号代替换行符</li><li>NF(Number for Field)：当前行的字段的个数(即当前行被分割成了几列)</li><li>NR(Number of Record)：行号，当前处理的文本行的行号。</li><li>FNR：各文件分别计数的行号</li><li>ARGC：命令行参数的个数</li><li>ARGV：数组，保存的是命令行所给定的各参数</li></ul><p><strong>自定义变量的方法</strong></p><ul><li>方法一：-v varname=value ，变量名区分字符大小写。</li><li>方法二：在program中直接定义。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Command </category>
          
          <category> 文件管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Command </tag>
            
            <tag> 文件管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask-12：操作Session</title>
      <link href="/2023/11/29/python/flask/flask-12-cao-zuo-session/"/>
      <url>/2023/11/29/python/flask/flask-12-cao-zuo-session/</url>
      
        <content type="html"><![CDATA[<h1 id="Flask-12：操作Session"><a href="#Flask-12：操作Session" class="headerlink" title="Flask-12：操作Session"></a>Flask-12：操作Session</h1><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>session详解：<a href="https://www.cnblogs.com/poloyy/p/12513247.html">Session</a></p><p>这一节来瞧一瞧如何用Flask操作Session</p><h2 id="二、功能list"><a href="#二、功能list" class="headerlink" title="二、功能list"></a>二、功能list</h2><p>提供操作Session的4项功能</p><table><thead><tr><th>页面路径</th><th>功能</th></tr></thead><tbody><tr><td>/set</td><td>在Session中存储一个名称为’user’、值为’Tom’的变量</td></tr><tr><td>/get</td><td>获取Session中名称为’user’的变量</td></tr><tr><td>/del</td><td>删除Session中名称为’user’的变量</td></tr><tr><td>/clear</td><td>清除Session中所有的变量</td></tr></tbody></table><h2 id="三、项目构成"><a href="#三、项目构成" class="headerlink" title="三、项目构成"></a>三、项目构成</h2><p>程序由两个源文件构成</p><table><thead><tr><th>源文件</th><th>描述</th></tr></thead><tbody><tr><td>app.py</td><td>Flask后端程序，提供操作Session的接口</td></tr><tr><td>templates/query.html</td><td>查询Session中名称为’user’和’pwd’的变量，并返回给客户端</td></tr></tbody></table><h2 id="四、模板文件"><a href="#四、模板文件" class="headerlink" title="四、模板文件"></a>四、模板文件</h2><p>用户的数据存储在 Session 中，服务端程序使用页面模板 query.html 展示 Session 中的数据</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>显示 session 中的变量<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>显示 session 中的变量<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>session.get('user') = {{ user }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>session.get('pwd') = {{ pwd }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、app-py代码"><a href="#五、app-py代码" class="headerlink" title="五、app.py代码"></a>五、app.py代码</h2><h3 id="1、引入模块"><a href="#1、引入模块" class="headerlink" title="1、引入模块"></a>1、引入模块</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> render_template<span class="token punctuation">,</span> session<span class="token keyword">import</span> osapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SECRET_KEY'</span><span class="token punctuation">]</span> <span class="token operator">=</span> os<span class="token punctuation">.</span>urandom<span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Flask 有个配置属性叫 SECRET_KEY</li><li>SECRET_KEY 是一个密钥，Flask 以及相关的扩展 extension 需要进行加密时需要使用这个密钥</li><li>使用 Session 存储数据时，Flask 在内部需要进行加密处理，所以要配置这个 KEY</li><li>这边用 Python 的 os.random() 生成一个包含 24 个字符的随机字符串</li></ul><h3 id="2、设置Session"><a href="#2、设置Session" class="headerlink" title="2、设置Session"></a>2、设置Session</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">"/set/"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">set_session</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    session<span class="token punctuation">[</span><span class="token string">"user"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"poloyy"</span>    session<span class="token punctuation">[</span><span class="token string">"pwd"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"password"</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'query.html'</span><span class="token punctuation">,</span> user<span class="token operator">=</span>session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pwd<span class="token operator">=</span>session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"pwd"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、获取Session"><a href="#3、获取Session" class="headerlink" title="3、获取Session"></a>3、获取Session</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4、删除Session"><a href="#4、删除Session" class="headerlink" title="4、删除Session"></a>4、删除Session</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">"/del"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">del_session</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    session<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'query.html'</span><span class="token punctuation">,</span> user<span class="token operator">=</span>session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pwd<span class="token operator">=</span>session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"pwd"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、清空Session全部变量"><a href="#5、清空Session全部变量" class="headerlink" title="5、清空Session全部变量"></a>5、清空Session全部变量</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">"/clear"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">clear_session</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    session<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'query.html'</span><span class="token punctuation">,</span> user<span class="token operator">=</span>session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pwd<span class="token operator">=</span>session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"pwd"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6、浏览器运行结果"><a href="#6、浏览器运行结果" class="headerlink" title="6、浏览器运行结果"></a>6、浏览器运行结果</h3><h4 id="设置session"><a href="#设置session" class="headerlink" title="设置session"></a>设置session</h4><img src="/2023/11/29/python/flask/flask-12-cao-zuo-session/0.png" class=""><h4 id="获取session"><a href="#获取session" class="headerlink" title="获取session"></a>获取session</h4><img src="/2023/11/29/python/flask/flask-12-cao-zuo-session/1.png" class=""><h4 id="删除session"><a href="#删除session" class="headerlink" title="删除session"></a>删除session</h4><img src="/2023/11/29/python/flask/flask-12-cao-zuo-session/2.png" class=""><h4 id="清空session"><a href="#清空session" class="headerlink" title="清空session"></a>清空session</h4><img src="/2023/11/29/python/flask/flask-12-cao-zuo-session/3.png" class="">]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask-11：操作Cookie</title>
      <link href="/2023/11/28/python/flask/flask-11-cao-zuo-cookie/"/>
      <url>/2023/11/28/python/flask/flask-11-cao-zuo-cookie/</url>
      
        <content type="html"><![CDATA[<h1 id="Flask-11：操作Cookie"><a href="#Flask-11：操作Cookie" class="headerlink" title="Flask-11：操作Cookie"></a>Flask-11：操作Cookie</h1><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>Cookie详解：<a href="https://www.cnblogs.com/poloyy/p/12513247.html">https://www.cnblogs.com/poloyy/p/12513247.html</a></p><p>现在来瞧瞧如何用Flask操作Cookie，接下来就是实战栗子！！！</p><h2 id="二、功能list"><a href="#二、功能list" class="headerlink" title="二、功能list"></a>二、功能list</h2><p>提供操作Cookie的3项功能</p><table><thead><tr><th>页面路径</th><th>功能</th></tr></thead><tbody><tr><td>/set_cookie</td><td>设置一个名为poloyy、值为<a href="https://www.cnblogs.com/poloyy%E7%9A%84Cookie">https://www.cnblogs.com/poloyy的Cookie</a></td></tr><tr><td>/get_cookie</td><td>在服务端获取名称为’poloyy’的Cookie，并将其值返回给客户</td></tr><tr><td>/del_cookie</td><td>删除名称为’poloyy’的Cookie</td></tr></tbody></table><h2 id="三、项目构成"><a href="#三、项目构成" class="headerlink" title="三、项目构成"></a>三、项目构成</h2><p>程序有3个源文件构成</p><table><thead><tr><th>源文件</th><th>描述</th></tr></thead><tbody><tr><td>app.py</td><td>Flask后端程序，提供操作Cookie的接口</td></tr><tr><td>templates/get_cookie.html</td><td>在服务端获取Cookie，显示Cookie的值</td></tr><tr><td>templates/js_cookie.html</td><td>在客户端通过JavaScript显示Cookie的值</td></tr></tbody></table><h2 id="四、模板文件get-cookie-html"><a href="#四、模板文件get-cookie-html" class="headerlink" title="四、模板文件get_cookie.html"></a>四、模板文件get_cookie.html</h2><p>浏览器访问网站时，每次都会把Cookie发送给服务端，在服务端获取Cookie并返回给浏览器</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>在服务端获取 cookie<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>在服务端获取 cookie: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span>{{cookie}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、模板文件js-cookie-html"><a href="#五、模板文件js-cookie-html" class="headerlink" title="五、模板文件js_cookie.html"></a>五、模板文件js_cookie.html</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>在服务端设置 cookie<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>在服务端设置 cookie<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>在客户端通过 Javascript 读取 cookie: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>cookie<span class="token punctuation">'</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    cookie <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'cookie'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cookie<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> document<span class="token punctuation">.</span>cookie<span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>document.cookie 是浏览器端保存的 cookie 值，在 id=cookie 中显示 Cookie 值</p><h2 id="六、app-py代码"><a href="#六、app-py代码" class="headerlink" title="六、app.py代码"></a>六、app.py代码</h2><h3 id="1、引入模块"><a href="#1、引入模块" class="headerlink" title="1、引入模块"></a>1、引入模块</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> request<span class="token punctuation">,</span> Response<span class="token punctuation">,</span> render_templateapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>request 对象详解：<a href="./Flask-7：request对象.md">request</a></p><p>request.cookies 就是获取客户端发送的 Cookie</p><h3 id="2、获取Cookie"><a href="#2、获取Cookie" class="headerlink" title="2、获取Cookie"></a>2、获取Cookie</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">"/get_cookies"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_cookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    cookie <span class="token operator">=</span> request<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'poloyy'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'get_cookie.html'</span><span class="token punctuation">,</span> cookie<span class="token operator">=</span>cookie<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、设置Cookie"><a href="#3、设置Cookie" class="headerlink" title="3、设置Cookie"></a>3、设置Cookie</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">"/set_cookie"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">set_cookie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    html <span class="token operator">=</span> render_template<span class="token punctuation">(</span><span class="token string">"js_cookie.html"</span><span class="token punctuation">)</span>    response <span class="token operator">=</span> Response<span class="token punctuation">(</span>html<span class="token punctuation">)</span>    response<span class="token punctuation">.</span>set_cookie<span class="token punctuation">(</span><span class="token string">"poloyy"</span><span class="token punctuation">,</span> <span class="token string">"https://www.cnblogs.com/poloyy"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> response<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、删除Cookie"><a href="#4、删除Cookie" class="headerlink" title="4、删除Cookie"></a>4、删除Cookie</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">"/del_cookie"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">del_cookie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    html <span class="token operator">=</span> render_template<span class="token punctuation">(</span><span class="token string">"js_cookie.html"</span><span class="token punctuation">)</span>    response <span class="token operator">=</span> Response<span class="token punctuation">(</span>html<span class="token punctuation">)</span>    response<span class="token punctuation">.</span>delete_cookie<span class="token punctuation">(</span><span class="token string">"poloyy"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> response<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、浏览器运行结果"><a href="#5、浏览器运行结果" class="headerlink" title="5、浏览器运行结果"></a>5、浏览器运行结果</h3><h4 id="设置cookie"><a href="#设置cookie" class="headerlink" title="设置cookie"></a>设置cookie</h4><img src="/2023/11/28/python/flask/flask-11-cao-zuo-cookie/0.png" class=""><h4 id="获取cookie"><a href="#获取cookie" class="headerlink" title="获取cookie"></a>获取cookie</h4><img src="/2023/11/28/python/flask/flask-11-cao-zuo-cookie/1.png" class=""><h4 id="删除cookie"><a href="#删除cookie" class="headerlink" title="删除cookie"></a>删除cookie</h4><img src="/2023/11/28/python/flask/flask-11-cao-zuo-cookie/2.png" class=""><h4 id="再次获取cookie"><a href="#再次获取cookie" class="headerlink" title="再次获取cookie"></a>再次获取cookie</h4><img src="/2023/11/28/python/flask/flask-11-cao-zuo-cookie/3.png" class="">]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask-10：标准类视图</title>
      <link href="/2023/11/27/python/flask/flask-10-biao-zhun-lei-shi-tu/"/>
      <url>/2023/11/27/python/flask/flask-10-biao-zhun-lei-shi-tu/</url>
      
        <content type="html"><![CDATA[<h1 id="Flask-10：标准类视图"><a href="#Flask-10：标准类视图" class="headerlink" title="Flask-10：标准类视图"></a>Flask-10：标准类视图</h1><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><ul><li>前面文章讲解Flask路由的时候，都是将URL路径和一个视图函数关联</li><li>当Flask框架接收到请求后，会根据请求URL，调用响应的视图函数进行处理</li><li>Flask不仅提供了视图函数来处理请求，还提供了视图类；可以将URL路径和一个视图类关联</li></ul><h2 id="二、标准视图函数"><a href="#二、标准视图函数" class="headerlink" title="二、标准视图函数"></a>二、标准视图函数</h2><ul><li>将 URL 路径和一个函数关联，这个函数又被称为视图函数，Flask 框架会根据请求的 URL 调用相应的视图函数进行处理</li><li>当访问 127.0.0.1:5000/ 时，index() 函数就会处理该请求，并返回 hello world 字符串</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flaskapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'hello world'</span>app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>debug <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、标准视图类"><a href="#三、标准视图类" class="headerlink" title="三、标准视图类"></a>三、标准视图类</h2><p>Flask.views.View 是 Flask 的标准视图类，用户定义的视图类需要继承于  Flask.views.View 。使用视图类的步骤如下：</p><ol><li>用户定义一个视图类，继承于 Flask.views.View；</li><li>在视图类中定义方法 dispatch_request ，处理请求、返回 HTML 文本给客户端；</li><li>使用 app.add_url_rule (rule, view_func) 将 URL 路径和视图类绑定</li></ol><h3 id="最简单的栗子"><a href="#最简单的栗子" class="headerlink" title="最简单的栗子"></a>最简单的栗子</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> views<span class="token keyword">from</span> flask<span class="token punctuation">.</span>typing <span class="token keyword">import</span> ResponseReturnValueapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token comment"># 自定义视图类，继承 views.View</span><span class="token keyword">class</span> <span class="token class-name">view_test</span><span class="token punctuation">(</span>views<span class="token punctuation">.</span>View<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 返回一个字符串给客户端</span>    <span class="token keyword">def</span> <span class="token function">dispatch_request</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> ResponseReturnValue<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"hello world"</span><span class="token comment"># 将路由规则 / 和视图类 view_test 进行绑定</span>app<span class="token punctuation">.</span>add_url_rule<span class="token punctuation">(</span>rule<span class="token operator">=</span><span class="token string">"/"</span><span class="token punctuation">,</span> view_func<span class="token operator">=</span>view_test<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token string">"view"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">8080</span><span class="token punctuation">,</span> debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="重点as-view"><a href="#重点as-view" class="headerlink" title="重点as_view"></a>重点as_view</h3><ul><li>view_test.as_view(“view”) 代表创建了一个名称为 view 的视图函数</li><li>app.add_url_rule 实际上是将路由规则和视图函数（由视图类的 as_view 方法转换而来）绑定</li></ul><h3 id="访问效果"><a href="#访问效果" class="headerlink" title="访问效果"></a>访问效果</h3><img src="/2023/11/27/python/flask/flask-10-biao-zhun-lei-shi-tu/0.png" class=""><h3 id="as-view函数"><a href="#as-view函数" class="headerlink" title="as_view函数"></a>as_view函数</h3><p>视图类本质是视图函数，函数View.as_view()会返回一个视图函数</p><h3 id="简化版"><a href="#简化版" class="headerlink" title="简化版"></a>简化版</h3><p>为了更清晰理解 as_view 函数的功能，自行实现一个简化版本的 as_view 函数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 将路由规则 / 和视图类 view_test 进行绑定</span>app<span class="token punctuation">.</span>add_url_rule<span class="token punctuation">(</span>rule<span class="token operator">=</span><span class="token string">"/view1"</span><span class="token punctuation">,</span> view_func<span class="token operator">=</span>view_test<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token string">"view"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">view_test2</span><span class="token punctuation">(</span>views<span class="token punctuation">.</span>View<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">dispatch_request</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> ResponseReturnValue<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">"success"</span><span class="token punctuation">,</span> <span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span>    <span class="token decorator annotation punctuation">@staticmethod</span>    <span class="token keyword">def</span> <span class="token function">as_view</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        view <span class="token operator">=</span> view_test2<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> view<span class="token punctuation">.</span>dispatch_request<span class="token comment"># 将路由规则 / 和视图类 view_test 进行绑定</span>app<span class="token punctuation">.</span>add_url_rule<span class="token punctuation">(</span>rule<span class="token operator">=</span><span class="token string">"/view2"</span><span class="token punctuation">,</span> view_func<span class="token operator">=</span>view_test2<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token string">"view"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>定义了一个静态方法 as_view，它首先创建一个实例 view</li><li>然后返回实例 view 的 dispatch_request 方法</li><li>即 view_func 指向了实例 view 的方法 dispatch_request</li><li>当访问页面路径 /view2/ 时，最终会调用 index.dispatch_request ()</li></ol><h2 id="四、继承"><a href="#四、继承" class="headerlink" title="四、继承"></a>四、继承</h2><p>使用类视图的好处是支持继承，可以把一些共性的东西放在父类中，其他子类可以继承</p><h3 id="1、父类BaseView"><a href="#1、父类BaseView" class="headerlink" title="1、父类BaseView"></a>1、父类BaseView</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">BaseView</span><span class="token punctuation">(</span>views<span class="token punctuation">.</span>View<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 如果子类忘记定义 get_template 就会报错</span>    <span class="token keyword">def</span> <span class="token function">get_template</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> NotImplementedError<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 如果子类忘记定义 get_data 就会报错</span>    <span class="token keyword">def</span> <span class="token function">get_data</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> NotImplementedError<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">dispatch_request</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 获取模板需要的数据</span>        data <span class="token operator">=</span> self<span class="token punctuation">.</span>get_data<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 获取模板文件路径</span>        template <span class="token operator">=</span> self<span class="token punctuation">.</span>get_template<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 渲染模板文件</span>        <span class="token keyword">return</span> render_template<span class="token punctuation">(</span>template<span class="token punctuation">,</span> <span class="token operator">**</span>data<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、子类UserView"><a href="#2、子类UserView" class="headerlink" title="2、子类UserView"></a>2、子类UserView</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">UserView</span><span class="token punctuation">(</span>BaseView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">get_template</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"user.html"</span>    <span class="token keyword">def</span> <span class="token function">get_data</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Tom'</span><span class="token punctuation">,</span>            <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token string">'male'</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、app-py-应用主入口"><a href="#3、app-py-应用主入口" class="headerlink" title="3、app.py 应用主入口"></a>3、app.py 应用主入口</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">app<span class="token punctuation">.</span>add_url_rule<span class="token punctuation">(</span><span class="token string">'/user/'</span><span class="token punctuation">,</span> view_func<span class="token operator">=</span>UserView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token string">'UserView'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4、user-html代码"><a href="#4、user-html代码" class="headerlink" title="4、user.html代码"></a>4、user.html代码</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>name = {{ name }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>gender = {{ gender }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、使用装饰器"><a href="#五、使用装饰器" class="headerlink" title="五、使用装饰器"></a>五、使用装饰器</h2><p>在视图函数、视图类中使用装饰器还是一大杀器</p><h3 id="1、检查登录功能"><a href="#1、检查登录功能" class="headerlink" title="1、检查登录功能"></a>1、检查登录功能</h3><p>不使用装饰器前的代码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">check_login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> 用户已经登录：        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/page1'</span><span class="token punctuation">,</span> page1<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">page1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> check_login<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'请先登录'</span>    执行 page1 的功能<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/page2'</span><span class="token punctuation">,</span> page2<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">page2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> check_login<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'请先登录'</span>    执行 page2 的功能<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在处理 /page1 和 /page2 时需要检查登录，在函数 page1 () 和 page2 () 的头部调用 check_login 函数</li><li>这种方法虽然实现了功能，但不够简洁</li></ul><h3 id="2、检查登录的装饰器"><a href="#2、检查登录的装饰器" class="headerlink" title="2、检查登录的装饰器"></a>2、检查登录的装饰器</h3><p>使用装饰器实现登录的功能，定义检查登录的装饰器 check_login</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> request<span class="token keyword">from</span> functools <span class="token keyword">import</span> wraps<span class="token keyword">def</span> <span class="token function">check_login</span><span class="token punctuation">(</span>original_function<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@wraps</span><span class="token punctuation">(</span>original_function<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">decorated_function</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        user <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> user <span class="token keyword">and</span> user <span class="token operator">==</span> <span class="token string">"zhangsan"</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> original_function<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">"请登录"</span>    <span class="token keyword">return</span> decorated_function<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>装饰器 check_login 本质是一个函数</li><li>它的输入是一个函数 original_function</li><li>它的输出也是一个函数 decorated_function</li><li>original_function 是原先的处理 URL 的视图函数,它不包含检查登录的功能逻辑，就是到时候需要添加装饰器的函数</li><li>decorated_function 是在 original_function 的基础上进行功能扩充的函数（这就是装饰器的功能），它首先检查是否已经登录，如果已经登录则调用 original_function，如果没有登录则返回错误</li><li>使用 functools.wraps (original_function) 保留原始函数 original_function 的属性</li></ul><h3 id="3、在视图函数中使用装饰器"><a href="#3、在视图函数中使用装饰器" class="headerlink" title="3、在视图函数中使用装饰器"></a>3、在视图函数中使用装饰器</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">"/page1"</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@check_login</span><span class="token keyword">def</span> <span class="token function">page1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"page1"</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">"/page2"</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@check_login</span><span class="token keyword">def</span> <span class="token function">page2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"page2"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>page1、page2 两个视图函数更关注请求处理，而检查登录的功能交给装饰器去负责</li><li>这样，检查登录的功能与 page1 和 page2 本身的功能是分离的</li></ul><h3 id="4、在视图类中使用装饰器"><a href="#4、在视图类中使用装饰器" class="headerlink" title="4、在视图类中使用装饰器"></a>4、在视图类中使用装饰器</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">check_login</span><span class="token punctuation">(</span>original_function<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@wraps</span><span class="token punctuation">(</span>original_function<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">decorated_function</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        user <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> user <span class="token keyword">and</span> user <span class="token operator">==</span> <span class="token string">'zhangsan'</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> original_function<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'请先登录'</span>    <span class="token keyword">return</span> decorated_function<span class="token keyword">class</span> <span class="token class-name">Page1</span><span class="token punctuation">(</span>views<span class="token punctuation">.</span>View<span class="token punctuation">)</span><span class="token punctuation">:</span>    decorators <span class="token operator">=</span> <span class="token punctuation">[</span>check_login<span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">dispatch_request</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Page1'</span><span class="token keyword">class</span> <span class="token class-name">Page2</span><span class="token punctuation">(</span>views<span class="token punctuation">.</span>View<span class="token punctuation">)</span><span class="token punctuation">:</span>    decorators <span class="token operator">=</span> <span class="token punctuation">[</span>check_login<span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">dispatch_request</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Page2'</span>app<span class="token punctuation">.</span>add_url_rule<span class="token punctuation">(</span>rule<span class="token operator">=</span><span class="token string">'/page1'</span><span class="token punctuation">,</span> view_func<span class="token operator">=</span>Page1<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token string">'Page1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span>add_url_rule<span class="token punctuation">(</span>rule<span class="token operator">=</span><span class="token string">'/page2'</span><span class="token punctuation">,</span> view_func<span class="token operator">=</span>Page2<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token string">'Page2'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>decorators = [check_login] 设定视图类的装饰器</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask-9：蓝图的基本作用</title>
      <link href="/2023/11/26/python/flask/flask-9-lan-tu-de-ji-ben-zuo-yong/"/>
      <url>/2023/11/26/python/flask/flask-9-lan-tu-de-ji-ben-zuo-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="Flask-9：蓝图的基本作用"><a href="#Flask-9：蓝图的基本作用" class="headerlink" title="Flask-9：蓝图的基本作用"></a>Flask-9：蓝图的基本作用</h1><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><ul><li>在前面的例子中，所有的页面处理逻辑都是放在同一个文件中，随着业务代码的增加，将所有代码都放在单个程序文件中是非常不合理的；</li><li>不仅会让阅读代码变的困难，而且会给后期维护带来麻烦；</li><li>Flask中使用蓝图，提供了模块化管理程序路由的功能，使程序结构更加清晰。</li></ul><h2 id="二、蓝图简介"><a href="#二、蓝图简介" class="headerlink" title="二、蓝图简介"></a>二、蓝图简介</h2><ul><li>随着Flask程序越来越复杂，需要对程序进行模块化的处理；</li><li>蓝图（Blueprint）是Flask程序的模块化处理机制；</li><li>它是一个存储视图方法的集合；</li><li>Flask程序通过Blueprint来组织URL以及处理请求。</li></ul><h3 id="Blueprint具有以下属性"><a href="#Blueprint具有以下属性" class="headerlink" title="Blueprint具有以下属性"></a>Blueprint具有以下属性</h3><ul><li>一个项目可以具有多个Blueprint；</li><li>Blueprint可以单独拥有自己的模板、静态文件的目录；</li><li>在应用初始化时，注册需要使用的Blueprint。</li></ul><h2 id="三、基本用法"><a href="#三、基本用法" class="headerlink" title="三、基本用法"></a>三、基本用法</h2><h3 id="1、功能概述"><a href="#1、功能概述" class="headerlink" title="1、功能概述"></a>1、功能概述</h3><p>假设包含以下4个页面：</p><table><thead><tr><th>页面</th><th>功能</th><th>处理函数</th></tr></thead><tbody><tr><td>/news/society/</td><td>社会新闻模块</td><td>society_nows</td></tr><tr><td>/news/tech/</td><td>IT新闻模块</td><td>tech_nows</td></tr><tr><td>/products/car/</td><td>汽车产品模块</td><td>car_products</td></tr><tr><td>/products/baby/</td><td>婴幼儿产品模块</td><td>baby_products</td></tr></tbody></table><ul><li>前两个都是/news前缀，可以组成一个蓝图news。</li><li>后两个都是/products前缀，可以组成一个蓝图products。</li><li>相当于四个视图函数，两个蓝图。</li></ul><p>程序中包含4个视图函数，根据页面路径，Flask将请求转发给对应的视图函数，从浏览器发送过来的请求处理过程如下：</p><img src="/2023/11/26/python/flask/flask-9-lan-tu-de-ji-ben-zuo-yong/0.png" class=""><h3 id="2、使用蓝图后，路由匹配流程"><a href="#2、使用蓝图后，路由匹配流程" class="headerlink" title="2、使用蓝图后，路由匹配流程"></a>2、使用蓝图后，路由匹配流程</h3><ol><li>浏览器访问路径 /products/car ；</li><li>Flask框架在蓝图 news 和蓝图 products 中查找匹配该页面路径的路由；</li><li>发现在蓝图 products 中，存在和路径 /products/car 匹配的视图函数 car_products ；</li><li>最后将请求转发给函数 car_products 处理。</li></ol><h2 id="三、实战小栗子"><a href="#三、实战小栗子" class="headerlink" title="三、实战小栗子"></a>三、实战小栗子</h2><h3 id="1、目录结构"><a href="#1、目录结构" class="headerlink" title="1、目录结构"></a>1、目录结构</h3><p>栗子程序包含2个蓝图，由3个文件构成：</p><ul><li>app.py，程序的主文件；</li><li>news.py，实现蓝图news；</li><li>products.py，实现蓝图products。</li></ul><img src="/2023/11/26/python/flask/flask-9-lan-tu-de-ji-ben-zuo-yong/1.png" class=""><h3 id="2、app-py代码"><a href="#2、app-py代码" class="headerlink" title="2、app.py代码"></a>2、app.py代码</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 导入 Flask 和 蓝图 Blueprint</span><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> Blueprint<span class="token comment"># 导入蓝图类</span><span class="token keyword">from</span> seventhFlask <span class="token keyword">import</span> news<span class="token keyword">from</span> seventhFlask <span class="token keyword">import</span> productsapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token comment"># 注册蓝图</span>app<span class="token punctuation">.</span>register_blueprint<span class="token punctuation">(</span>news<span class="token punctuation">.</span>blueprint<span class="token punctuation">)</span>app<span class="token punctuation">.</span>register_blueprint<span class="token punctuation">(</span>products<span class="token punctuation">.</span>blueprint<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">8080</span><span class="token punctuation">,</span> debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、news-py代码"><a href="#3、news-py代码" class="headerlink" title="3、news.py代码"></a>3、news.py代码</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 导入蓝图</span><span class="token keyword">from</span> flask <span class="token keyword">import</span> Blueprint<span class="token triple-quoted-string string">"""实例化蓝图对象第一个参数：蓝图名称第二个参数：导入蓝图的名称第三个参数：蓝图前缀，该蓝图下的路由规则前缀都需要加上这个"""</span>blueprint <span class="token operator">=</span> Blueprint<span class="token punctuation">(</span><span class="token string">'news'</span><span class="token punctuation">,</span> __name__<span class="token punctuation">,</span> url_prefix<span class="token operator">=</span><span class="token string">"/news"</span><span class="token punctuation">)</span><span class="token comment"># 用蓝图注册路由</span><span class="token decorator annotation punctuation">@blueprint<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">"/society/"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">society_news</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"社会新闻板块"</span><span class="token decorator annotation punctuation">@blueprint<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">"/tech/"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">tech_news</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"新闻板块"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、products-py代码"><a href="#4、products-py代码" class="headerlink" title="4、products.py代码"></a>4、products.py代码</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Blueprintblueprint <span class="token operator">=</span> Blueprint<span class="token punctuation">(</span><span class="token string">"products"</span><span class="token punctuation">,</span> __name__<span class="token punctuation">,</span> url_prefix<span class="token operator">=</span><span class="token string">"/product"</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@blueprint<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">"/car"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">car_products</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"汽车产品版块"</span><span class="token decorator annotation punctuation">@blueprint<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">"/baby"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">baby_products</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"婴儿产品版块"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、请求结果"><a href="#5、请求结果" class="headerlink" title="5、请求结果"></a>5、请求结果</h3><img src="/2023/11/26/python/flask/flask-9-lan-tu-de-ji-ben-zuo-yong/2.png" class=""><h2 id="四、更具扩展性的架构"><a href="#四、更具扩展性的架构" class="headerlink" title="四、更具扩展性的架构"></a>四、更具扩展性的架构</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>随着业务代码的增加，需要为Flask程序提供一个具备扩展性的架构，根据Flask程序的扩展性分为如下三种类型：</p><h4 id="1、所有的页面逻辑放在同一个文件中"><a href="#1、所有的页面逻辑放在同一个文件中" class="headerlink" title="1、所有的页面逻辑放在同一个文件中"></a>1、所有的页面逻辑放在同一个文件中</h4><ul><li>在这种架构中，程序完全不具备扩展性；</li><li>在初学Flask时，使用的栗子都是这种类型。</li></ul><h4 id="2、使用一个独立的Python文件实现蓝图"><a href="#2、使用一个独立的Python文件实现蓝图" class="headerlink" title="2、使用一个独立的Python文件实现蓝图"></a>2、使用一个独立的Python文件实现蓝图</h4><ul><li>在这种架构中，程序具备一定的扩展性<ul><li>程序由主程序和多个蓝图构成；</li><li>每个蓝图对应一个Python文件；</li><li>所有的蓝图共享相同的模板文件目录；</li><li>所有的蓝图共享相同的静态文件目录。</li></ul></li><li>上面的栗子就是采用这种架构</li><li>程序包含两个蓝图：news和products，由3个文件构成：app.py、news.py、products.py，其中news.py实现新闻模块，products.py实现产品模块。</li></ul><h4 id="3、使用一个独立的目录实现蓝图"><a href="#3、使用一个独立的目录实现蓝图" class="headerlink" title="3、使用一个独立的目录实现蓝图"></a>3、使用一个独立的目录实现蓝图</h4><p>这种架构中，程序的扩展性最好：</p><ul><li>程序由主程序和多个蓝图构成；</li><li>每个蓝图对应一个独立的目录，存储与这个蓝图相关的文件；</li><li>每个蓝图有一个独立的模板文件目录；</li><li>每个蓝图有一个独立的静态文件目录。</li></ul><h3 id="1、模板文件寻找规律"><a href="#1、模板文件寻找规律" class="headerlink" title="1、模板文件寻找规律"></a>1、模板文件寻找规律</h3><p>每个蓝图可以拥有独立的模板文件目录，模板文件寻找规律如下：</p><ul><li>如果项目中的templates文件夹存在相应的模板文件，则使用templates文件夹下的模板文件；</li><li>如果项目中的templates文件夹中没有相应的模板文件，则使用定义的蓝图的时候指定的templates文件夹下的模板文件；</li><li>项目中的templates文件夹优先级大于指定的templates文件夹；</li></ul><h3 id="2、静态文件寻找规律"><a href="#2、静态文件寻找规律" class="headerlink" title="2、静态文件寻找规律"></a>2、静态文件寻找规律</h3><p>每个蓝图可以独立的静态文件目录，静态文件寻找规则如下：</p><ul><li>如果项目中的 static 文件夹中存在相应的静态文件，则使用 static 文件夹下的静态文件</li><li>如果项目中的 static 文件夹中没有相应的静态文件，则使用定义蓝图的时候指定的 static 文件夹下的静态文件</li><li>项目中的 templates 文件夹优先级大于指定的 templates 文件夹</li></ul><h2 id="五、究极扩展性的栗子"><a href="#五、究极扩展性的栗子" class="headerlink" title="五、究极扩展性的栗子"></a>五、究极扩展性的栗子</h2><h3 id="1、目录结构-1"><a href="#1、目录结构-1" class="headerlink" title="1、目录结构"></a>1、目录结构</h3><img src="/2023/11/26/python/flask/flask-9-lan-tu-de-ji-ben-zuo-yong/3.png" class=""><h3 id="2、目录功能描述"><a href="#2、目录功能描述" class="headerlink" title="2、目录功能描述"></a>2、目录功能描述</h3><table><thead><tr><th align="left">路径</th><th align="left">功能描述</th></tr></thead><tbody><tr><td align="left">templates</td><td align="left">项目默认的模板文件夹</td></tr><tr><td align="left">static</td><td align="left">项目默认的静态文件夹</td></tr><tr><td align="left">news</td><td align="left">蓝图 news 的相关文件</td></tr><tr><td align="left">news/templates</td><td align="left">蓝图 news 的私有模板文件夹</td></tr><tr><td align="left">news/static</td><td align="left">蓝图 news 的私有静态文件夹</td></tr><tr><td align="left">products</td><td align="left">蓝图 products 的相关文件</td></tr><tr><td align="left">products/templates</td><td align="left">蓝图 products 的私有模板文件夹</td></tr><tr><td align="left">products/static</td><td align="left">蓝图 products 的私有静态文件夹</td></tr></tbody></table><h3 id="3、文件功能描述"><a href="#3、文件功能描述" class="headerlink" title="3、文件功能描述"></a>3、文件功能描述</h3><table><thead><tr><th align="left">路径</th><th align="left">功能描述</th></tr></thead><tbody><tr><td align="left"><code>app.py</code></td><td align="left">主程序</td></tr><tr><td align="left"><code>news/__init.py__</code></td><td align="left">蓝图 news 的实现</td></tr><tr><td align="left"><code>news/templates/society.html</code></td><td align="left">属于蓝图 news 的一个模板文件</td></tr><tr><td align="left"><code>news/static/news.css</code></td><td align="left">属于蓝图 news 的一个静态文件</td></tr><tr><td align="left"><code>products/__init.py__</code></td><td align="left">蓝图 products 的实现</td></tr><tr><td align="left"><code>products/static/products.css</code></td><td align="left">属于蓝图 products 的一个静态文件</td></tr><tr><td align="left"><code>products/templates/car.html</code></td><td align="left">属于蓝图 products 的一个模板文件</td></tr></tbody></table><h3 id="4、app的代码"><a href="#4、app的代码" class="headerlink" title="4、app的代码"></a>4、app的代码</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token keyword">from</span> eighthFlask <span class="token keyword">import</span> news<span class="token punctuation">,</span> productsapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>register_blueprint<span class="token punctuation">(</span>news<span class="token punctuation">)</span>app<span class="token punctuation">.</span>register_blueprint<span class="token punctuation">(</span>products<span class="token punctuation">)</span>app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">8888</span><span class="token punctuation">,</span> debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、news-init-py代码"><a href="#5、news-init-py代码" class="headerlink" title="5、news/__init__.py代码"></a>5、<code>news/__init__.py</code>代码</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 导入蓝图</span><span class="token keyword">from</span> flask <span class="token keyword">import</span> Blueprint<span class="token punctuation">,</span> render_template<span class="token triple-quoted-string string">'''实例化蓝图对象：第一个参数：蓝图名称；第二个参数：导入蓝图的名称；第三个参数：蓝图的前缀，该蓝图下的路由规则前缀都需要加上这个。'''</span>blueprint <span class="token operator">=</span> Blueprint<span class="token punctuation">(</span><span class="token string">'news'</span><span class="token punctuation">,</span> __name__<span class="token punctuation">,</span> url_prefix<span class="token operator">=</span><span class="token string">'/news'</span><span class="token punctuation">,</span> template_folder<span class="token operator">=</span><span class="token string">'templates'</span><span class="token punctuation">,</span> static_folder<span class="token operator">=</span><span class="token string">'static'</span><span class="token punctuation">)</span><span class="token comment"># 用蓝图注册路由</span><span class="token decorator annotation punctuation">@blueprint<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/society/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">society_news</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'society.html'</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@blueprint<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/tech/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">tech_news</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'IT 新闻模块'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>蓝图中页面的 URL 前缀为 /news；</li><li>蓝图的模板目录为 templates，绝对路径为 ‘项目目录 /news/templates’；</li><li>蓝图的静态文件目录为 static，绝对路径为 ‘项目目录 /news/static’</li><li>调用 render_template (‘society.html’) 渲染模板文件 society.html，根据模板文件的查找规则，最终在 ‘项目目录 /news/templates’ 目录下找到模板文件</li></ul><h3 id="6、news-templates-society-html代码"><a href="#6、news-templates-society-html代码" class="headerlink" title="6、news/templates/society.html代码"></a>6、news/templates/society.html代码</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{{ url_for('news.static',filename='news.css')}}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>社会新闻<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在模板文件中引用了静态文件 news.css。<code>{{url_for ('news.static',filename=‘news.css’) }}</code> 的输出为 news/static/news.css，其中 news.static 表示蓝图 news 的 static 目录</p><h3 id="7、news-static-news-css代码"><a href="#7、news-static-news-css代码" class="headerlink" title="7、news/static/news.css代码"></a>7、news/static/news.css代码</h3><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">h1</span> <span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="8、products-init-py代码"><a href="#8、products-init-py代码" class="headerlink" title="8、products/__init__.py代码"></a>8、<code>products/__init__.py</code>代码</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Blueprintblueprint <span class="token operator">=</span> Blueprint<span class="token punctuation">(</span><span class="token string">'products'</span><span class="token punctuation">,</span> __name__<span class="token punctuation">,</span> url_prefix<span class="token operator">=</span><span class="token string">'/products'</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@blueprint<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">"/car"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">car_products</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"汽车产品版块"</span><span class="token decorator annotation punctuation">@blueprint<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">"/baby"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">baby_products</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"婴儿产品版块"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9、访问结果"><a href="#9、访问结果" class="headerlink" title="9、访问结果"></a>9、访问结果</h3><img src="/2023/11/26/python/flask/flask-9-lan-tu-de-ji-ben-zuo-yong/4.png" class=""><h2 id="六、验证目录优先级"><a href="#六、验证目录优先级" class="headerlink" title="六、验证目录优先级"></a>六、验证目录优先级</h2><p>在根目录下的 templates 目录下也添加一个 society.html 文件，在根目录下的 static 目录下添加一个 project.css</p><h3 id="1、html代码"><a href="#1、html代码" class="headerlink" title="1、html代码"></a>1、html代码</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>HelloWord<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{{ url_for('static', filename='news.css')}}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>社会新闻！！！！！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、css代码"><a href="#2、css代码" class="headerlink" title="2、css代码"></a>2、css代码</h3><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">h1</span> <span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3、预期结果"><a href="#3、预期结果" class="headerlink" title="3、预期结果"></a>3、预期结果</h3><ul><li>根据 templates、static 的查找规则，会优先查找项目根目录的 templates、static 目录下是否有对应的模板文件、静态文件</li><li>这里 society.html 同时出现在根目录的 templates 和蓝图目录的 templates，应该优先返回根目录的 templates 下的 society.html</li></ul><h3 id="4、访问结果"><a href="#4、访问结果" class="headerlink" title="4、访问结果"></a>4、访问结果</h3><img src="/2023/11/26/python/flask/flask-9-lan-tu-de-ji-ben-zuo-yong/5.png" class=""><p>符合预期</p><h2 id="七、Blueprint源码解析"><a href="#七、Blueprint源码解析" class="headerlink" title="七、Blueprint源码解析"></a>七、Blueprint源码解析</h2><h3 id="类初始化-init-方法参数列表"><a href="#类初始化-init-方法参数列表" class="headerlink" title="类初始化__init__方法参数列表"></a>类初始化<code>__init__</code>方法参数列表</h3><img src="/2023/11/26/python/flask/flask-9-lan-tu-de-ji-ben-zuo-yong/6.png" class=""><ul><li>name：蓝图名称，将会被添加到每个 endpoint </li><li>import_name：蓝图包的名称，通常是 <code>__name__</code>，有助于找到 root_path 蓝图</li><li>static_folder：包含静态文件的文件夹，由蓝图的静态路由提供服务，路径以蓝图文件为根路径开始找</li><li>static_url_path：提供静态文件的 url，默认就是 static_folder，如果蓝图没有 url_prefix，应用程序的静态路由将优先，并且蓝图的静态文件将无法访问</li><li>template_folder：包含模板文件的文件夹，路径以蓝图文件为根路径开始找</li><li>url_prefix：会作为蓝图所有路由的前缀路径</li><li>subdomain：蓝图路由将匹配的子域</li><li>url_defaults：蓝图路由的默认值字典</li><li>root_path：默认情况下，蓝图会自动设置这基于“import_name”</li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask-8：jinja模板入门</title>
      <link href="/2023/11/25/python/flask/flask-8-jinja-mo-ban-ru-men/"/>
      <url>/2023/11/25/python/flask/flask-8-jinja-mo-ban-ru-men/</url>
      
        <content type="html"><![CDATA[<h1 id="Flask-8：jinja模板入门"><a href="#Flask-8：jinja模板入门" class="headerlink" title="Flask-8：jinja模板入门"></a>Flask-8：jinja模板入门</h1><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><ul><li>之前的文章有个栗子，视图函数可以直接返回一段HTML代码，浏览器可以自动渲染；</li><li>但是当你的HTML非常复杂的话，也要整串写在代码里面，这显然不合理，可阅读性也非常差；</li><li>所以，就诞生了Jinja2这种模板引擎来解决需要返回的复杂Jinja2模板代码问题。</li></ul><h2 id="二、一个简单栗子"><a href="#二、一个简单栗子" class="headerlink" title="二、一个简单栗子"></a>二、一个简单栗子</h2><p>下面是Jinja2的模板，他对登录和未登录用户显示不同的信息</p><pre class="line-numbers language-jinja" data-language="jinja"><code class="language-jinja">&lt;html&gt;{% if login %}&lt;p&gt;您好，{{name}}&lt;/p&gt;{% else %}&lt;a href='/login'&gt;登录&lt;/a&gt;{% endif %}&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果用户已经登录：变量login为真、变量name为Tom，模板被渲染成如下的HTML文件：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>        您好，Tom    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果用户没有登录：变量login为假，模板被渲染成如下HTML文件：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>/login<span class="token punctuation">'</span></span><span class="token punctuation">&gt;</span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="三、Flask中使用模板"><a href="#三、Flask中使用模板" class="headerlink" title="三、Flask中使用模板"></a>三、Flask中使用模板</h2><h3 id="1、目录结构"><a href="#1、目录结构" class="headerlink" title="1、目录结构"></a>1、目录结构</h3><img src="/2023/11/25/python/flask/flask-8-jinja-mo-ban-ru-men/0.png" class=""><p>一般来说templates就是存放模板的目录</p><h3 id="2、jinja2模板代码"><a href="#2、jinja2模板代码" class="headerlink" title="2、jinja2模板代码"></a>2、jinja2模板代码</h3><pre class="line-numbers language-django" data-language="django"><code class="language-django"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>My name is <span class="token django language-django"><span class="token delimiter punctuation">{{</span> <span class="token variable">name</span> <span class="token delimiter punctuation">}}</span></span>, I'm <span class="token django language-django"><span class="token delimiter punctuation">{{</span> <span class="token variable">age</span> <span class="token delimiter punctuation">}}</span></span> years old.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、flask代码"><a href="#3、flask代码" class="headerlink" title="3、flask代码"></a>3、flask代码</h3><ul><li>首先，需要import render_template；</li><li>然后，视图调用render_template，对模板 templates/index.html进行渲染；</li><li>最后，render_template包含有2个命名参数：name和age，模板引擎将模板templates/index.html中的变量进行替换。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> render_templateapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'tom'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">8080</span><span class="token punctuation">,</span> debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="请求结果"><a href="#请求结果" class="headerlink" title="请求结果"></a>请求结果</h4><img src="/2023/11/25/python/flask/flask-8-jinja-mo-ban-ru-men/1.png" class=""><h2 id="四、分界符"><a href="#四、分界符" class="headerlink" title="四、分界符"></a>四、分界符</h2><p>jinja2模板文件混合html语法与jinja2语法，使用分界符区分HTML语法与jinja2语法。有5中常见的分界符：</p><ul><li><code>{{ 变量 }}</code>，将变量放置在 <code>{{ 和 }}</code> 之间；</li><li><code>{% 语句 %}</code>，将语句放置在 <code>{% 和 %}</code> 之间；</li><li><code>，将注释放置在 </code> 之间；</li><li><code>##</code> 注释， 将注释放置在 # 之后。</li></ul><h3 id="1、变量"><a href="#1、变量" class="headerlink" title="1、变量"></a>1、变量</h3><p>jinja2 模板中，使用  包围的标识符称为变量，模板渲染会将其替换为Python中的变量。</p><pre class="line-numbers language-django" data-language="django"><code class="language-django"><span class="token django language-django"><span class="token delimiter punctuation">{{</span> 变量 <span class="token delimiter punctuation">}}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2、jinja2模板"><a href="#2、jinja2模板" class="headerlink" title="2、jinja2模板"></a>2、jinja2模板</h3><pre class="line-numbers language-django" data-language="django"><code class="language-django"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token django language-django"><span class="token delimiter punctuation">{{</span> <span class="token variable">string</span> <span class="token delimiter punctuation">}}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span> <span class="token django language-django"><span class="token delimiter punctuation">{{</span> <span class="token variable">list</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token delimiter punctuation">}}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span> <span class="token django language-django"><span class="token delimiter punctuation">{{</span> <span class="token variable">list</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token delimiter punctuation">}}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span> <span class="token django language-django"><span class="token delimiter punctuation">{{</span> <span class="token variable">list</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token delimiter punctuation">}}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span> <span class="token django language-django"><span class="token delimiter punctuation">{{</span> <span class="token variable">list</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token delimiter punctuation">}}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span> <span class="token django language-django"><span class="token delimiter punctuation">{{</span> <span class="token variable">dict</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token delimiter punctuation">}}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span> <span class="token django language-django"><span class="token delimiter punctuation">{{</span> <span class="token variable">dict</span><span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span> <span class="token delimiter punctuation">}}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>包含有3种类型的变量：字符串、列表、字典，他们会被替换为同名的Python变量。</p><h3 id="3、Flask代码"><a href="#3、Flask代码" class="headerlink" title="3、Flask代码"></a>3、Flask代码</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">STRING <span class="token operator">=</span> <span class="token string">'www.baidu.com'</span>LIST <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'www'</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Tom"</span><span class="token punctuation">}</span><span class="token punctuation">]</span>DICT <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'TOM'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">}</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/2'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'01-jinja2_2.html'</span><span class="token punctuation">,</span> string<span class="token operator">=</span>STRING<span class="token punctuation">,</span> <span class="token builtin">list</span><span class="token operator">=</span>LIST<span class="token punctuation">,</span> <span class="token builtin">dict</span><span class="token operator">=</span>DICT<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>列表的值包含字符串、数字、元组、字典，字典的值包含字符串、布尔值</p><h4 id="请求结果-1"><a href="#请求结果-1" class="headerlink" title="请求结果"></a>请求结果</h4><img src="/2023/11/25/python/flask/flask-8-jinja-mo-ban-ru-men/2.png" class=""><h2 id="五、for语句"><a href="#五、for语句" class="headerlink" title="五、for语句"></a>五、for语句</h2><h3 id="1、语法"><a href="#1、语法" class="headerlink" title="1、语法"></a>1、语法</h3><p>jinja2模板中，使用 <code>{% 语句 %}</code> 包围的语法块称为语句，jinja2支持类似于Python的for循环语句：</p><pre class="line-numbers language-django" data-language="django"><code class="language-django"><span class="token django language-django"><span class="token delimiter punctuation">{%</span> <span class="token tag keyword">for</span> <span class="token variable">item</span> <span class="token keyword">in</span> <span class="token variable">iterable</span> <span class="token delimiter punctuation">%}</span></span><span class="token django language-django"><span class="token delimiter punctuation">{%</span> <span class="token tag keyword">endfor</span> <span class="token delimiter punctuation">%}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2、模板代码"><a href="#2、模板代码" class="headerlink" title="2、模板代码"></a>2、模板代码</h3><pre class="line-numbers language-jinja" data-language="jinja"><code class="language-jinja">&lt;h1&gt;Members&lt;/h1&gt;&lt;ul&gt;{% for user in users %}    &lt;li&gt;{{ user }}&lt;/li&gt;    {% endfor %}    # for item in iterable    &lt;li&gt;{{ user }}&lt;/li&gt;    # endfor&lt;/ul&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、Flask代码-1"><a href="#3、Flask代码-1" class="headerlink" title="3、Flask代码"></a>3、Flask代码</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">users <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tom'</span><span class="token punctuation">,</span> <span class="token string">'jerry'</span><span class="token punctuation">,</span> <span class="token string">'mike'</span><span class="token punctuation">]</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/3'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'jinja2_3.html'</span><span class="token punctuation">,</span> users<span class="token operator">=</span>users<span class="token punctuation">,</span> iterable<span class="token operator">=</span>users<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="请求结果-2"><a href="#请求结果-2" class="headerlink" title="请求结果"></a>请求结果</h4><img src="/2023/11/25/python/flask/flask-8-jinja-mo-ban-ru-men/3.png" class=""><h2 id="六、if语句"><a href="#六、if语句" class="headerlink" title="六、if语句"></a>六、if语句</h2><h3 id="1、语法-1"><a href="#1、语法-1" class="headerlink" title="1、语法"></a>1、语法</h3><p>jinja2模板中，使用 <code>{% 语句 %}</code> 包围的语法块称为语句，jinja2支持类似于Python的if-else判断语句：</p><pre class="line-numbers language-django" data-language="django"><code class="language-django"><span class="token django language-django"><span class="token delimiter punctuation">{%</span> <span class="token tag keyword">if</span> <span class="token variable">cond</span> <span class="token delimiter punctuation">%}</span></span><span class="token django language-django"><span class="token delimiter punctuation">{%</span> <span class="token tag keyword">elif</span> <span class="token variable">cond</span> <span class="token delimiter punctuation">%}</span></span><span class="token django language-django"><span class="token delimiter punctuation">{%</span> <span class="token tag keyword">else</span> <span class="token delimiter punctuation">%}</span></span><span class="token django language-django"><span class="token delimiter punctuation">{%</span> <span class="token tag keyword">endif</span> <span class="token delimiter punctuation">%}</span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、模板代码-1"><a href="#2、模板代码-1" class="headerlink" title="2、模板代码"></a>2、模板代码</h3><pre class="line-numbers language-django" data-language="django"><code class="language-django"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token django language-django"><span class="token delimiter punctuation">{%</span> <span class="token tag keyword">if</span> <span class="token variable">a</span> <span class="token delimiter punctuation">%}</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>a is True<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token django language-django"><span class="token delimiter punctuation">{%</span> <span class="token tag keyword">else</span> <span class="token delimiter punctuation">%}</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>a is False<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token django language-django"><span class="token delimiter punctuation">{%</span> <span class="token tag keyword">endif</span> <span class="token delimiter punctuation">%}</span></span><span class="token django language-django"><span class="token delimiter punctuation">{%</span> <span class="token tag keyword">if</span> <span class="token variable">b</span> <span class="token delimiter punctuation">%}</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>b is True<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token django language-django"><span class="token delimiter punctuation">{%</span> <span class="token tag keyword">elif</span> <span class="token variable">c</span> <span class="token delimiter punctuation">%}</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>b is False, and c is True<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token django language-django"><span class="token delimiter punctuation">{%</span> <span class="token tag keyword">endif</span> <span class="token delimiter punctuation">%}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、Flask代码-2"><a href="#3、Flask代码-2" class="headerlink" title="3、Flask代码"></a>3、Flask代码</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/4'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> <span class="token boolean">False</span>    b <span class="token operator">=</span> <span class="token boolean">False</span>    c <span class="token operator">=</span> <span class="token boolean">True</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'01-jinja2_4.html'</span><span class="token punctuation">,</span> a<span class="token operator">=</span>a<span class="token punctuation">,</span> b<span class="token operator">=</span>b<span class="token punctuation">,</span> c<span class="token operator">=</span>c<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="请求结果-3"><a href="#请求结果-3" class="headerlink" title="请求结果"></a>请求结果</h4><img src="/2023/11/25/python/flask/flask-8-jinja-mo-ban-ru-men/4.png" class=""><h2 id="七、tests"><a href="#七、tests" class="headerlink" title="七、tests"></a>七、tests</h2><h3 id="1、语法-2"><a href="#1、语法-2" class="headerlink" title="1、语法"></a>1、语法</h3><p>jinja2 提供的 tests 可以用来在语句里对变量或表达式进行测试</p><pre class="line-numbers language-django" data-language="django"><code class="language-django"><span class="token django language-django"><span class="token delimiter punctuation">{%</span> <span class="token tag keyword">variable</span> <span class="token keyword">is</span> <span class="token test function">test</span> <span class="token delimiter punctuation">%}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>完整的 test 请参考 <a href="https://jinja.palletsprojects.com/en/latest/templates/#builtin-tests%EF%BC%8C%E9%83%A8%E5%88%86test%E5%A6%82%E4%B8%8B%EF%BC%9A">https://jinja.palletsprojects.com/en/latest/templates/#builtin-tests，部分test如下：</a></p><table><thead><tr><th align="left">test 名称</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left">defined</td><td align="left">变量是否已经定义</td></tr><tr><td align="left">boolean</td><td align="left">变量的类型是否是 boolean</td></tr><tr><td align="left">integer</td><td align="left">变量的类型是否是 integer</td></tr><tr><td align="left">float</td><td align="left">变量的类型是否是 float</td></tr><tr><td align="left">string</td><td align="left">变量是否是 string</td></tr><tr><td align="left">mapping</td><td align="left">变量的类型是否是字典</td></tr><tr><td align="left">sequence</td><td align="left">变量的类型是否是序列</td></tr><tr><td align="left">even</td><td align="left">变量是否是偶数</td></tr><tr><td align="left">odd</td><td align="left">变量是否是奇数</td></tr><tr><td align="left">lower</td><td align="left">变量是否是小写</td></tr><tr><td align="left">upper</td><td align="left">变量是否是大写</td></tr></tbody></table><h3 id="2、jinja2模板-1"><a href="#2、jinja2模板-1" class="headerlink" title="2、jinja2模板"></a>2、jinja2模板</h3><pre class="line-numbers language-django" data-language="django"><code class="language-django"><span class="token django language-django"><span class="token delimiter punctuation">{%</span> <span class="token tag keyword">if</span> <span class="token variable">number</span> <span class="token keyword">is</span> <span class="token test function">odd</span> <span class="token delimiter punctuation">%}</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span> <span class="token django language-django"><span class="token delimiter punctuation">{{</span> <span class="token variable">number</span> <span class="token delimiter punctuation">}}</span></span> is odd        <span class="token django language-django"><span class="token delimiter punctuation">{%</span> <span class="token tag keyword">else</span> <span class="token delimiter punctuation">%}</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span> <span class="token django language-django"><span class="token delimiter punctuation">{{</span> <span class="token variable">number</span> <span class="token delimiter punctuation">}}</span></span> is even<span class="token django language-django"><span class="token delimiter punctuation">{%</span> <span class="token tag keyword">endif</span> <span class="token delimiter punctuation">%}</span></span><span class="token django language-django"><span class="token delimiter punctuation">{%</span> <span class="token tag keyword">if</span> <span class="token variable">string</span> <span class="token keyword">is</span> <span class="token test function">lower</span> <span class="token delimiter punctuation">%}</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span> <span class="token django language-django"><span class="token delimiter punctuation">{{</span> <span class="token variable">string</span> <span class="token delimiter punctuation">}}</span></span> is lower        <span class="token django language-django"><span class="token delimiter punctuation">{%</span> <span class="token tag keyword">else</span> <span class="token delimiter punctuation">%}</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span> <span class="token django language-django"><span class="token delimiter punctuation">{{</span> <span class="token variable">string</span> <span class="token delimiter punctuation">}}</span></span> is upper<span class="token django language-django"><span class="token delimiter punctuation">{%</span> <span class="token tag keyword">endif</span> <span class="token delimiter punctuation">%}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、jinja2模板输入"><a href="#3、jinja2模板输入" class="headerlink" title="3、jinja2模板输入"></a>3、jinja2模板输入</h3><pre class="line-numbers language-django" data-language="django"><code class="language-django">number = 404string = 'HELLO'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4、渲染后"><a href="#4、渲染后" class="headerlink" title="4、渲染后"></a>4、渲染后</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span> 404 is even  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span> HELLO is upper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="八、过滤器"><a href="#八、过滤器" class="headerlink" title="八、过滤器"></a>八、过滤器</h2><h3 id="1、语法-3"><a href="#1、语法-3" class="headerlink" title="1、语法"></a>1、语法</h3><p>jinja2 过滤器的是一个函数</p><pre class="line-numbers language-django" data-language="django"><code class="language-django"><span class="token django language-django"><span class="token delimiter punctuation">{{</span> <span class="token variable">variable</span> <span class="token operator">|</span> <span class="token variable">filter</span> <span class="token delimiter punctuation">}}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>执行函数调用 filter(varialbe)，把函数返回值作为这个代码块的值;</li><li>暂时不举具体的栗子了，只做简单介绍，目测后面我会出详细文章讲解 jinja2;</li></ul><h3 id="2、模板"><a href="#2、模板" class="headerlink" title="2、模板"></a>2、模板</h3><pre class="line-numbers language-django" data-language="django"><code class="language-django"><span class="token django language-django"><span class="token delimiter punctuation">{{</span> <span class="token variable">string</span> <span class="token operator">|</span> <span class="token variable">upper</span> <span class="token delimiter punctuation">}}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3、jinja2模板输入-1"><a href="#3、jinja2模板输入-1" class="headerlink" title="3、jinja2模板输入"></a>3、jinja2模板输入</h3><pre class="line-numbers language-django" data-language="django"><code class="language-django">string = 'hello'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4、渲染后-1"><a href="#4、渲染后-1" class="headerlink" title="4、渲染后"></a>4、渲染后</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>HELLO<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask-7：request对象</title>
      <link href="/2023/11/24/python/flask/flask-7-request-dui-xiang/"/>
      <url>/2023/11/24/python/flask/flask-7-request-dui-xiang/</url>
      
        <content type="html"><![CDATA[<h1 id="Flask-7：request对象"><a href="#Flask-7：request对象" class="headerlink" title="Flask-7：request对象"></a>Flask-7：request对象</h1><h2 id="一、Flask中很重要的request对象"><a href="#一、Flask中很重要的request对象" class="headerlink" title="一、Flask中很重要的request对象"></a>一、Flask中很重要的request对象</h2><ul><li>浏览器访问服务端时，向服务端发送请求。</li><li>Flask程序使用request对象描述请求信息。</li><li>当你想获取请求体、请求参数、请求头数据的时候，就需要靠request对象了。</li><li>这篇会用结果驱动源码解析的方式来讲解。</li></ul><h2 id="二、真实使用场景"><a href="#二、真实使用场景" class="headerlink" title="二、真实使用场景"></a>二、真实使用场景</h2><p>浏览器访问服务端，需要将相应的数据发送给服务端，可能有如下场景：</p><ol><li>通过URL参数进行查询，浏览器需要将查询参数发送给服务端。</li><li>提交表单Form进行查询，浏览器需要将表单Form中的字段发送给服务端。</li><li>上传文件，浏览器需要将文件发送给服务端。</li></ol><p>服务端收到将客户端发送的数据后，封装形成一个请求对象，在Flask中，请求对象是一个模块变量flask.request</p><h3 id="request包含常用的属性"><a href="#request包含常用的属性" class="headerlink" title="request包含常用的属性"></a>request包含常用的属性</h3><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>method</td><td>当前的请求方法</td></tr><tr><td>form</td><td>表单参数及其值的字典对象</td></tr><tr><td>args</td><td>查询字符串的字典对象</td></tr><tr><td>values</td><td>包含所有数据的字典对象</td></tr><tr><td>json</td><td>如果mimetype是application/json，这个参数将会解析JSON数据，如果不是则返回None</td></tr><tr><td>headers</td><td>http协议请求头</td></tr><tr><td>cookies</td><td>cookie名称和值的字典对象</td></tr><tr><td>files</td><td>与上传文件有关的数据</td></tr></tbody></table><h3 id="request对象也能获取url相关参数吗？"><a href="#request对象也能获取url相关参数吗？" class="headerlink" title="request对象也能获取url相关参数吗？"></a>request对象也能获取url相关参数吗？</h3><p>获取URL请求参数的栗子</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> requestapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/query'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> request<span class="token punctuation">.</span>args<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> request<span class="token punctuation">.</span>args<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/query2'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">query2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'args ='</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span>args<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'form ='</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span>form<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">"form"</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/query3'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">query3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'args ='</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span>args<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'json ='</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span>json<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">"json"</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/query4'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">query4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> request<span class="token punctuation">.</span>values<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> request<span class="token punctuation">.</span>values<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">8888</span><span class="token punctuation">,</span> debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面我会用url请求参数传数据：</p><p>（在Flask里面，把四种获取请求数据的属性都写一遍，然后看看最后的结果，提前踩坑）</p><h3 id="请求结果"><a href="#请求结果" class="headerlink" title="请求结果"></a>请求结果</h3><p>/query</p><img src="/2023/11/24/python/flask/flask-7-request-dui-xiang/0.png" class=""><p>/query2 控制台输出</p><img src="/2023/11/24/python/flask/flask-7-request-dui-xiang/1.png" class=""><p>用form属性的话得到是一个空字典哦！！！</p><p>/query3 控制台输出</p><img src="/2023/11/24/python/flask/flask-7-request-dui-xiang/2.png" class=""><p>用JSON属性的话会报错哦，所以无论如何都不要使用json获取url请求参数！！！</p><p>/query4</p><img src="/2023/11/24/python/flask/flask-7-request-dui-xiang/3.png" class=""><p>可以看到values属性也能拿到url请求参数哦！！！</p><h3 id="获取表单参数的栗子"><a href="#获取表单参数的栗子" class="headerlink" title="获取表单参数的栗子"></a>获取表单参数的栗子</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/addUser'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">check_login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/addUser2'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">check_login2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'form ='</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span>form<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'args ='</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span>args<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">"good"</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/addUser3'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">check_login3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'form ='</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span>form<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'json ='</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span>json<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">"good"</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/addUser4'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">check_login4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> request<span class="token punctuation">.</span>values<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> request<span class="token punctuation">.</span>values<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面我会用表单格式来传递数据：</p><p>/addUser</p><img src="/2023/11/24/python/flask/flask-7-request-dui-xiang/4.png" class=""><p>/addUser2 控制台输出</p><img src="/2023/11/24/python/flask/flask-7-request-dui-xiang/5.png" class=""><p>/addUser3 控制台输出</p><img src="/2023/11/24/python/flask/flask-7-request-dui-xiang/6.png" class=""><p>用JSON属性的话会报错，所以无论如何不要使用json获取form-data！！！</p><p>/addUser4</p><img src="/2023/11/24/python/flask/flask-7-request-dui-xiang/7.png" class=""><p>可以看到values属性也能拿到form表单提交的数据哦！！！</p><h3 id="获取JSON数据的栗子"><a href="#获取JSON数据的栗子" class="headerlink" title="获取JSON数据的栗子"></a>获取JSON数据的栗子</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/addJson'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">check_login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> request<span class="token punctuation">.</span>json<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> request<span class="token punctuation">.</span>json<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/addJson2'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">check_login2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'json ='</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span>json<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'args ='</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span>args<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">"good"</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/addJson3'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">check_login3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'json ='</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span>json<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'form ='</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span>form<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">"good"</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/addJson4'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">check_login4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'json ='</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span>json<span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>json<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'values ='</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span>values<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> request<span class="token punctuation">.</span>json<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> request<span class="token punctuation">.</span>json<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>/addJson</p><img src="/2023/11/24/python/flask/flask-7-request-dui-xiang/8.png" class=""><p>/addJson2 控制台输出</p><img src="/2023/11/24/python/flask/flask-7-request-dui-xiang/9.png" class=""><p>/addJson3 控制台输出</p><img src="/2023/11/24/python/flask/flask-7-request-dui-xiang/10.png" class=""><p>/addJson4</p><img src="/2023/11/24/python/flask/flask-7-request-dui-xiang/11.png" class=""><p>控制台输出</p><img src="/2023/11/24/python/flask/flask-7-request-dui-xiang/12.png" class=""><p>要注意：当请求体是JSON时，不能通过values来获取请求数据哦！！！</p><p>上面我们可以看到request.json拿到的就是JSON格式的请求体，并且自动转化成字典了！！！</p><h2 id="三、为什么request-values能获取form、args的数据，却拿不到JSON的数据呢？"><a href="#三、为什么request-values能获取form、args的数据，却拿不到JSON的数据呢？" class="headerlink" title="三、为什么request.values能获取form、args的数据，却拿不到JSON的数据呢？"></a>三、为什么request.values能获取form、args的数据，却拿不到JSON的数据呢？</h2><p>request.value源码</p><img src="/2023/11/24/python/flask/flask-7-request-dui-xiang/13.png" class=""><ul><li>能看到，他本质就是获取args、form的数据，但不包含JSON数据。</li><li>但是这里有个重点，只有请求方法不为GET的时候，发送form表单数据才能通过request.value拿到请求数据。</li></ul><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/query5'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token string">"POST"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">query5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>form<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>args<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>values<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> request<span class="token punctuation">.</span>values<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> request<span class="token punctuation">.</span>values<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2023/11/24/python/flask/flask-7-request-dui-xiang/14.png" class=""><p>直接报错，找不到对应的name和key，因为request.value是空的</p><p>控制台输出</p><img src="/2023/11/24/python/flask/flask-7-request-dui-xiang/15.png" class=""><p>看源码应该知道，当非GET请求的时候传递表单数据，request.values也能获取得到request.form的数据。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask-6：Debug模式</title>
      <link href="/2023/11/23/python/flask/flask-6-debug-mo-shi/"/>
      <url>/2023/11/23/python/flask/flask-6-debug-mo-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="Flask-6：Debug模式"><a href="#Flask-6：Debug模式" class="headerlink" title="Flask-6：Debug模式"></a>Flask-6：Debug模式</h1><h2 id="一、使用Flask开发过程中存在两个常见的问题"><a href="#一、使用Flask开发过程中存在两个常见的问题" class="headerlink" title="一、使用Flask开发过程中存在两个常见的问题"></a>一、使用Flask开发过程中存在两个常见的问题</h2><ol><li>当Flask程序出错时，没有提示错误的详细信息。</li><li>修改Flask源代码后需要重启Flask程序。</li></ol><p>这两个问题非常影响开发效率，因此Flask引入了debug模式解决以上问题。</p><h3 id="错误示例"><a href="#错误示例" class="headerlink" title="错误示例"></a>错误示例</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flaskapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hello_world</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">0</span>    <span class="token keyword">return</span> <span class="token string">'&lt;b&gt;hello world&lt;/b&gt;'</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">8888</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第五行，存在一个除以零的错误，在浏览器中访问Flask，会报错</p><img src="/2023/11/23/python/flask/flask-6-debug-mo-shi/0.png" class=""><p>浏览器中提示 Internal Server Error，表示服务端程序出现错误，但是没有给出错误的详细信息，即产生错误的文件、函数、行号等位置信息，排查错误非常不方便。</p><h3 id="修改源代码后需要重启"><a href="#修改源代码后需要重启" class="headerlink" title="修改源代码后需要重启"></a>修改源代码后需要重启</h3><p>开发Flask程序有如下3个步骤：</p><ol><li>编辑Flask源程序；</li><li>在命令行中启动Flask程序；</li><li>在浏览器中访问Flask程序；</li></ol><p>每次对Flask源程序进行修改后，都需要重启Flask程序。如下，将上述函数修改为</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hello_world</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'&lt;b&gt;hello world&lt;/b&gt;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>程序的功能：访问页面/时，返回报错，要想正常返回文本’hello world’，需要做如下工作：</p><ol><li>切换到编辑器，编辑Flask源程序，修改函数；</li><li>切换到终端，终止原先运行的Flask程序，再次运行Flask程序；</li><li>切换浏览器，访问/页面。</li></ol><p>在开发过程中，需要在编辑器、终端、浏览器3个程序之间来回切换，操作繁琐。这时，我们需要使用Debug模式来快速解决上面的问题。</p><h2 id="二、Flask的Debug模式"><a href="#二、Flask的Debug模式" class="headerlink" title="二、Flask的Debug模式"></a>二、Flask的Debug模式</h2><p>Flask程序可以运行在Debug模式下，Debug模式提供了如下功能：</p><ol><li>当Flask程序出现错误时，在浏览器中提示错误的详细信息；</li><li>修改Flask源码后，Flask程序会自动重新加载，不需要重启Flask程序，即可在浏览器中看到修改后的效果。</li></ol><h3 id="开启Debug模式"><a href="#开启Debug模式" class="headerlink" title="开启Debug模式"></a>开启Debug模式</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 在run中加 , debug=True 即可</span>app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">8888</span><span class="token punctuation">,</span> debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>报错从页面查看</p><img src="/2023/11/23/python/flask/flask-6-debug-mo-shi/1.png" class=""><p>控制台中会显示</p><img src="/2023/11/23/python/flask/flask-6-debug-mo-shi/2.png" class=""><p><code>Debug mode: on</code>，表示Flask程序已进入调试模式；修改代码后不需要重启。</p><img src="/2023/11/23/python/flask/flask-6-debug-mo-shi/3.png" class="">]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask-5：动态路由</title>
      <link href="/2023/11/22/python/flask/flask-5-dong-tai-lu-you/"/>
      <url>/2023/11/22/python/flask/flask-5-dong-tai-lu-you/</url>
      
        <content type="html"><![CDATA[<h1 id="Flask-5：动态路由"><a href="#Flask-5：动态路由" class="headerlink" title="Flask-5：动态路由"></a>Flask-5：动态路由</h1><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><ul><li>前面几篇文章讲的路由路径（rule）都是固定的，就是一个路径和一个视图函数绑定，当访问这条路径时会触发响应的处理函数；</li><li>这样无法处理复杂的情况，比如常见的一个课程分类下有很多个课程，那么他们的path可能是<code>/course/class_1,/course/class_2,/course/class_3,...</code>仅最后的序号不同，其他部分都是相同的，如果每一条path都写一个单独的视图函数来处理，那样复用性会很差，代码量也会很多；</li><li>所以咱们要是用动态路由，路由中的路径是一个包含有参数的模板，这样就可以匹配多条路径。</li></ul><h2 id="二、静态路由的栗子"><a href="#二、静态路由的栗子" class="headerlink" title="二、静态路由的栗子"></a>二、静态路由的栗子</h2><p>网站中有三个用户a，b，c，提供了3个路由访问这3个用户的信息</p><table><thead><tr><th>路由</th><th>视图函数</th></tr></thead><tbody><tr><td>/user/a</td><td>show_user_a()</td></tr><tr><td>/user/b</td><td>show_user_b()</td></tr><tr><td>/user/c</td><td>show_user_c()</td></tr></tbody></table><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flaskapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/user/a'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show_user_a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'My name is a'</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/user/b'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show_user_b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'My name is b'</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/user/c'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show_user_c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'My name is c'</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="静态路由存在的问题"><a href="#静态路由存在的问题" class="headerlink" title="静态路由存在的问题"></a>静态路由存在的问题</h3><p>三个视图函数的功能逻辑是相同的，存在明显的逻辑代码重复</p><h2 id="三、动态路由"><a href="#三、动态路由" class="headerlink" title="三、动态路由"></a>三、动态路由</h2><p>Flask中动态路由是指带有参数的页面路径，大概格式：<code>/prefix/&lt;参数&gt;</code>，他是一个模板，可以匹配多条路径，将参数放置在符号&lt;&gt;之间。</p><h3 id="将上面的静态路由栗子优化成动态路由"><a href="#将上面的静态路由栗子优化成动态路由" class="headerlink" title="将上面的静态路由栗子优化成动态路由"></a>将上面的静态路由栗子优化成动态路由</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/user/&lt;name&gt;'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show_user</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'My name is {0}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>匹配所有以/user/开头的路径；</li><li>视图函数show_user有一个参数name；</li><li>假设实际路径是/user/x，那么与/user/<name>匹配成功，并且将x存储到参数name中。</name></li></ul><h3 id="实际请求结果"><a href="#实际请求结果" class="headerlink" title="实际请求结果"></a>实际请求结果</h3><img src="/2023/11/22/python/flask/flask-5-dong-tai-lu-you/0.png" class=""><h2 id="四、转换器"><a href="#四、转换器" class="headerlink" title="四、转换器"></a>四、转换器</h2><p>在Flask中，动态路由的参数类型默认是string，但也可以指定其他类型，比如数字int等</p><table><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>string</td><td>默认，可以不用写</td></tr><tr><td>int</td><td>整数</td></tr><tr><td>float</td><td>仅接收浮点数</td></tr><tr><td>path</td><td>和string相似，但是接受斜线</td></tr></tbody></table><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/user/&lt;name&gt;'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show_user</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'My name is {0}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/age/&lt;int:age&gt;'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show_age</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'age is %d'</span> <span class="token operator">%</span> age<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/price/&lt;float:price&gt;'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show_price</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'price is %f'</span> <span class="token operator">%</span> price<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/path/&lt;path:name&gt;'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show_path</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'path is %s'</span> <span class="token operator">%</span> name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="上述代码定义了四条动态路由"><a href="#上述代码定义了四条动态路由" class="headerlink" title="上述代码定义了四条动态路由"></a>上述代码定义了四条动态路由</h3><table><thead><tr><th>动态路由</th><th>参数类型</th><th>参数</th><th>视图函数</th></tr></thead><tbody><tr><td>/user/<name></name></td><td>string</td><td>name</td><td>show_user()</td></tr><tr><td>/age/&lt;<a href="int:age">int:age</a>&gt;</td><td>int</td><td>age</td><td>show_age()</td></tr><tr><td>/price/&lt;<a href="float:price">float:price</a>&gt;</td><td>float</td><td>price</td><td>show_price()</td></tr><tr><td>/path/&lt;<a href="path:name">path:name</a>&gt;</td><td>path</td><td>name</td><td>show_path()</td></tr></tbody></table><h3 id="请求结果"><a href="#请求结果" class="headerlink" title="请求结果"></a>请求结果</h3><p>如果<name>传了包含/的话，会报404</name></p><img src="/2023/11/22/python/flask/flask-5-dong-tai-lu-you/1.png" class=""><h4 id="user-上面有就不截图了"><a href="#user-上面有就不截图了" class="headerlink" title="/user/上面有就不截图了"></a>/user/<name>上面有就不截图了</name></h4><h4 id="age-int-age"><a href="#age-int-age" class="headerlink" title="/age/int:age"></a>/age/<a href="int:age">int:age</a></h4><img src="/2023/11/22/python/flask/flask-5-dong-tai-lu-you/2.png" class=""><h4 id="price-float-price"><a href="#price-float-price" class="headerlink" title="/price/float:price"></a>/price/<a href="float:price">float:price</a></h4><p>传递整数（会报404）</p><img src="/2023/11/22/python/flask/flask-5-dong-tai-lu-you/3.png" class=""><p>传递浮点</p><img src="/2023/11/22/python/flask/flask-5-dong-tai-lu-you/4.png" class=""><h4 id="path-path-name"><a href="#path-path-name" class="headerlink" title="/path/path:name"></a>/path/<a href="path:name">path:name</a></h4><p>不包含/和字符串一样</p><img src="/2023/11/22/python/flask/flask-5-dong-tai-lu-you/5.png" class=""><p>包含/也可以正常请求</p><img src="/2023/11/22/python/flask/flask-5-dong-tai-lu-you/6.png" class=""><h3 id="一个动态路由包含多个参数"><a href="#一个动态路由包含多个参数" class="headerlink" title="一个动态路由包含多个参数"></a>一个动态路由包含多个参数</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/all/&lt;path:path&gt;/name/&lt;string:name&gt;/age/&lt;int:age&gt;/price/&lt;float:price&gt;'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show_all</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> path<span class="token punctuation">,</span> age<span class="token punctuation">,</span> price<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"path is </span><span class="token interpolation"><span class="token punctuation">{</span>path<span class="token punctuation">}</span></span><span class="token string">\nname is </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string">\nage is </span><span class="token interpolation"><span class="token punctuation">{</span>age<span class="token punctuation">}</span></span><span class="token string">\nprice is </span><span class="token interpolation"><span class="token punctuation">{</span>price<span class="token punctuation">}</span></span><span class="token string">"</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>请求</p><img src="/2023/11/22/python/flask/flask-5-dong-tai-lu-you/7.png" class="">]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask-4：URL组成部分详解</title>
      <link href="/2023/11/21/python/flask/flask-4-url-zu-cheng-bu-fen-xiang-jie/"/>
      <url>/2023/11/21/python/flask/flask-4-url-zu-cheng-bu-fen-xiang-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="Flask-4：URL组成部分详解"><a href="#Flask-4：URL组成部分详解" class="headerlink" title="Flask-4：URL组成部分详解"></a>Flask-4：URL组成部分详解</h1><h2 id="一、URL"><a href="#一、URL" class="headerlink" title="一、URL"></a>一、URL</h2><ul><li>Uniform Resource Locator的简写，中文名叫统一资源定位符；</li><li>用于表示服务端各种资源，例如网页；</li><li>下面将讲解Flask中如何提取组成URL的各个部分。</li></ul><h2 id="二、URL组成详解"><a href="#二、URL组成详解" class="headerlink" title="二、URL组成详解"></a>二、URL组成详解</h2><p>一个常见的URL： <a href="https://www.baidu.com/1/">https://www.baidu.com/1/</a></p><p>由以下几部分组成： scheme://host:port/path?key=value</p><ul><li>scheme：代表的是访问的协议，一般为http或https。</li><li>host：主机名、域名。</li><li>port：端口号，http协议默认使用80端口，https协议默认使用443端口。通常情况下，使用默认值，不需要显示的写明端口号。</li><li>path：页面路径。</li><li>key=value：查询字符串。</li></ul><h2 id="三、在Flask中分析URL参数"><a href="#三、在Flask中分析URL参数" class="headerlink" title="三、在Flask中分析URL参数"></a>三、在Flask中分析URL参数</h2><ul><li><p>服务端收到向客户端发送的数据后，封装形成一个请求对象，在FLask中，请求对象是一个模块变量flask.request；</p></li><li><p>request对象包含了众多的属性；</p></li><li><p>假设URL等于<a href="http://localhost/query?userId=123%EF%BC%8C%E5%88%99%E4%B8%8EURL%E5%8F%82%E6%95%B0%E7%9B%B8%E5%85%B3%E7%9A%84%E5%B1%9E%E6%80%A7%E5%A6%82%E4%B8%8B%EF%BC%9A">http://localhost/query?userId=123，则与URL参数相关的属性如下：</a></p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>url</td><td><a href="http://localhost/query?userId=123">http://localhost/query?userId=123</a></td></tr><tr><td>base_url</td><td><a href="http://localhost/query">http://localhost/query</a></td></tr><tr><td>host</td><td>localhost</td></tr><tr><td>host_url</td><td><a href="http://localhost/">http://localhost/</a></td></tr><tr><td>path</td><td>/query</td></tr><tr><td>full_path</td><td>/query?userId=123</td></tr></tbody></table></li></ul><h3 id="实际栗子"><a href="#实际栗子" class="headerlink" title="实际栗子"></a>实际栗子</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> requestapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">echo</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%-10s = %s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/query'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    echo<span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span>url<span class="token punctuation">)</span>    echo<span class="token punctuation">(</span><span class="token string">'base_url'</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span>base_url<span class="token punctuation">)</span>    echo<span class="token punctuation">(</span><span class="token string">'host'</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span>host<span class="token punctuation">)</span>    echo<span class="token punctuation">(</span><span class="token string">'host_url'</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span>host_url<span class="token punctuation">)</span>    echo<span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span>path<span class="token punctuation">)</span>    echo<span class="token punctuation">(</span><span class="token string">'full_path'</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span>full_path<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>args<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'userId = %s'</span> <span class="token operator">%</span> request<span class="token punctuation">.</span>args<span class="token punctuation">[</span><span class="token string">'userId'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">'hello'</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>port<span class="token operator">=</span><span class="token number">8080</span><span class="token punctuation">,</span> debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>浏览器访问</p><img src="/2023/11/21/python/flask/flask-4-url-zu-cheng-bu-fen-xiang-jie/0.png" class=""><p>控制台输出结果</p><img src="/2023/11/21/python/flask/flask-4-url-zu-cheng-bu-fen-xiang-jie/1.png" class="">]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask-3：Flask中的HTTP方法</title>
      <link href="/2023/11/20/python/flask/flask-3-flask-zhong-de-http-fang-fa/"/>
      <url>/2023/11/20/python/flask/flask-3-flask-zhong-de-http-fang-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="Flask-3：Flask中的HTTP方法"><a href="#Flask-3：Flask中的HTTP方法" class="headerlink" title="Flask-3：Flask中的HTTP方法"></a>Flask-3：Flask中的HTTP方法</h1><h2 id="一、查看app-route-源代码"><a href="#一、查看app-route-源代码" class="headerlink" title="一、查看app.route()源代码"></a>一、查看app.route()源代码</h2><img src="/2023/11/20/python/flask/flask-3-flask-zhong-de-http-fang-fa/0.png" class=""><h3 id="1、重点"><a href="#1、重点" class="headerlink" title="1、重点"></a>1、重点</h3><ul><li>Calls :meth:<code>add_url_rule</code>，需要关注一下这个方法；</li><li>endpoint如果未传递endpoint参数，则路由的端点名称为视图函数的名称，如果已为注册函数，则会引发错误；</li><li>methods参数默认值是[“GET”]，所以当你不传methods参数时，只有发送GET请求才会匹配上对应的路由。</li></ul><h3 id="2、add-url-rule-源代码"><a href="#2、add-url-rule-源代码" class="headerlink" title="2、add_url_rule()源代码"></a>2、add_url_rule()源代码</h3><img src="/2023/11/20/python/flask/flask-3-flask-zhong-de-http-fang-fa/1.png" class=""><ul><li>self：就是Flask类的实例；</li><li>rule：就是路由规则；</li><li>endpoint：函数名；</li><li>methods：没有传递，那么会先通过view_func获取methods属性，如果还是没有，那么就是GET，注意这是个列表[]。</li></ul><h3 id="3、结论"><a href="#3、结论" class="headerlink" title="3、结论"></a>3、结论</h3><p>默认的app.route()是仅支持GET请求的，如果是通过POST、PUT、DELETE等方法正常请求的话，需要添加methods参数。</p><h2 id="二、GET请求的栗子"><a href="#二、GET请求的栗子" class="headerlink" title="二、GET请求的栗子"></a>二、GET请求的栗子</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flaskapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token comment"># 不指定 methods，默认就是 GET</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hello_world</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 返回字符串</span>    <span class="token keyword">return</span> <span class="token string">'&lt;b&gt;Hello World&lt;/b&gt;'</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/get'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"GET"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 返回字符串</span>    <span class="token keyword">return</span> <span class="token string">'这是get请求'</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>port<span class="token operator">=</span><span class="token number">8080</span><span class="token punctuation">,</span> debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="请求结果："><a href="#请求结果：" class="headerlink" title="请求结果："></a>请求结果：</h3><img src="/2023/11/20/python/flask/flask-3-flask-zhong-de-http-fang-fa/2.png" class=""><img src="/2023/11/20/python/flask/flask-3-flask-zhong-de-http-fang-fa/3.png" class=""><h2 id="三、POST请求的栗子"><a href="#三、POST请求的栗子" class="headerlink" title="三、POST请求的栗子"></a>三、POST请求的栗子</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/post'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"post"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">post_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 返回字符串</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">'message'</span><span class="token punctuation">:</span> <span class="token string">'这是POST请求'</span><span class="token punctuation">}</span><span class="token comment"># 返回结果是一个字典，最后的请求会得到什么响应呢</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用GET请求得到的结果"><a href="#使用GET请求得到的结果" class="headerlink" title="使用GET请求得到的结果"></a>使用GET请求得到的结果</h3><img src="/2023/11/20/python/flask/flask-3-flask-zhong-de-http-fang-fa/4.png" class=""><p>使用GET发送求求会报405，请求方法不允许！！！</p><h3 id="使用POST请求"><a href="#使用POST请求" class="headerlink" title="使用POST请求"></a>使用POST请求</h3><img src="/2023/11/20/python/flask/flask-3-flask-zhong-de-http-fang-fa/5.png" class=""><h2 id="四、PUT、DELETE请求的栗子"><a href="#四、PUT、DELETE请求的栗子" class="headerlink" title="四、PUT、DELETE请求的栗子"></a>四、PUT、DELETE请求的栗子</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/pd'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"PUT"</span><span class="token punctuation">,</span> <span class="token string">"DELETE"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">pd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 返回列表</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">"delete"</span><span class="token punctuation">,</span> <span class="token string">"put"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="请求结果"><a href="#请求结果" class="headerlink" title="请求结果"></a>请求结果</h3><img src="/2023/11/20/python/flask/flask-3-flask-zhong-de-http-fang-fa/6.png" class=""><img src="/2023/11/20/python/flask/flask-3-flask-zhong-de-http-fang-fa/7.png" class="">]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask-2：第一个Flask Application</title>
      <link href="/2023/11/19/python/flask/flask-2-di-yi-ge-flask-application/"/>
      <url>/2023/11/19/python/flask/flask-2-di-yi-ge-flask-application/</url>
      
        <content type="html"><![CDATA[<h1 id="Flask-2：第一个Flask-Application"><a href="#Flask-2：第一个Flask-Application" class="headerlink" title="Flask-2：第一个Flask Application"></a>Flask-2：第一个Flask Application</h1><h2 id="一、安装Flask"><a href="#一、安装Flask" class="headerlink" title="一、安装Flask"></a>一、安装Flask</h2><p>Flask是一个web框架，使用它首先要安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> flask<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>导入Flask模块</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> flask<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="二、最简单的栗子"><a href="#二、最简单的栗子" class="headerlink" title="二、最简单的栗子"></a>二、最简单的栗子</h2><h3 id="主代码"><a href="#主代码" class="headerlink" title="主代码"></a>主代码</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""导入类flask.Flask"""</span><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token triple-quoted-string string">"""创建实例解析"""</span><span class="token triple-quoted-string string">"""实例化创建一个Flask应用，第一个参数是Flask应用的名称。__name__是一个标识Python模块的名字的变量：·如果当前模块是主模块，那么此模块名字就是__main__；·如果当前模块是被import的，则此模块名字为文件名。"""</span>app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""装饰器解析"""</span><span class="token triple-quoted-string string">"""·定义hello_world函数，它返回一段html文本；·app.route("/")返回一个装饰器，装饰器来为函数hello_world绑定对应的URL（路由）；·当用户在浏览器访问这个URL的时候，就会出发这个函数，获取返回值。"""</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hello_world</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"Hello World!"</span><span class="token triple-quoted-string string">"""主函数解析"""</span><span class="token triple-quoted-string string">"""如果当前模块儿是主模块，则变量__name为'__main__'，此时调用run()方法启动Flask应用"""</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>port<span class="token operator">=</span><span class="token number">8000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="运行报错："><a href="#运行报错：" class="headerlink" title="运行报错："></a>运行报错：</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""以一种访问权限不允许的方式做了一个访问套接字的尝试。"""</span><span class="token comment"># 原因：</span><span class="token comment"># --端口被占用</span><span class="token comment"># 切换端口：app.run(port=8080)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="运行输出："><a href="#运行输出：" class="headerlink" title="运行输出："></a>运行输出：</h3><img src="/2023/11/19/python/flask/flask-2-di-yi-ge-flask-application/0.png" class=""><h3 id="浏览器访问："><a href="#浏览器访问：" class="headerlink" title="浏览器访问："></a>浏览器访问：</h3><img src="/2023/11/19/python/flask/flask-2-di-yi-ge-flask-application/1.png" class=""><p>遇到设置不生效：<a href="https://www.cnblogs.com/poloyy/p/14993520.html">https://www.cnblogs.com/poloyy/p/14993520.html </a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask-1：介绍</title>
      <link href="/2023/11/18/python/flask/flask-1-jie-shao/"/>
      <url>/2023/11/18/python/flask/flask-1-jie-shao/</url>
      
        <content type="html"><![CDATA[<h1 id="Flask-1：介绍"><a href="#Flask-1：介绍" class="headerlink" title="Flask-1：介绍"></a>Flask-1：介绍</h1><h2 id="一、Flask简介"><a href="#一、Flask简介" class="headerlink" title="一、Flask简介"></a>一、Flask简介</h2><ul><li><strong>轻</strong>：Flask是一个轻量级web框架，使用python语言编写；</li><li><strong>易</strong>：较其他同类型框架更为灵活、轻便、容易上手；</li><li><strong>快</strong>：小型团队在短时间内就可以完成功能丰富的中小型网站或web服务的实现。</li></ul><h3 id="定制化"><a href="#定制化" class="headerlink" title="定制化"></a>定制化</h3><ul><li>Flask具有很强的定制性，用户可以根据自己的需求来添加相应的功能；</li><li>在保持核心功能简单的同时实现功能的丰富与扩展；</li><li>其强大的插件库可以让用户实现个性化的网站定制，开发出功能强大的网站。</li></ul><h2 id="二、Flask的特点"><a href="#二、Flask的特点" class="headerlink" title="二、Flask的特点"></a>二、Flask的特点</h2><h3 id="1、微框架"><a href="#1、微框架" class="headerlink" title="1、微框架"></a>1、微框架</h3><p>Flask是一个python实现的web开发微框架，但是这个“微”并<strong>不</strong>代表着Flask功能比较简陋、有所欠缺。</p><h4 id="微框架中的“微”意味着"><a href="#微框架中的“微”意味着" class="headerlink" title="微框架中的“微”意味着"></a>微框架中的“微”意味着</h4><ul><li>Flask旨在保持核心简单而易于扩展；</li><li>Flask不会替用户做出太多决策，比如使用何种数据库；</li><li>Flask的选项（比如使用何种模板引擎）通常有多个，用户很容易替换。</li></ul><h3 id="2、Flask的扩展性"><a href="#2、Flask的扩展性" class="headerlink" title="2、Flask的扩展性"></a>2、Flask的扩展性</h3><ul><li>默认情况下，Flask <strong>不包含</strong>数据库抽象层、模板引擎、身份认证或其他任何已有多种库可以胜任的功能；</li><li>但是Flask支持用<strong>扩展</strong>来给应用添加这些功能，应用程序可以很方便的集成这些扩展；</li><li>众多的扩展提供了数据库集成、表单认证、上传处理、各种各样的开放认证技术等功能。</li></ul><h4 id="Flask与扩展之间的关系"><a href="#Flask与扩展之间的关系" class="headerlink" title="Flask与扩展之间的关系"></a>Flask与扩展之间的关系</h4><img src="/2023/11/18/python/flask/flask-1-jie-shao/0.png" class=""><h3 id="3、约定优于配置"><a href="#3、约定优于配置" class="headerlink" title="3、约定优于配置"></a>3、约定优于配置</h3><ul><li>设计不好的框架通常需要多个配置文件，每个都有许多设置选项，程序员需要记忆大量的参数配置；</li><li>但Flask遵循<strong>约定优于配置</strong>（Convention Over Configuration），也称作按约定编程是一种<strong>软件设计范式</strong>；</li><li>目的在于减少软件开发人员所需要做出的约定的数量，从而将开发变得简单，而又不失去其中的灵活性，开发人员仅仅需要规定应用中不符合约定的部分；</li><li>Flask存在有众多的配置选项，但是在最初始状况下，它们都有一个常用的默认值，并会遵循一些惯例；</li><li>例如：按照惯例，模板和静态文件分别存储在应用python源代码树下的子目录templates和static里；</li><li>虽然这个配置可以修改，但通常不必这么做，尤其是在刚开始学习的时候。</li></ul><h2 id="三、Flask与Django的比较"><a href="#三、Flask与Django的比较" class="headerlink" title="三、Flask与Django的比较"></a>三、Flask与Django的比较</h2><h3 id="两个框架的区别"><a href="#两个框架的区别" class="headerlink" title="两个框架的区别"></a>两个框架的区别</h3><p>其实两者最主要的区别在于：Django功能大而全，Flask只包含基本的功能。</p><ul><li><p>Django采用<strong>一站式解决</strong>的思路，Django集成有模板、表单、路由、认证、基本的数据库管理等内建功能，开发者不用在选择应用的基础设施上花费大量的时间；</p></li><li><p>Django就像一个装潢好的房子（如下图），它提供了各种家具，直接入住即可；</p><img src="/2023/11/18/python/flask/flask-1-jie-shao/1.png" class=""></li><li><p>和Django不同，Flask只提供了<strong>最核心</strong>的功能，轻巧、简洁，通过定制第三方扩展来实现具体功能；</p></li><li><p>默认情况下，不包含数据库抽象、用户认证、表单认证、发邮件等其他web框架经常包括的功能；</p></li><li><p>Flask依赖用各种灵活的扩展（比如邮件Flask Mail，用户认证Flask Login，数据库Flask SQLAlchemy）来给web应用添加额外功能；</p></li><li><p>Flask就像一个没有装潢的毛坯房（如下图），用户需要自己选择各种家具才能入住。</p></li></ul><h2 id="四、新手入门推荐"><a href="#四、新手入门推荐" class="headerlink" title="四、新手入门推荐"></a>四、新手入门推荐</h2><ul><li>Flask是一个轻量级的web框架，只提供核心技术，较其他同类型框架更为轻便容易上手，适用于小型团队在短时间内就可以完成功能丰富的中小型网站。</li><li>与之相比，Django是一个重量级的web框架，内置许多常用的扩展，这些功能是由官方和社区共同维护的，其<strong>健壮性</strong>高，有利于保障项目质量。</li><li>推荐新手学习Flask框架，可以先从Flask开始，后使用Django重构，因为如果直接上Django，作为新手，面对Django内置各种繁杂功能产生很多疑惑。</li><li>就如同搭积木，如果直接给你一个搭好的模型，再拆开后（逆向过程），让你指出每块积木的作用，你可能会有疑惑。但是让你亲自一步步去搭好后（正向过程），再去拆解模型，你对每块积木的都会有不错的了解。</li><li>Flask开发就像是这个正向过程，自己一步一步去集成想要的扩展，完善网站，每一步都亲自动手做一遍，有助于理解web开发的很多概念。</li><li>Django开发就像是逆向过程，Django已经帮我们集成了许多常用的扩展，用户要做的就是去学习这些扩展的使用。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FastAPI-13：详解Fields</title>
      <link href="/2023/11/17/python/fastapi/fastapi-13-xiang-jie-fields/"/>
      <url>/2023/11/17/python/fastapi/fastapi-13-xiang-jie-fields/</url>
      
        <content type="html"><![CDATA[<h1 id="FastAPI-13：详解Fields"><a href="#FastAPI-13：详解Fields" class="headerlink" title="FastAPI-13：详解Fields"></a>FastAPI-13：详解Fields</h1><h2 id="针对Pydantic-Model内部字段添加额外校验和元数据"><a href="#针对Pydantic-Model内部字段添加额外校验和元数据" class="headerlink" title="针对Pydantic Model内部字段添加额外校验和元数据"></a>针对Pydantic Model内部字段添加额外校验和元数据</h2><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>前面讲了Query、Path、Body，均可以对某个字段进行额外的校验和添加元数据；</li><li>这一篇来讲Fields，它针对 Pydantic Model 内部字段进行额外的校验和添加元数据。</li></ul><h2 id="Fields"><a href="#Fields" class="headerlink" title="Fields"></a>Fields</h2><ul><li>它是Pydantic提供的方法，并不是 FastAPI 提供的哦；</li><li>该方法返回了一个实例对象，是 Pydantic 中 FieldInfo 类的实例对象。</li></ul><img src="/2023/11/17/python/fastapi/fastapi-13-xiang-jie-fields/FastAPI-13%EF%BC%9A%E8%AF%A6%E8%A7%A3Fields-1.png" class=""><h3 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h3><p>FastAPI提供的Query、Path等其他公共Param类和Body类，都是Pydantic的FieldInfo类的子类</p><img src="/2023/11/17/python/fastapi/fastapi-13-xiang-jie-fields/FastAPI-13%EF%BC%9A%E8%AF%A6%E8%A7%A3Fields-2.png" class=""><img src="/2023/11/17/python/fastapi/fastapi-13-xiang-jie-fields/FastAPI-13%EF%BC%9A%E8%AF%A6%E8%A7%A3Fields-3.png" class=""><img src="/2023/11/17/python/fastapi/fastapi-13-xiang-jie-fields/FastAPI-13%EF%BC%9A%E8%AF%A6%E8%A7%A3Fields-4.png" class=""><p>Query、Path继承Param、Param继承FieldInfo</p><img src="/2023/11/17/python/fastapi/fastapi-13-xiang-jie-fields/FastAPI-13%EF%BC%9A%E8%AF%A6%E8%A7%A3Fields-5.png" class=""><p>Body直接继承FieldInfo</p><h3 id="简单的栗子"><a href="#简单的栗子" class="headerlink" title="简单的栗子"></a>简单的栗子</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> Optional<span class="token keyword">import</span> uvicorn<span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token punctuation">,</span> Body<span class="token keyword">from</span> pydantic <span class="token keyword">import</span> BaseModel<span class="token punctuation">,</span> Fieldapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Item</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    name<span class="token punctuation">:</span> <span class="token builtin">str</span>    description<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span> <span class="token operator">=</span> Field<span class="token punctuation">(</span>        default<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>        title<span class="token operator">=</span><span class="token string">"标题"</span><span class="token punctuation">,</span>        description<span class="token operator">=</span><span class="token string">"The description of the item"</span><span class="token punctuation">,</span>        max_length<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span>    price<span class="token punctuation">:</span> <span class="token builtin">float</span> <span class="token operator">=</span> Field<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> ge<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> description<span class="token operator">=</span><span class="token string">"需要大于0"</span><span class="token punctuation">)</span>    tax<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span><span class="token builtin">float</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>put</span><span class="token punctuation">(</span><span class="token string">"/items/{item_id}"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">update_item</span><span class="token punctuation">(</span>        item_id<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span>        item<span class="token punctuation">:</span> Item <span class="token operator">=</span> Body<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> embed<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    results <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> item_id<span class="token punctuation">,</span> <span class="token string">"item"</span><span class="token punctuation">:</span> item<span class="token punctuation">}</span>    <span class="token keyword">return</span> results<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    uvicorn<span class="token punctuation">.</span>run<span class="token punctuation">(</span>app<span class="token operator">=</span><span class="token string">'eleventh-11:app'</span><span class="token punctuation">,</span> host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">8080</span><span class="token punctuation">,</span> debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="正确传递参数的请求结果："><a href="#正确传递参数的请求结果：" class="headerlink" title="正确传递参数的请求结果："></a>正确传递参数的请求结果：</h4><img src="/2023/11/17/python/fastapi/fastapi-13-xiang-jie-fields/FastAPI-13%EF%BC%9A%E8%AF%A6%E8%A7%A3Fields-6.png" class=""><h4 id="查看-Swagger-API-文档："><a href="#查看-Swagger-API-文档：" class="headerlink" title="查看 Swagger API 文档："></a>查看 <code>Swagger API</code> 文档：</h4><img src="/2023/11/17/python/fastapi/fastapi-13-xiang-jie-fields/FastAPI-13%EF%BC%9A%E8%AF%A6%E8%A7%A3Fields-7.png" class=""><p>JSON Schema对加了 Fields 的字段会有详细的描述</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> FasAPI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> FastAPI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FastAPI-12：重名Pydantic Model会导致OpenAPI报错</title>
      <link href="/2023/11/16/python/fastapi/fastapi-12-chong-ming-pydantic-model-hui-dao-zhi-openapi-bao-cuo/"/>
      <url>/2023/11/16/python/fastapi/fastapi-12-chong-ming-pydantic-model-hui-dao-zhi-openapi-bao-cuo/</url>
      
        <content type="html"><![CDATA[<h1 id="FastAPI-12：重名Pydantic-Model会导致OpenAPI报错"><a href="#FastAPI-12：重名Pydantic-Model会导致OpenAPI报错" class="headerlink" title="FastAPI-12：重名Pydantic Model会导致OpenAPI报错"></a>FastAPI-12：重名Pydantic Model会导致OpenAPI报错</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在一个 Python 模块中，如果包含两个同名的 Pydantic Model，访问 /docs 会报错哦！！！</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> Optional<span class="token keyword">import</span> uvicorn<span class="token keyword">from</span> fastapi <span class="token keyword">import</span> Body<span class="token punctuation">,</span> FastAPI<span class="token keyword">from</span> pydantic <span class="token keyword">import</span> BaseModelapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Item</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    name<span class="token punctuation">:</span> <span class="token builtin">str</span>    description<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span>    price<span class="token punctuation">:</span> <span class="token builtin">float</span>    tax<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span><span class="token builtin">float</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token keyword">class</span> <span class="token class-name">Item</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    it<span class="token punctuation">:</span> <span class="token builtin">str</span>    address<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    uvicorn<span class="token punctuation">.</span>run<span class="token punctuation">(</span>app<span class="token operator">=</span><span class="token string">'tenth-10:app'</span><span class="token punctuation">,</span> host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">8080</span><span class="token punctuation">,</span> debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="IDE就提示了"><a href="#IDE就提示了" class="headerlink" title="IDE就提示了"></a>IDE就提示了</h4><img src="/2023/11/16/python/fastapi/fastapi-12-chong-ming-pydantic-model-hui-dao-zhi-openapi-bao-cuo/FastAPI-12%EF%BC%9A%E9%87%8D%E5%90%8DPydantic%20Model%E4%BC%9A%E5%AF%BC%E8%87%B4OpenAPI%E6%8A%A5%E9%94%99-1.png" class=""><h4 id="启动uvicorn，并访问-docs："><a href="#启动uvicorn，并访问-docs：" class="headerlink" title="启动uvicorn，并访问 /docs："></a>启动uvicorn，并访问 /docs：</h4><img src="/2023/11/16/python/fastapi/fastapi-12-chong-ming-pydantic-model-hui-dao-zhi-openapi-bao-cuo/FastAPI-12%EF%BC%9A%E9%87%8D%E5%90%8DPydantic%20Model%E4%BC%9A%E5%AF%BC%E8%87%B4OpenAPI%E6%8A%A5%E9%94%99-2.png" class=""><p>**注意啦！一个 Python 模块中不要有重名的 Pydantic Model 哦！！ **</p><p>**注意啦！一个 Python 模块中不要有重名的 Pydantic Model 哦！！ **</p><p>**注意啦！一个 Python 模块中不要有重名的 Pydantic Model 哦！！ **</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> FasAPI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> FastAPI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FastAPI-11：函数参数类型是list参数</title>
      <link href="/2023/11/15/python/fastapi/fastapi-11-han-shu-can-shu-lei-xing-shi-list-can-shu/"/>
      <url>/2023/11/15/python/fastapi/fastapi-11-han-shu-can-shu-lei-xing-shi-list-can-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="FastAPI-11：函数参数类型是list参数"><a href="#FastAPI-11：函数参数类型是list参数" class="headerlink" title="FastAPI-11：函数参数类型是list参数"></a>FastAPI-11：函数参数类型是list参数</h1><h2 id="函数参数类型是列表，但不使用typing中的list，而使用list，会怎样？"><a href="#函数参数类型是列表，但不使用typing中的list，而使用list，会怎样？" class="headerlink" title="函数参数类型是列表，但不使用typing中的list，而使用list，会怎样？"></a>函数参数类型是列表，但不使用typing中的list，而使用list，会怎样？</h2><h3 id="使用typing中的List、Set、Tuple的栗子"><a href="#使用typing中的List、Set、Tuple的栗子" class="headerlink" title="使用typing中的List、Set、Tuple的栗子"></a>使用typing中的List、Set、Tuple的栗子</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> Optional<span class="token punctuation">,</span> List<span class="token punctuation">,</span> Tuple<span class="token punctuation">,</span> Set<span class="token keyword">import</span> uvicorn<span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token punctuation">,</span> Bodyapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>put</span><span class="token punctuation">(</span><span class="token string">'/items/{item_id}'</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">update_item</span><span class="token punctuation">(</span>    list_<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span> <span class="token operator">=</span> Body<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    tuple_<span class="token punctuation">:</span> Tuple<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span> <span class="token operator">=</span> Body<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    set_<span class="token punctuation">:</span> Set<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span> <span class="token operator">=</span> Body<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    results <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'list_'</span><span class="token punctuation">:</span> list_<span class="token punctuation">,</span> <span class="token string">'tuple_'</span><span class="token punctuation">:</span> tuple_<span class="token punctuation">,</span> <span class="token string">'set_'</span><span class="token punctuation">:</span> set_<span class="token punctuation">}</span>    <span class="token keyword">return</span> results<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    uvicorn<span class="token punctuation">.</span>run<span class="token punctuation">(</span>app<span class="token operator">=</span><span class="token string">'ninth-9:app'</span><span class="token punctuation">,</span> host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">8080</span><span class="token punctuation">,</span> debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="假设里面的元素传了非int且无法自动转换成int："><a href="#假设里面的元素传了非int且无法自动转换成int：" class="headerlink" title="假设里面的元素传了非int且无法自动转换成int："></a>假设里面的元素传了非int且无法自动转换成int：</h4><ul><li>typing的List、Set、Tuple都会指定里面参数的数据类型；</li><li>而FastAPI会对声明了数据类型的数据进行数据校验，所以会针对序列里面的参数进行数据校验；</li><li>如果校验失败，会报一个友好的提示。</li></ul><img src="/2023/11/15/python/fastapi/fastapi-11-han-shu-can-shu-lei-xing-shi-list-can-shu/FastAPI-11%EF%BC%9A%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E7%B1%BB%E5%9E%8B%E6%98%AFlist%E5%8F%82%E6%95%B0-1.png" class=""><h3 id="使用list、set、tuple的栗子"><a href="#使用list、set、tuple的栗子" class="headerlink" title="使用list、set、tuple的栗子"></a>使用list、set、tuple的栗子</h3><p>用Python自带的list、set、tuple类，是无法指定序列里面参数的数据类型，所以FastAPI并不会针对里面的参数进行数据校验</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>put</span><span class="token punctuation">(</span><span class="token string">'/item/{item_id}'</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">update_item</span><span class="token punctuation">(</span>    list_<span class="token punctuation">:</span> <span class="token builtin">list</span> <span class="token operator">=</span> Body<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    tuple_<span class="token punctuation">:</span> <span class="token builtin">tuple</span> <span class="token operator">=</span> Body<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    set_<span class="token punctuation">:</span> <span class="token builtin">set</span> <span class="token operator">=</span> Body<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    results <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'list_'</span><span class="token punctuation">:</span> list_<span class="token punctuation">,</span> <span class="token string">'tuple_'</span><span class="token punctuation">:</span> tuple_<span class="token punctuation">,</span> <span class="token string">'set_'</span><span class="token punctuation">:</span> set_<span class="token punctuation">}</span>    <span class="token keyword">return</span> results<span class="token comment"># 这样就变成了传啥类型的值都可以了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h4><img src="/2023/11/15/python/fastapi/fastapi-11-han-shu-can-shu-lei-xing-shi-list-can-shu/FastAPI-11%EF%BC%9A%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E7%B1%BB%E5%9E%8B%E6%98%AFlist%E5%8F%82%E6%95%B0-2.png" class=""><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>要充分利用FastAPI的优势，强烈建议使用typing的List、Set、Tuple来表示列表、集合、元祖类型。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> FasAPI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> FastAPI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FastAPI-10：详解Body</title>
      <link href="/2023/11/14/python/fastapi/fastapi-10-xiang-jie-body/"/>
      <url>/2023/11/14/python/fastapi/fastapi-10-xiang-jie-body/</url>
      
        <content type="html"><![CDATA[<h1 id="FastAPI-10：详解Body"><a href="#FastAPI-10：详解Body" class="headerlink" title="FastAPI-10：详解Body"></a>FastAPI-10：详解Body</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>上一篇有讲到将参数类型指定为<code>Pydantic Model</code>，这样FastAPI会解析它为一个Request Body；</li><li>那单类型（int、float、str、bool…）参数可以成为Request Body的一部分吗？答案显然是肯定的；</li><li>通过Body函数即可完成，和Path、Query有异曲同工之妙。</li></ul><h2 id="Body"><a href="#Body" class="headerlink" title="Body"></a>Body</h2><ul><li>主要作用：可以将但类型的参数成为Request Body的一部分，即从查询参数变成请求体参数；</li><li>和Query、Path提供的额外校验、元数据是基本一致的（多了个embed参数，最后详解）。</li></ul><img src="/2023/11/14/python/fastapi/fastapi-10-xiang-jie-body/FastAPI-10%EF%BC%9A%E8%AF%A6%E8%A7%A3Body-1.png" class=""><h3 id="Body的简单栗子"><a href="#Body的简单栗子" class="headerlink" title="Body的简单栗子"></a>Body的简单栗子</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> Optional<span class="token keyword">import</span> uvicorn<span class="token keyword">from</span> fastapi <span class="token keyword">import</span> Body<span class="token punctuation">,</span> FastAPI<span class="token keyword">from</span> pydantic <span class="token keyword">import</span> BaseModelapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Item</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    name<span class="token punctuation">:</span> <span class="token builtin">str</span>    description<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span>    price<span class="token punctuation">:</span> <span class="token builtin">float</span>    tax<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span><span class="token builtin">float</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    username<span class="token punctuation">:</span> <span class="token builtin">str</span>    full_name<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>put</span><span class="token punctuation">(</span><span class="token string">'/items/{item_id}'</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">update_item</span><span class="token punctuation">(</span>    item_id<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span>    item<span class="token punctuation">:</span> Item<span class="token punctuation">,</span>    user<span class="token punctuation">:</span> User<span class="token punctuation">,</span>    importance<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> Body<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    results <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'item_id'</span><span class="token punctuation">:</span> item_id<span class="token punctuation">,</span> <span class="token string">'item'</span><span class="token punctuation">:</span> item<span class="token punctuation">,</span> <span class="token string">'user'</span><span class="token punctuation">:</span> user<span class="token punctuation">,</span> <span class="token string">'importance'</span><span class="token punctuation">:</span> importance<span class="token punctuation">}</span>    <span class="token keyword">return</span> results<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    uvicorn<span class="token punctuation">.</span>run<span class="token punctuation">(</span>app<span class="token operator">=</span><span class="token string">'eighth-8:app'</span><span class="token punctuation">,</span> host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">8080</span><span class="token punctuation">,</span> debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="正确传参的请求结果："><a href="#正确传参的请求结果：" class="headerlink" title="正确传参的请求结果："></a>正确传参的请求结果：</h4><img src="/2023/11/14/python/fastapi/fastapi-10-xiang-jie-body/FastAPI-10%EF%BC%9A%E8%AF%A6%E8%A7%A3Body-2.png" class=""><p><strong>传递的参数中多了importance参数</strong></p><h4 id="查看Swagger-API-文档："><a href="#查看Swagger-API-文档：" class="headerlink" title="查看Swagger API 文档："></a>查看<code>Swagger API</code> 文档：</h4><img src="/2023/11/14/python/fastapi/fastapi-10-xiang-jie-body/FastAPI-10%EF%BC%9A%E8%AF%A6%E8%A7%A3Body-3.png" class=""><h3 id="Query、Path、Body终极混用"><a href="#Query、Path、Body终极混用" class="headerlink" title="Query、Path、Body终极混用"></a>Query、Path、Body终极混用</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> Path<span class="token punctuation">,</span> Query<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>put</span><span class="token punctuation">(</span><span class="token string">"/item_all/{item_id}"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">update_item</span><span class="token punctuation">(</span>        <span class="token operator">*</span><span class="token punctuation">,</span>        item_id<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> Path<span class="token punctuation">(</span>default<span class="token operator">=</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> description<span class="token operator">=</span><span class="token string">"路径参数"</span><span class="token punctuation">,</span> gt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> lt<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        address<span class="token punctuation">:</span> <span class="token builtin">str</span> <span class="token operator">=</span> Query<span class="token punctuation">(</span>default<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> description<span class="token operator">=</span><span class="token string">"查询参数"</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        item<span class="token punctuation">:</span> Item<span class="token punctuation">,</span>        user<span class="token punctuation">:</span> User<span class="token punctuation">,</span>        importance<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> Body<span class="token punctuation">(</span>default<span class="token operator">=</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> description<span class="token operator">=</span><span class="token string">"请求体"</span><span class="token punctuation">,</span> ge<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> le<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    results <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"item_id"</span><span class="token punctuation">:</span> item_id<span class="token punctuation">,</span>        <span class="token string">"address"</span><span class="token punctuation">:</span> address<span class="token punctuation">,</span>        <span class="token string">"item"</span><span class="token punctuation">:</span> item<span class="token punctuation">,</span>        <span class="token string">"user"</span><span class="token punctuation">:</span> user<span class="token punctuation">,</span>        <span class="token string">"importance"</span><span class="token punctuation">:</span> importance    <span class="token punctuation">}</span>    <span class="token keyword">return</span> results<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="正确传参的结果："><a href="#正确传参的结果：" class="headerlink" title="正确传参的结果："></a>正确传参的结果：</h4><img src="/2023/11/14/python/fastapi/fastapi-10-xiang-jie-body/FastAPI-10%EF%BC%9A%E8%AF%A6%E8%A7%A3Body-4.png" class=""><h4 id="查看Swagger-API文档："><a href="#查看Swagger-API文档：" class="headerlink" title="查看Swagger API文档："></a>查看<code>Swagger API</code>文档：</h4><img src="/2023/11/14/python/fastapi/fastapi-10-xiang-jie-body/FastAPI-10%EF%BC%9A%E8%AF%A6%E8%A7%A3Body-5.png" class=""><h3 id="Body设置的元数据会在JSON-Schema中体现"><a href="#Body设置的元数据会在JSON-Schema中体现" class="headerlink" title="Body设置的元数据会在JSON Schema中体现"></a>Body设置的元数据会在JSON Schema中体现</h3><img src="/2023/11/14/python/fastapi/fastapi-10-xiang-jie-body/FastAPI-10%EF%BC%9A%E8%AF%A6%E8%A7%A3Body-6.png" class=""><h2 id="Body-中的embed参数"><a href="#Body-中的embed参数" class="headerlink" title="Body()中的embed参数"></a>Body()中的<code>embed</code>参数</h2><h3 id="为什么要讲这个embed参数"><a href="#为什么要讲这个embed参数" class="headerlink" title="为什么要讲这个embed参数"></a>为什么要讲这个<code>embed</code>参数</h3><p>当函数只有一个参数指定了Pydantic Model且没有其他Body传参时，传参的时候请求体可以不指定参数名</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>put</span><span class="token punctuation">(</span><span class="token string">'/item/{item_id}'</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">update_item</span><span class="token punctuation">(</span>    item_id<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span>    item<span class="token punctuation">:</span> Item<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">'item_id'</span><span class="token punctuation">:</span> item_id<span class="token punctuation">,</span> <span class="token string">'item'</span><span class="token punctuation">:</span> Item<span class="token punctuation">}</span><span class="token comment"># 默认并不需要指定item为字段名</span><span class="token comment"># 如果想要指定item为请求体的字段名，就是通过embed参数达到目的了</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>put</span><span class="token punctuation">(</span><span class="token string">"/items/{item_id}"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">update_item</span><span class="token punctuation">(</span>        <span class="token operator">*</span><span class="token punctuation">,</span>        item_id<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span>        <span class="token comment"># 将 embed 设置为 True</span>        item<span class="token punctuation">:</span> Item <span class="token operator">=</span> Body<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> embed<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    results <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> item_id<span class="token punctuation">,</span> <span class="token string">"item"</span><span class="token punctuation">:</span> item<span class="token punctuation">}</span>    <span class="token keyword">return</span> results<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="正确传参的请求结果：-1"><a href="#正确传参的请求结果：-1" class="headerlink" title="正确传参的请求结果："></a>正确传参的请求结果：</h4><img src="/2023/11/14/python/fastapi/fastapi-10-xiang-jie-body/FastAPI-10%EF%BC%9A%E8%AF%A6%E8%A7%A3Body-7.png" class=""><h4 id="不传item字段的请求结果："><a href="#不传item字段的请求结果：" class="headerlink" title="不传item字段的请求结果："></a>不传item字段的请求结果：</h4><img src="/2023/11/14/python/fastapi/fastapi-10-xiang-jie-body/FastAPI-10%EF%BC%9A%E8%AF%A6%E8%A7%A3Body-8.png" class=""><h4 id="查看-Swagger-API-文档："><a href="#查看-Swagger-API-文档：" class="headerlink" title="查看 Swagger API 文档："></a>查看 <code>Swagger API</code> 文档：</h4><img src="/2023/11/14/python/fastapi/fastapi-10-xiang-jie-body/FastAPI-10%EF%BC%9A%E8%AF%A6%E8%A7%A3Body-9.png" class="">]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> FasAPI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> FastAPI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FastAPI-9：多个Request Body</title>
      <link href="/2023/11/13/python/fastapi/fastapi-9-duo-ge-request-body/"/>
      <url>/2023/11/13/python/fastapi/fastapi-9-duo-ge-request-body/</url>
      
        <content type="html"><![CDATA[<h1 id="FastAPI-9：多个Request-Body"><a href="#FastAPI-9：多个Request-Body" class="headerlink" title="FastAPI-9：多个Request Body"></a>FastAPI-9：多个Request Body</h1><h2 id="Path、Query、Request-Body混合使用"><a href="#Path、Query、Request-Body混合使用" class="headerlink" title="Path、Query、Request Body混合使用"></a>Path、Query、Request Body混合使用</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token punctuation">,</span> Path<span class="token punctuation">,</span> Query<span class="token keyword">from</span> typing <span class="token keyword">import</span> Optional<span class="token keyword">from</span> pydantic <span class="token keyword">import</span> BaseModel<span class="token keyword">import</span> uvicorn app <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Item</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    name<span class="token punctuation">:</span> <span class="token builtin">str</span>    description<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span>    price<span class="token punctuation">:</span> <span class="token builtin">float</span>    tax<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span><span class="token builtin">float</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>put</span><span class="token punctuation">(</span><span class="token string">'/items/{item_id}'</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">update_item</span><span class="token punctuation">(</span>    <span class="token operator">*</span><span class="token punctuation">,</span>    item_id<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> Path<span class="token punctuation">(</span>default<span class="token operator">=</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> description<span class="token operator">=</span><span class="token string">'item_id'</span><span class="token punctuation">,</span> gt<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> lt<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> example<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span> <span class="token operator">=</span> Query<span class="token punctuation">(</span>default<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> description<span class="token operator">=</span><span class="token string">'查询参数'</span><span class="token punctuation">,</span> min_length<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> example<span class="token operator">=</span><span class="token string">'示例值'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    item<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>Item<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    results <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'item_id'</span><span class="token punctuation">:</span> item_id<span class="token punctuation">}</span>    <span class="token keyword">if</span> name<span class="token punctuation">:</span>        results<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> name<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> item<span class="token punctuation">:</span>        results<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'item'</span><span class="token punctuation">:</span> item<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> results<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    uvicorn<span class="token punctuation">.</span>run<span class="token punctuation">(</span>app<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">8080</span><span class="token punctuation">,</span> <span class="token builtin">reload</span><span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment"># 除了路径参数item_id是必传的，查询参数name和请求体item都是可选非必传</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="只传路径参数的请求结果："><a href="#只传路径参数的请求结果：" class="headerlink" title="只传路径参数的请求结果："></a>只传路径参数的请求结果：</h4><img src="/2023/11/13/python/fastapi/fastapi-9-duo-ge-request-body/FastAPI-9%EF%BC%9A%E5%A4%9A%E4%B8%AARequest%20Body-1.png" class=""><h4 id="路径参数、查询参数、请求体均传递的请求结果："><a href="#路径参数、查询参数、请求体均传递的请求结果：" class="headerlink" title="路径参数、查询参数、请求体均传递的请求结果："></a>路径参数、查询参数、请求体均传递的请求结果：</h4><img src="/2023/11/13/python/fastapi/fastapi-9-duo-ge-request-body/FastAPI-9%EF%BC%9A%E5%A4%9A%E4%B8%AARequest%20Body-2.png" class=""><h4 id="查看-Swagger-API-文档："><a href="#查看-Swagger-API-文档：" class="headerlink" title="查看 Swagger API 文档："></a>查看 <code>Swagger API</code> 文档：</h4><img src="/2023/11/13/python/fastapi/fastapi-9-duo-ge-request-body/FastAPI-9%EF%BC%9A%E5%A4%9A%E4%B8%AARequest%20Body-3.png" class=""><h2 id="多个-Request-Body"><a href="#多个-Request-Body" class="headerlink" title="多个 Request Body"></a>多个 Request Body</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 自定义第2个模型类</span><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    username<span class="token punctuation">:</span> <span class="token builtin">str</span>    full_name<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>put</span><span class="token punctuation">(</span><span class="token string">'/item/{item_id}'</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">update_item</span><span class="token punctuation">(</span>    item_id<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span>    item<span class="token punctuation">:</span> Item<span class="token punctuation">,</span>  <span class="token comment"># 指定第一个 Model 类型</span>    user<span class="token punctuation">:</span> User<span class="token punctuation">,</span>  <span class="token comment"># 指定第二个 Model 类型</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    results <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'item_id'</span><span class="token punctuation">:</span> item_id<span class="token punctuation">,</span>        <span class="token string">'item'</span><span class="token punctuation">:</span> item<span class="token punctuation">,</span>        <span class="token string">'user'</span><span class="token punctuation">:</span> user    <span class="token punctuation">}</span>    <span class="token keyword">return</span> results<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>这种情况下，FastAPI会注意到函数中有两个 <code>Request Body</code>，因为这 <code>item、name</code> 两个参数都指定了 <code>Pydantic</code> 模型；</li><li>FastAPI将使用参数名作为 <code>Request Body</code> 中的键（字段名称）。</li></ul><h4 id="正确传参的结果："><a href="#正确传参的结果：" class="headerlink" title="正确传参的结果："></a>正确传参的结果：</h4><img src="/2023/11/13/python/fastapi/fastapi-9-duo-ge-request-body/FastAPI-9%EF%BC%9A%E5%A4%9A%E4%B8%AARequest%20Body-4.png" class=""><h4 id="查看-Swagger-API-文档：-1"><a href="#查看-Swagger-API-文档：-1" class="headerlink" title="查看 Swagger API 文档："></a>查看 <code>Swagger API</code> 文档：</h4><img src="/2023/11/13/python/fastapi/fastapi-9-duo-ge-request-body/FastAPI-9%EF%BC%9A%E5%A4%9A%E4%B8%AARequest%20Body-5.png" class="">]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> FasAPI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> FastAPI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FastAPI-8：请求体Request Body</title>
      <link href="/2023/11/12/python/fastapi/fastapi-8-qing-qiu-ti-request-body/"/>
      <url>/2023/11/12/python/fastapi/fastapi-8-qing-qiu-ti-request-body/</url>
      
        <content type="html"><![CDATA[<h1 id="FastAPI-8：请求体Request-Body"><a href="#FastAPI-8：请求体Request-Body" class="headerlink" title="FastAPI-8：请求体Request Body"></a>FastAPI-8：请求体Request Body</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>接口传参方式之一：通过发送请求体（Request Body）来传递请求数据；</li><li>在FastAPI，提倡使用 <code>Pydantic</code> 模型来定义请求体；</li><li>这篇文章会详细讲不使用 <code>Pydantic</code> 和 使用 <code>Pydantic</code> 发送请求体的栗子。</li></ul><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li>请求体并不是只有 <code>POST</code> 请求有，只不过POST更常见；</li><li>在 <code>PUT</code> 、<code>DELETE</code> 、<code>PATCH</code> 请求中都可以使用请求体；</li><li>其实，在 <code>GET</code> 请求中也可以使用请求体，不过仅适用于非常极端的情况下，<strong>而且 <code>Swagger API</code> 并不会显示 <code>GET</code> 请求的请求体</strong> 。</li></ul><h2 id="不使用Pydantic的栗子"><a href="#不使用Pydantic的栗子" class="headerlink" title="不使用Pydantic的栗子"></a>不使用Pydantic的栗子</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token keyword">import</span> uvicornapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>post</span><span class="token punctuation">(</span><span class="token string">'/items'</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_item</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> <span class="token builtin">dict</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">'item'</span><span class="token punctuation">:</span> item<span class="token punctuation">}</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    uvicorn<span class="token punctuation">.</span>run<span class="token punctuation">(</span>app<span class="token operator">=</span><span class="token string">'sixth-6:app'</span><span class="token punctuation">,</span> host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">8080</span><span class="token punctuation">,</span> debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment"># 指定查询参数的类型为dice</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="正确传参的结果："><a href="#正确传参的结果：" class="headerlink" title="正确传参的结果："></a>正确传参的结果：</h4><img src="/2023/11/12/python/fastapi/fastapi-8-qing-qiu-ti-request-body/FastAPI-8%EF%BC%9A%E8%AF%B7%E6%B1%82%E4%BD%93Request%20Body-1.png" class=""><h3 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h3><ul><li>用 <code>postman</code> 发起请求的话，一定要选 <code>JSON</code> 格式哦；</li><li>因为接收的是 <code>dict</code> ，所以 <code>FastAPI</code> 会自动将 <code>JSON</code> 字符串转换为 <code>dict</code>；</li><li>这种场景下，虽然查询参数叫 <code>item</code> ，但请求体的字段名可以随意取，字段数量也可以任意一个。</li></ul><h2 id="用Dict代替dict的栗子"><a href="#用Dict代替dict的栗子" class="headerlink" title="用Dict代替dict的栗子"></a>用Dict代替dict的栗子</h2><p>Dict 是 typing 模块提供的类，可以指定键值对的数据类型。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> Dict<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>post</span><span class="token punctuation">(</span><span class="token string">"/Dict/"</span><span class="token punctuation">)</span><span class="token comment"># 键为str，值为float</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">create_index_weights</span><span class="token punctuation">(</span>weights<span class="token punctuation">:</span> Dict<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> weights<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用-Dict-相比直接使用-dict-的好处"><a href="#使用-Dict-相比直接使用-dict-的好处" class="headerlink" title="使用 Dict 相比直接使用 dict 的好处"></a>使用 <code>Dict</code> 相比直接使用 <code>dict</code> 的好处</h3><p>声明为 <code>Dict[str, float]</code> ,FastAPI 会对每一个键值对都做数据校验，校验失败会有友好的错误提示。</p><h4 id="正确传参的请求结果："><a href="#正确传参的请求结果：" class="headerlink" title="正确传参的请求结果："></a>正确传参的请求结果：</h4><img src="/2023/11/12/python/fastapi/fastapi-8-qing-qiu-ti-request-body/FastAPI-8%EF%BC%9A%E8%AF%B7%E6%B1%82%E4%BD%93Request%20Body-2.png" class=""><h4 id="校验失败的请求结果："><a href="#校验失败的请求结果：" class="headerlink" title="校验失败的请求结果："></a>校验失败的请求结果：</h4><img src="/2023/11/12/python/fastapi/fastapi-8-qing-qiu-ti-request-body/FastAPI-8%EF%BC%9A%E8%AF%B7%E6%B1%82%E4%BD%93Request%20Body-3.png" class=""><h2 id="使用-Pydantic-模型（建议使用）"><a href="#使用-Pydantic-模型（建议使用）" class="headerlink" title="使用 Pydantic 模型（建议使用）"></a>使用 <code>Pydantic</code> 模型（建议使用）</h2><h3 id="实际栗子"><a href="#实际栗子" class="headerlink" title="实际栗子"></a>实际栗子</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> Optional<span class="token keyword">from</span> pydantic <span class="token keyword">import</span> BaseModel<span class="token comment"># 自定义一个Pydantic</span><span class="token keyword">class</span> <span class="token class-name">Item</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    name<span class="token punctuation">:</span> strm    description<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span>    price<span class="token punctuation">:</span> <span class="token builtin">float</span>    tax<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span><span class="token builtin">float</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token comment"># item 参数的类型指定为 Item 模型</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>post</span><span class="token punctuation">(</span><span class="token string">'/items/'</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">create_item</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> item<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="参数指定为-Pydantic-模型后，-FastAPI做了这几件事"><a href="#参数指定为-Pydantic-模型后，-FastAPI做了这几件事" class="headerlink" title="参数指定为 Pydantic 模型后， FastAPI做了这几件事"></a>参数指定为 <code>Pydantic</code> 模型后， FastAPI做了这几件事</h3><ol><li>将请求体识别为 <code>JSON</code> 字符串；</li><li>将字段值转换相应的类型（若需要）；</li><li>验证数据，如果验证失败，会返回一个清洗的错误，准确支出错误数据的位置和信息；</li><li><code>item</code> 会接收到完整的请求体数据，拥有所有属性及其类型，IDE也会给予对应的智能提示；</li><li>给 <code>Pydantic</code> 模型自动的生成 <code>JSON Schema</code> ，这些 <code>Schema</code> 会成为生成 <code>OpenAPI Schema</code> 的一部分，并显示在接口文档上。</li></ol><h4 id="正确传参的请求结果：-1"><a href="#正确传参的请求结果：-1" class="headerlink" title="正确传参的请求结果："></a>正确传参的请求结果：</h4><img src="/2023/11/12/python/fastapi/fastapi-8-qing-qiu-ti-request-body/FastAPI-8%EF%BC%9A%E8%AF%B7%E6%B1%82%E4%BD%93Request%20Body-4.png" class=""><p>正常传参，所有属性按指定的类型进行传数据</p><h3 id="字段类型自动转换"><a href="#字段类型自动转换" class="headerlink" title="字段类型自动转换"></a>字段类型自动转换</h3><ul><li><code>name: str</code> 传了bool类型的数据；</li><li><code>description: str</code> 传了float类型数据；</li><li><code>price: float</code> 传了int类型数据；</li><li><code>tax: float</code> 传了bool类型数据。</li></ul><h4 id="请求结果："><a href="#请求结果：" class="headerlink" title="请求结果："></a>请求结果：</h4><img src="/2023/11/12/python/fastapi/fastapi-8-qing-qiu-ti-request-body/FastAPI-8%EF%BC%9A%E8%AF%B7%E6%B1%82%E4%BD%93Request%20Body-5.png" class=""><p>FastAPi 会将传进来的值自动转换为指定类型的值</p><ul><li>将 true 转成 str 类型，即 “True”</li><li>将 12.22 转成 str 类型，即 “12.22”</li><li>将 12 转成 float 类型，即 12.0</li><li>将 true 转成 float 类型，即 1.0</li></ul><p>如果转换失败，则会报 <code>type_error</code> 错误（如图）</p><img src="/2023/11/12/python/fastapi/fastapi-8-qing-qiu-ti-request-body/FastAPI-8%EF%BC%9A%E8%AF%B7%E6%B1%82%E4%BD%93Request%20Body-6.png" class=""><h4 id="查看-Swagger-API-文档："><a href="#查看-Swagger-API-文档：" class="headerlink" title="查看 Swagger API 文档："></a>查看 <code>Swagger API</code> 文档：</h4><img src="/2023/11/12/python/fastapi/fastapi-8-qing-qiu-ti-request-body/FastAPI-8%EF%BC%9A%E8%AF%B7%E6%B1%82%E4%BD%93Request%20Body-7.png" class=""><p><code>model</code> 的 <code>JSON Schema</code> 会成为 <code>Swagger API</code> 文档的一部分</p><h4 id="IDE-智能提示"><a href="#IDE-智能提示" class="headerlink" title="IDE 智能提示"></a>IDE 智能提示</h4><p>因为知道name属性的类型是 str，所以IDE会智能提示str内置的方法</p><img src="/2023/11/12/python/fastapi/fastapi-8-qing-qiu-ti-request-body/FastAPI-8%EF%BC%9A%E8%AF%B7%E6%B1%82%E4%BD%93Request%20Body-8.png" class=""><h2 id="Request-Body-Path-Query-Parameters-综合栗子"><a href="#Request-Body-Path-Query-Parameters-综合栗子" class="headerlink" title="Request Body + Path + Query Parameters 综合栗子"></a>Request Body + Path + Query Parameters 综合栗子</h2><ul><li>可以同时声明请求体、路径参数、查询参数；</li><li>FastAPI可以识别出它们中的每一个，并从正确的位置获取到数据。</li></ul><h3 id="实际代码"><a href="#实际代码" class="headerlink" title="实际代码"></a>实际代码</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>post</span><span class="token punctuation">(</span><span class="token string">'/items/{item_id}'</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">create_item</span><span class="token punctuation">(</span>    <span class="token comment"># 路径参数</span>    item_id<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span>    <span class="token comment"># 请求体，模型类型</span>    item<span class="token punctuation">:</span> Item<span class="token punctuation">,</span>    <span class="token comment"># 查询参数</span>    name<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'item_id'</span><span class="token punctuation">:</span> item_id<span class="token punctuation">,</span> <span class="token operator">**</span>item<span class="token punctuation">.</span>dice<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token keyword">if</span> name<span class="token punctuation">:</span>        <span class="token comment"># 如果查询参数 name 不为空，则替换掉 item 参数里面的 name 属性</span>        result<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> name<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="FastAPI识别参数的逻辑"><a href="#FastAPI识别参数的逻辑" class="headerlink" title="FastAPI识别参数的逻辑"></a>FastAPI识别参数的逻辑</h3><ul><li>如果参数也在路径中声明，它将解释为路径参数【item_id】；</li><li>如果参数是单数类型（如int、float、str、bool等），它将被解释为查询参数【name】；</li><li>如果参数被声明为Pydantic模型的类型，它将被解释为请求体参数【item】。</li></ul><h4 id="正确传参的请求结果：-2"><a href="#正确传参的请求结果：-2" class="headerlink" title="正确传参的请求结果："></a>正确传参的请求结果：</h4><img src="/2023/11/12/python/fastapi/fastapi-8-qing-qiu-ti-request-body/FastAPI-8%EF%BC%9A%E8%AF%B7%E6%B1%82%E4%BD%93Request%20Body-9.png" class=""><h4 id="Pycharm-Console输出结果："><a href="#Pycharm-Console输出结果：" class="headerlink" title="Pycharm Console输出结果："></a>Pycharm Console输出结果：</h4><img src="/2023/11/12/python/fastapi/fastapi-8-qing-qiu-ti-request-body/FastAPI-8%EF%BC%9A%E8%AF%B7%E6%B1%82%E4%BD%93Request%20Body-10.png" class=""><h4 id="查看-Swagger-API-文档：-1"><a href="#查看-Swagger-API-文档：-1" class="headerlink" title="查看 Swagger API 文档："></a>查看 <code>Swagger API</code> 文档：</h4><img src="/2023/11/12/python/fastapi/fastapi-8-qing-qiu-ti-request-body/FastAPI-8%EF%BC%9A%E8%AF%B7%E6%B1%82%E4%BD%93Request%20Body-11.png" class="">]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> FasAPI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> FastAPI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FastAPI-7：详解Path</title>
      <link href="/2023/11/11/python/fastapi/fastapi-7-xiang-jie-path/"/>
      <url>/2023/11/11/python/fastapi/fastapi-7-xiang-jie-path/</url>
      
        <content type="html"><![CDATA[<h1 id="FastAPI-7：详解Path"><a href="#FastAPI-7：详解Path" class="headerlink" title="FastAPI-7：详解Path"></a>FastAPI-7：详解Path</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>上一篇讲了可以为查询参数添加额外的校验和元数据，Query库；</li><li>这篇可以为路径查询添加额外的校验元数据，Path库。</li></ul><h2 id="Path"><a href="#Path" class="headerlink" title="Path"></a>Path</h2><p>可以为路径参数添加额外的校验和元数据，跟 <code>Query</code> 的参数是一毛一样的</p><img src="/2023/11/11/python/fastapi/fastapi-7-xiang-jie-path/FastAPI-7%EF%BC%9A%E8%AF%A6%E8%A7%A3Path-1.png" class=""><h2 id="元数据"><a href="#元数据" class="headerlink" title="元数据"></a>元数据</h2><p>Path也可以添加元数据相关信息，这些信息将包含在生成的 <code>OpenAPI</code> 中，并由文档用户界面和外部工具使用</p><h3 id="四种元数据参数"><a href="#四种元数据参数" class="headerlink" title="四种元数据参数"></a>四种元数据参数</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 别名</span>alias<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token comment"># 标题</span>title<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token comment"># 描述</span>description<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token comment"># 是否弃用</span>deprecated<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span><span class="token builtin">bool</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实际代码"><a href="#实际代码" class="headerlink" title="实际代码"></a>实际代码</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token punctuation">,</span> Path<span class="token keyword">from</span> typing <span class="token keyword">import</span> Optional<span class="token keyword">import</span> uvicornapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 元数据</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>get</span><span class="token punctuation">(</span><span class="token string">'/items/{item_id}'</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_items</span><span class="token punctuation">(</span>    item_id<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span> <span class="token operator">=</span> Path<span class="token punctuation">(</span>            default<span class="token operator">=</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>            min_length<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>            max_length<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span>            regex<span class="token operator">=</span><span class="token string">'^刘.*星$'</span><span class="token punctuation">,</span>            title<span class="token operator">=</span><span class="token string">'Fuck'</span><span class="token punctuation">,</span>            description<span class="token operator">=</span><span class="token string">'很长很长的描述'</span><span class="token punctuation">,</span>            deprecated<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">'item_id'</span><span class="token punctuation">:</span> item_id<span class="token punctuation">}</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    uvicorn<span class="token punctuation">.</span>run<span class="token punctuation">(</span>app<span class="token operator">=</span><span class="token string">'fifth-5:app'</span><span class="token punctuation">,</span> host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">8080</span><span class="token punctuation">,</span> debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="校验成功的请求结果："><a href="#校验成功的请求结果：" class="headerlink" title="校验成功的请求结果："></a>校验成功的请求结果：</h4><img src="/2023/11/11/python/fastapi/fastapi-7-xiang-jie-path/FastAPI-7%EF%BC%9A%E8%AF%A6%E8%A7%A3Path-2.png" class=""><h4 id="校验失败的请求结果："><a href="#校验失败的请求结果：" class="headerlink" title="校验失败的请求结果："></a>校验失败的请求结果：</h4><img src="/2023/11/11/python/fastapi/fastapi-7-xiang-jie-path/FastAPI-7%EF%BC%9A%E8%AF%A6%E8%A7%A3Path-3.png" class=""><h4 id="查看-Swagger-API-文档："><a href="#查看-Swagger-API-文档：" class="headerlink" title="查看 Swagger API 文档："></a>查看 <code>Swagger API</code> 文档：</h4><img src="/2023/11/11/python/fastapi/fastapi-7-xiang-jie-path/FastAPI-7%EF%BC%9A%E8%AF%A6%E8%A7%A3Path-4.png" class=""><h3 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h3><ul><li>路径参数使用是必须的，必须是路径的一部分；</li><li>所以， <code>Path</code> 的 <code>default</code> 参数值必须设为 …</li></ul><h3 id="元数据不应该使用-alias"><a href="#元数据不应该使用-alias" class="headerlink" title="元数据不应该使用 alias"></a>元数据不应该使用 <code>alias</code></h3><p>因为路径参数并不能通过 <code>参数名=value</code> 的形式来传参，所以没有办法通过 <code>alias = value</code> 的方式给别名传值，最终会报错。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>get</span><span class="token punctuation">(</span><span class="token string">'/alias/{item_id}'</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_items</span><span class="token punctuation">(</span>    item_id<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span> <span class="token operator">=</span> Path<span class="token punctuation">(</span>default<span class="token operator">=</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> alias<span class="token operator">=</span><span class="token string">'item_alias'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">'item_id'</span><span class="token punctuation">:</span> item_id<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="请求结果："><a href="#请求结果：" class="headerlink" title="请求结果："></a>请求结果：</h4><img src="/2023/11/11/python/fastapi/fastapi-7-xiang-jie-path/FastAPI-7%EF%BC%9A%E8%AF%A6%E8%A7%A3Path-5.png" class=""><h4 id="不使用别名："><a href="#不使用别名：" class="headerlink" title="不使用别名："></a>不使用别名：</h4><img src="/2023/11/11/python/fastapi/fastapi-7-xiang-jie-path/FastAPI-7%EF%BC%9A%E8%AF%A6%E8%A7%A3Path-6.png" class=""><h4 id="查看-Swagger-API-文档，并运行："><a href="#查看-Swagger-API-文档，并运行：" class="headerlink" title="查看 Swagger API 文档，并运行："></a>查看 <code>Swagger API</code> 文档，并运行：</h4><img src="/2023/11/11/python/fastapi/fastapi-7-xiang-jie-path/FastAPI-7%EF%BC%9A%E8%AF%A6%E8%A7%A3Path-7.png" class=""><p>直接在 <code>Swagger API</code> 文档上尝试运行也会报错，所以路径参数不要使用别名参数哦！！！</p><h3 id="函数参数排序问题"><a href="#函数参数排序问题" class="headerlink" title="函数参数排序问题"></a>函数参数排序问题</h3><img src="/2023/11/11/python/fastapi/fastapi-7-xiang-jie-path/FastAPI-7%EF%BC%9A%E8%AF%A6%E8%A7%A3Path-8.png" class=""><p>Python会将 <code>item_id: Option[str] = Path(...)</code> 识别为默认参数，而 <code>name: str</code> 是位置参数，而位置参数不能在默认参数后面，所以报红了。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>get</span><span class="token punctuation">(</span><span class="token string">'/item/{item_id}'</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_items</span><span class="token punctuation">(</span>    <span class="token operator">*</span><span class="token punctuation">,</span>    item_id<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> Path<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">'item_id'</span><span class="token punctuation">:</span> item_id<span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> name<span class="token punctuation">}</span><span class="token comment"># 将 * 作为第一个参数，那么 * 后面的所有参数都会当做关键字参数处理，即使它们没有设置默认值（像name）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="正常传参的结果："><a href="#正常传参的结果：" class="headerlink" title="正常传参的结果："></a>正常传参的结果：</h4><img src="/2023/11/11/python/fastapi/fastapi-7-xiang-jie-path/FastAPI-7%EF%BC%9A%E8%AF%A6%E8%A7%A3Path-9.png" class=""><h2 id="数字类型校验"><a href="#数字类型校验" class="headerlink" title="数字类型校验"></a>数字类型校验</h2><p><code>Query</code> 和 <code>Path</code> 都可以添加数字校验，<code>Query</code> 文章并没有讲解数字校验，所以这里重点讲一下！！！</p><h3 id="数字校验参数"><a href="#数字校验参数" class="headerlink" title="数字校验参数"></a>数字校验参数</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 大于</span>gt<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span><span class="token builtin">float</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token comment"># 大于等于</span>ge<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span><span class="token builtin">float</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token comment"># 小于</span>lt<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span><span class="token builtin">float</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token comment"># 小于等于</span>le<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span><span class="token builtin">float</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实际代码-1"><a href="#实际代码-1" class="headerlink" title="实际代码"></a>实际代码</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>get</span><span class="token punctuation">(</span><span class="token string">'/number/{item_id}'</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_items</span><span class="token punctuation">(</span>    <span class="token operator">*</span><span class="token punctuation">,</span>    item_id<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span> <span class="token operator">=</span> Path<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">'The ID'</span><span class="token punctuation">,</span> gt<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> le<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token builtin">str</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">'item_id'</span><span class="token punctuation">:</span> item_id<span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> name<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="校验成功的请求结果：-1"><a href="#校验成功的请求结果：-1" class="headerlink" title="校验成功的请求结果："></a>校验成功的请求结果：</h4><img src="/2023/11/11/python/fastapi/fastapi-7-xiang-jie-path/FastAPI-7%EF%BC%9A%E8%AF%A6%E8%A7%A3Path-10.png" class=""><h4 id="校验失败的请求结果：-1"><a href="#校验失败的请求结果：-1" class="headerlink" title="校验失败的请求结果："></a>校验失败的请求结果：</h4><img src="/2023/11/11/python/fastapi/fastapi-7-xiang-jie-path/FastAPI-7%EF%BC%9A%E8%AF%A6%E8%A7%A3Path-11.png" class=""><h2 id="Query-和-Path-综合使用"><a href="#Query-和-Path-综合使用" class="headerlink" title="Query 和 Path 综合使用"></a><code>Query</code> 和 <code>Path</code> 综合使用</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>get</span><span class="token punctuation">(</span><span class="token string">'/path_query/{item_id}'</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_items</span><span class="token punctuation">(</span>    <span class="token operator">*</span><span class="token punctuation">,</span>        item_id<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> Path<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> description<span class="token operator">=</span><span class="token string">'path'</span><span class="token punctuation">,</span> ge<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> lt<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> example<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        name<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span>        age<span class="token punctuation">:</span> <span class="token builtin">float</span> <span class="token operator">=</span> Query<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> description<span class="token operator">=</span><span class="token string">'query'</span><span class="token punctuation">,</span> gt<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">,</span> le<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">'item_id'</span><span class="token punctuation">:</span> item_id<span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> age<span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> name<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="正确传参的请求结果："><a href="#正确传参的请求结果：" class="headerlink" title="正确传参的请求结果："></a>正确传参的请求结果：</h4><img src="/2023/11/11/python/fastapi/fastapi-7-xiang-jie-path/FastAPI-7%EF%BC%9A%E8%AF%A6%E8%A7%A3Path-12.png" class=""><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>数字校验也适用于 <code>float</code> 类型的值</p><h4 id="查看-Swagger-API-文档：-1"><a href="#查看-Swagger-API-文档：-1" class="headerlink" title="查看 Swagger API 文档："></a>查看 <code>Swagger API</code> 文档：</h4><img src="/2023/11/11/python/fastapi/fastapi-7-xiang-jie-path/FastAPI-7%EF%BC%9A%E8%AF%A6%E8%A7%A3Path-13.png" class=""><p>这里的 <code>item_id</code> 还加了个 <code>example</code> 参数，就是个示例值，所以在接口文档中会显示 <code>Example</code></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><code>Query</code> 、 <code>Path</code> 和后面会讲到的 <code>Form</code> 、 <code>Cookie</code> … 等等，都是公共的 <code>Param</code> 类的子类，但实际开发中并不会直接使用 <code>Param</code> 类；</li><li>所有这些子类都共享相同的额外校验参数和元数据。</li></ul><h3 id="Query-类"><a href="#Query-类" class="headerlink" title="Query 类"></a>Query 类</h3><img src="/2023/11/11/python/fastapi/fastapi-7-xiang-jie-path/FastAPI-7%EF%BC%9A%E8%AF%A6%E8%A7%A3Path-14.png" class=""><h3 id="Path-类"><a href="#Path-类" class="headerlink" title="Path 类"></a>Path 类</h3><img src="/2023/11/11/python/fastapi/fastapi-7-xiang-jie-path/FastAPI-7%EF%BC%9A%E8%AF%A6%E8%A7%A3Path-15.png" class=""><h3 id="Param-类"><a href="#Param-类" class="headerlink" title="Param 类"></a>Param 类</h3><img src="/2023/11/11/python/fastapi/fastapi-7-xiang-jie-path/FastAPI-7%EF%BC%9A%E8%AF%A6%E8%A7%A3Path-16.png" class="">]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> FasAPI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> FastAPI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FastAPI-6：Query库详解</title>
      <link href="/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/"/>
      <url>/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="FastAPI-6：Query库详解"><a href="#FastAPI-6：Query库详解" class="headerlink" title="FastAPI-6：Query库详解"></a>FastAPI-6：Query库详解</h1><h3 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a>可选参数</h3><p>上篇讲过查询参数可以不是必传的，可以是可选参数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token keyword">from</span> typing <span class="token keyword">import</span> Optional<span class="token keyword">import</span> uvicorn app <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 必传参数 + 可选参数</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>get</span><span class="token punctuation">(</span><span class="token string">'/items'</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_item</span><span class="token punctuation">(</span>    item_id<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">'item_id'</span><span class="token punctuation">:</span> item_id<span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> name<span class="token punctuation">}</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    uvicorn<span class="token punctuation">.</span>run<span class="token punctuation">(</span>app<span class="token operator">=</span><span class="token string">'fourth-4:app'</span><span class="token punctuation">,</span> host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">8080</span><span class="token punctuation">,</span> debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment"># 可选其实也是一种校验</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="请求结果："><a href="#请求结果：" class="headerlink" title="请求结果："></a>请求结果：</h4><img src="/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/FastAPI-6%EF%BC%9AQuery%E5%BA%93%E8%AF%A6%E8%A7%A3-1.png" class=""><h2 id="Query"><a href="#Query" class="headerlink" title="Query"></a>Query</h2><p>为了对查询参数进行额外的校验，可以导入 <code>Query</code> 库</p><h2 id="Query支持多种校验"><a href="#Query支持多种校验" class="headerlink" title="Query支持多种校验"></a>Query支持多种校验</h2><img src="/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/FastAPI-6%EF%BC%9AQuery%E5%BA%93%E8%AF%A6%E8%A7%A3-2.png" class=""><h3 id="可选参数有默认值-长度最大为10"><a href="#可选参数有默认值-长度最大为10" class="headerlink" title="可选参数有默认值 + 长度最大为10"></a>可选参数有默认值 + 长度最大为10</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 需要先导入Query库</span><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> Query<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>get</span><span class="token punctuation">(</span><span class="token string">'/items/'</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_items</span><span class="token punctuation">(</span>    name<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span> <span class="token operator">=</span> Query<span class="token punctuation">(</span>default<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    results <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'items'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">'item_id'</span><span class="token punctuation">:</span> <span class="token string">'Foo'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'item_id'</span><span class="token punctuation">:</span> <span class="token string">'Bar'</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span>    <span class="token keyword">if</span> name<span class="token punctuation">:</span>        results<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> name<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> results<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="不传-name-的请求结果："><a href="#不传-name-的请求结果：" class="headerlink" title="不传 name 的请求结果："></a>不传 <code>name</code> 的请求结果：</h4><img src="/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/FastAPI-6%EF%BC%9AQuery%E5%BA%93%E8%AF%A6%E8%A7%A3-3.png" class=""><h4 id="传入-name-校验成功的请求结果："><a href="#传入-name-校验成功的请求结果：" class="headerlink" title="传入 name 校验成功的请求结果："></a>传入 <code>name</code> 校验成功的请求结果：</h4><img src="/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/FastAPI-6%EF%BC%9AQuery%E5%BA%93%E8%AF%A6%E8%A7%A3-4.png" class=""><h4 id="name-长度大于10，校验失败的请求结果："><a href="#name-长度大于10，校验失败的请求结果：" class="headerlink" title="name 长度大于10，校验失败的请求结果："></a><code>name</code> 长度大于10，校验失败的请求结果：</h4><img src="/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/FastAPI-6%EF%BC%9AQuery%E5%BA%93%E8%AF%A6%E8%A7%A3-5.png" class=""><p><strong>友好的错误提示呀，直接说清楚哪个字段长度不满足了。。。</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">name<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span> <span class="token operator">=</span> Query<span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token comment"># 等价于</span>name<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="Optional的作用"><a href="#Optional的作用" class="headerlink" title="Optional的作用"></a>Optional的作用</h2><p>为了让IDE更好的支持智能提示</p><h3 id="一个参数多个校验"><a href="#一个参数多个校验" class="headerlink" title="一个参数多个校验"></a>一个参数多个校验</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 多条校验</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>get</span><span class="token punctuation">(</span><span class="token string">'/items/twice'</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_items</span><span class="token punctuation">(</span>    name<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span> <span class="token operator">=</span> Query<span class="token punctuation">(</span>default<span class="token operator">=</span><span class="token string">'王德发'</span><span class="token punctuation">,</span> min_length<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> name<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="校验成功的请求结果："><a href="#校验成功的请求结果：" class="headerlink" title="校验成功的请求结果："></a>校验成功的请求结果：</h4><img src="/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/FastAPI-6%EF%BC%9AQuery%E5%BA%93%E8%AF%A6%E8%A7%A3-6.png" class=""><h4 id="name-长度小于3，校验失败的请求结果："><a href="#name-长度小于3，校验失败的请求结果：" class="headerlink" title="name 长度小于3，校验失败的请求结果："></a><code>name</code> 长度小于3，校验失败的请求结果：</h4><img src="/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/FastAPI-6%EF%BC%9AQuery%E5%BA%93%E8%AF%A6%E8%A7%A3-7.png" class=""><h3 id="添加正则表达式校验结果"><a href="#添加正则表达式校验结果" class="headerlink" title="添加正则表达式校验结果"></a>添加正则表达式校验结果</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 正则表达式</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>get</span><span class="token punctuation">(</span><span class="token string">'/items/regular'</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_items</span><span class="token punctuation">(</span>    name<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span> <span class="token operator">=</span> Query<span class="token punctuation">(</span>default<span class="token operator">=</span><span class="token string">'王德发'</span><span class="token punctuation">,</span> min_length<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> regex<span class="token operator">=</span><span class="token string">'^刘.*星$'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> name<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="校验成功的请求结果：-1"><a href="#校验成功的请求结果：-1" class="headerlink" title="校验成功的请求结果："></a>校验成功的请求结果：</h4><img src="/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/FastAPI-6%EF%BC%9AQuery%E5%BA%93%E8%AF%A6%E8%A7%A3-8.png" class=""><h4 id="name-不满足正则，校验失败的请求结果："><a href="#name-不满足正则，校验失败的请求结果：" class="headerlink" title="name 不满足正则，校验失败的请求结果："></a><code>name</code> 不满足正则，校验失败的请求结果：</h4><img src="/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/FastAPI-6%EF%BC%9AQuery%E5%BA%93%E8%AF%A6%E8%A7%A3-9.png" class=""><h3 id="必传参数-长度最小为3"><a href="#必传参数-长度最小为3" class="headerlink" title="必传参数 + 长度最小为3"></a>必传参数 + 长度最小为3</h3><h4 id="不使用Query时，查询参数怎么必传？"><a href="#不使用Query时，查询参数怎么必传？" class="headerlink" title="不使用Query时，查询参数怎么必传？"></a>不使用Query时，查询参数怎么必传？</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 不指定默认值就可以</span>name<span class="token punctuation">:</span> <span class="token builtin">str</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="当使用Query时，查询参数怎么必传？"><a href="#当使用Query时，查询参数怎么必传？" class="headerlink" title="当使用Query时，查询参数怎么必传？"></a>当使用Query时，查询参数怎么必传？</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Query 默认值参数 default 是必传的，传了默认值不就变成可选参数了吗，那么怎么办呢？</span><span class="token comment"># 必传参数</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>get</span><span class="token punctuation">(</span><span class="token string">'/items/require'</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_items</span><span class="token punctuation">(</span>    name<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span> <span class="token operator">=</span> Query<span class="token punctuation">(</span>default<span class="token operator">=</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> min_length<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> name<span class="token punctuation">}</span><span class="token comment"># 只需要将 `...` 赋值给default参数，FastAPI就会知道这个参数是必传的了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="校验成功的请求结果：-2"><a href="#校验成功的请求结果：-2" class="headerlink" title="校验成功的请求结果："></a>校验成功的请求结果：</h4><img src="/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/FastAPI-6%EF%BC%9AQuery%E5%BA%93%E8%AF%A6%E8%A7%A3-10.png" class=""><h4 id="没有传入-name-参数，校验失败的请求结果："><a href="#没有传入-name-参数，校验失败的请求结果：" class="headerlink" title="没有传入 name 参数，校验失败的请求结果："></a>没有传入 <code>name</code> 参数，校验失败的请求结果：</h4><img src="/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/FastAPI-6%EF%BC%9AQuery%E5%BA%93%E8%AF%A6%E8%A7%A3-11.png" class=""><p>因为是必传参数，所以不传报错！！！</p><h4 id="查看-Swagger-API-文档："><a href="#查看-Swagger-API-文档：" class="headerlink" title="查看 Swagger API 文档："></a>查看 <code>Swagger API</code> 文档：</h4><img src="/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/FastAPI-6%EF%BC%9AQuery%E5%BA%93%E8%AF%A6%E8%A7%A3-12.png" class=""><p><strong>大大的required标识，代表必传</strong></p><h2 id="List类型的查询参数"><a href="#List类型的查询参数" class="headerlink" title="List类型的查询参数"></a>List类型的查询参数</h2><p>使用 <code>Query</code> 时，可以指定查询参数的类型为 List，即一个参数可以接收多个值</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> List<span class="token comment"># List[str]</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>get</span><span class="token punctuation">(</span><span class="token string">'/list'</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_item</span><span class="token punctuation">(</span>    address<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> Query<span class="token punctuation">(</span>default<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">'address'</span><span class="token punctuation">:</span> address<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="没有传值的请求结果："><a href="#没有传值的请求结果：" class="headerlink" title="没有传值的请求结果："></a>没有传值的请求结果：</h4><img src="/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/FastAPI-6%EF%BC%9AQuery%E5%BA%93%E8%AF%A6%E8%A7%A3-13.png" class=""><h4 id="正确传参的请求结果："><a href="#正确传参的请求结果：" class="headerlink" title="正确传参的请求结果："></a>正确传参的请求结果：</h4><img src="/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/FastAPI-6%EF%BC%9AQuery%E5%BA%93%E8%AF%A6%E8%A7%A3-1.png" class=""><p><strong>设置了校验 <code>max_length=2</code> ，但是传了4个address也正常，证明这个 <code>max_length</code> 的校验对数组的长度并不生效</strong></p><h4 id="校验失败的请求结果："><a href="#校验失败的请求结果：" class="headerlink" title="校验失败的请求结果："></a>校验失败的请求结果：</h4><img src="/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/FastAPI-6%EF%BC%9AQuery%E5%BA%93%E8%AF%A6%E8%A7%A3-15.png" class=""><p><strong><code>max_length</code> 校验任然会对数组里面的字符串生效</strong></p><h4 id="查看-Swagger-API-文档：-1"><a href="#查看-Swagger-API-文档：-1" class="headerlink" title="查看 Swagger API 文档："></a>查看 <code>Swagger API</code> 文档：</h4><img src="/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/FastAPI-6%EF%BC%9AQuery%E5%BA%93%E8%AF%A6%E8%A7%A3-16.png" class=""><h3 id="List类型的查询参数有多个默认值"><a href="#List类型的查询参数有多个默认值" class="headerlink" title="List类型的查询参数有多个默认值"></a>List类型的查询参数有多个默认值</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>get</span><span class="token punctuation">(</span><span class="token string">'/list/default'</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_item</span><span class="token punctuation">(</span>    address<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> Query<span class="token punctuation">(</span>default<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'北京'</span><span class="token punctuation">,</span> <span class="token string">'上海'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">'address'</span><span class="token punctuation">:</span> address<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="不传参数的结果："><a href="#不传参数的结果：" class="headerlink" title="不传参数的结果："></a>不传参数的结果：</h4><img src="/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/FastAPI-6%EF%BC%9AQuery%E5%BA%93%E8%AF%A6%E8%A7%A3-17.png" class=""><h2 id="元数据"><a href="#元数据" class="headerlink" title="元数据"></a>元数据</h2><p>Query可以添加元数据相关信息，这些信息将包含在生成的OpenAPI中，并由文档用户界面和外部工具使用</p><h3 id="四种元数据参数"><a href="#四种元数据参数" class="headerlink" title="四种元数据参数"></a>四种元数据参数</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 别名</span>alias<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token comment"># 标题</span>title<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token comment"># 描述</span>description Optional<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token comment"># 是否弃用</span>deprecated<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span><span class="token builtin">bool</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实际代码"><a href="#实际代码" class="headerlink" title="实际代码"></a>实际代码</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 元数据</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>get</span><span class="token punctuation">(</span><span class="token string">'/items/all'</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_items</span><span class="token punctuation">(</span>    name<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span> <span class="token operator">=</span> Query<span class="token punctuation">(</span>        default<span class="token operator">=</span><span class="token string">'王德发'</span><span class="token punctuation">,</span>            min_length<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>            max_length<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span>            regex<span class="token operator">=</span><span class="token string">'^刘.*星$'</span><span class="token punctuation">,</span>            alias<span class="token operator">=</span><span class="token string">'name_alias_query'</span><span class="token punctuation">,</span>            title<span class="token operator">=</span><span class="token string">'成功'</span><span class="token punctuation">,</span>            description<span class="token operator">=</span><span class="token string">'长得帅'</span><span class="token punctuation">,</span>            deprecated<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> name<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="不使用-alias-进行传参的请求结果："><a href="#不使用-alias-进行传参的请求结果：" class="headerlink" title="不使用 alias 进行传参的请求结果："></a>不使用 <code>alias</code> 进行传参的请求结果：</h4><img src="/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/FastAPI-6%EF%BC%9AQuery%E5%BA%93%E8%AF%A6%E8%A7%A3-18.png" class=""><p>当做不存在的查询参数处理</p><h4 id="用-alias-进行传参的请求结果："><a href="#用-alias-进行传参的请求结果：" class="headerlink" title="用 alias 进行传参的请求结果："></a>用 <code>alias</code> 进行传参的请求结果：</h4><img src="/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/FastAPI-6%EF%BC%9AQuery%E5%BA%93%E8%AF%A6%E8%A7%A3-19.png" class=""><p><strong>定义了 <code>alias</code> ，记得要用 <code>alias</code> 进行传参</strong></p><h4 id="查看-Swagger-API-文档：-2"><a href="#查看-Swagger-API-文档：-2" class="headerlink" title="查看 Swagger API 文档："></a>查看 <code>Swagger API</code> 文档：</h4><img src="/2023/11/10/python/fastapi/fastapi-6-query-ku-xiang-jie/FastAPI-6%EF%BC%9AQuery%E5%BA%93%E8%AF%A6%E8%A7%A3-20.png" class=""><ul><li>title字段并不会显示在这里，只会显示在JSON Schema中；</li><li>而JSON Schema只有请求参数方式为Request Body才会显示，这里是查询参数，所以并没有JSON Schema这一说，后面会介绍！！！</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>限定于字符串的校验：</p><ul><li>min_length</li><li>max_length</li><li>regex</li></ul><h3 id="Path"><a href="#Path" class="headerlink" title="Path"></a>Path</h3><p>除了可以给查询参数添加额外的校验，也可以给路径参数添加额外的校验</p><p>Path的具体教程： <a href="https://www.cnblogs.com/poloyy/p/15308131.html">https://www.cnblogs.com/poloyy/p/15308131.html</a> </p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> FasAPI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> FastAPI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FastAPI-5：查询参数Query Parameters</title>
      <link href="/2023/11/09/python/fastapi/fastapi-5-cha-xun-can-shu-query-parameters/"/>
      <url>/2023/11/09/python/fastapi/fastapi-5-cha-xun-can-shu-query-parameters/</url>
      
        <content type="html"><![CDATA[<h1 id="FastAPI-5：查询参数Query-Parameters"><a href="#FastAPI-5：查询参数Query-Parameters" class="headerlink" title="FastAPI-5：查询参数Query Parameters"></a>FastAPI-5：查询参数Query Parameters</h1><h2 id="什么是查询参数？"><a href="#什么是查询参数？" class="headerlink" title="什么是查询参数？"></a>什么是查询参数？</h2><p><a href="http://localhost:8080/get?name=xxx&amp;age=18">http://localhost:8080/get?name=xxx&amp;age=18</a></p><p><a href="http://localhost:8080/get?age=18&amp;name=xxx">http://localhost:8080/get?age=18&amp;name=xxx</a></p><p>在url的 <code>?</code>  后面跟着的一组或多组键值对，就是查询参数</p><h2 id="FastAPI的查询参数"><a href="#FastAPI的查询参数" class="headerlink" title="FastAPI的查询参数"></a>FastAPI的查询参数</h2><ul><li>当声明了不属于路径参数以外的其他函数参数时，FastAPI会自动解析为查询参数；</li><li>和路径参数不同，查询参数可以是可选非必填的，也可以具有默认值。</li></ul><h3 id="路径参数-请求参数的栗子"><a href="#路径参数-请求参数的栗子" class="headerlink" title="路径参数 + 请求参数的栗子"></a>路径参数 + 请求参数的栗子</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token keyword">import</span> uvicornapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 路径参数 + 请求参数</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>get</span><span class="token punctuation">(</span><span class="token string">'/items/{item_id}'</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_item</span><span class="token punctuation">(</span>    item_id<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">'item_id'</span><span class="token punctuation">:</span> item_id<span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> name<span class="token punctuation">}</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    uvicorn<span class="token punctuation">.</span>run<span class="token punctuation">(</span>app<span class="token operator">=</span><span class="token string">'***:app'</span><span class="token punctuation">,</span> host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">8080</span><span class="token punctuation">,</span> debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="正确传参的请求结果："><a href="#正确传参的请求结果：" class="headerlink" title="正确传参的请求结果："></a>正确传参的请求结果：</h4><img src="/2023/11/09/python/fastapi/fastapi-5-cha-xun-can-shu-query-parameters/FastAPI-5%EF%BC%9A%E6%9F%A5%E8%AF%A2%E5%8F%82%E6%95%B0Query%20Parameters-1.png" class=""><h3 id="必传参数-可选参数的栗子"><a href="#必传参数-可选参数的栗子" class="headerlink" title="必传参数 + 可选参数的栗子"></a>必传参数 + 可选参数的栗子</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> Optional<span class="token comment"># 必传参数 + 可选参数</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>get</span><span class="token punctuation">(</span><span class="token string">'/items'</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_item</span><span class="token punctuation">(</span>    item_id<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">'item_id'</span><span class="token punctuation">:</span> item_id<span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> name<span class="token punctuation">}</span><span class="token comment"># 如下：name没有传递参数取的值是None空</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="不传-name-的请求结果："><a href="#不传-name-的请求结果：" class="headerlink" title="不传 name 的请求结果："></a>不传 <code>name</code> 的请求结果：</h4><img src="/2023/11/09/python/fastapi/fastapi-5-cha-xun-can-shu-query-parameters/FastAPI-5%EF%BC%9A%E6%9F%A5%E8%AF%A2%E5%8F%82%E6%95%B0Query%20Parameters-2.png" class=""><h3 id="查询参数类型自动转换"><a href="#查询参数类型自动转换" class="headerlink" title="查询参数类型自动转换"></a>查询参数类型自动转换</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 查询参数类型转换</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>get</span><span class="token punctuation">(</span><span class="token string">'/items/{item_id}'</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_item</span><span class="token punctuation">(</span>    item_id<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span>    q<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span>    short<span class="token punctuation">:</span> <span class="token builtin">bool</span> <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    item <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'item_id'</span><span class="token punctuation">:</span> item_id<span class="token punctuation">}</span>    <span class="token keyword">if</span> q<span class="token punctuation">:</span>        item<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'q'</span><span class="token punctuation">:</span> q<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> short<span class="token punctuation">:</span>        <span class="token comment"># 如果 short == False，则多加一个键description</span>        item<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token string">'description'</span><span class="token punctuation">:</span> <span class="token string">'This is an amazing item has a long description'</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> item<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="short-是-True-的请求结果："><a href="#short-是-True-的请求结果：" class="headerlink" title="short 是 True 的请求结果："></a><code>short</code> 是 <code>True</code> 的请求结果：</h4><img src="/2023/11/09/python/fastapi/fastapi-5-cha-xun-can-shu-query-parameters/FastAPI-5%EF%BC%9A%E6%9F%A5%E8%AF%A2%E5%8F%82%E6%95%B0Query%20Parameters-3.png" class=""><h4 id="short-是-False-的请求结果："><a href="#short-是-False-的请求结果：" class="headerlink" title="short 是 False 的请求结果："></a><code>short</code> 是 <code>False</code> 的请求结果：</h4><img src="/2023/11/09/python/fastapi/fastapi-5-cha-xun-can-shu-query-parameters/FastAPI-5%EF%BC%9A%E6%9F%A5%E8%AF%A2%E5%8F%82%E6%95%B0Query%20Parameters-4.png" class=""><h3 id="指定枚举类型请求参数的栗子"><a href="#指定枚举类型请求参数的栗子" class="headerlink" title="指定枚举类型请求参数的栗子"></a>指定枚举类型请求参数的栗子</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> enum <span class="token keyword">import</span> Enum<span class="token keyword">from</span> typing <span class="token keyword">import</span> Optional<span class="token punctuation">,</span> List<span class="token comment"># 自定义枚举类型</span><span class="token keyword">class</span> <span class="token class-name">ModelName</span><span class="token punctuation">(</span>Enum<span class="token punctuation">)</span><span class="token punctuation">:</span>    boy <span class="token operator">=</span> <span class="token string">'男'</span>    girl <span class="token operator">=</span> <span class="token string">'女'</span>    unknown <span class="token operator">=</span> <span class="token string">'不知道'</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>get</span><span class="token punctuation">(</span><span class="token string">'/item_enum'</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_item</span><span class="token punctuation">(</span>    name<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span>    sex<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>ModelName<span class="token punctuation">]</span> <span class="token operator">=</span> ModelName<span class="token punctuation">.</span>unknown<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> name<span class="token punctuation">,</span> <span class="token string">'sex'</span><span class="token punctuation">:</span> sex<span class="token punctuation">}</span><span class="token comment"># 不传sex，会取sex的默认值：枚举类中的unknown的值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="参数传递枚举值的请求结果："><a href="#参数传递枚举值的请求结果：" class="headerlink" title="参数传递枚举值的请求结果："></a>参数传递枚举值的请求结果：</h4><img src="/2023/11/09/python/fastapi/fastapi-5-cha-xun-can-shu-query-parameters/FastAPI-5%EF%BC%9A%E6%9F%A5%E8%AF%A2%E5%8F%82%E6%95%B0Query%20Parameters-5.png" class=""><h4 id="不传-sex-的请求结果："><a href="#不传-sex-的请求结果：" class="headerlink" title="不传 sex 的请求结果："></a>不传 <code>sex</code> 的请求结果：</h4><img src="/2023/11/09/python/fastapi/fastapi-5-cha-xun-can-shu-query-parameters/FastAPI-5%EF%BC%9A%E6%9F%A5%E8%AF%A2%E5%8F%82%E6%95%B0Query%20Parameters-6.png" class=""><h3 id="查询参数能用List-str-传参吗？"><a href="#查询参数能用List-str-传参吗？" class="headerlink" title="查询参数能用List[str]传参吗？"></a>查询参数能用List[str]传参吗？</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># List[str]</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>get</span><span class="token punctuation">(</span><span class="token string">'/list'</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_item</span><span class="token punctuation">(</span>    address<span class="token punctuation">:</span>List<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">'address'</span><span class="token punctuation">:</span> address<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="请求结果："><a href="#请求结果：" class="headerlink" title="请求结果："></a>请求结果：</h4><img src="/2023/11/09/python/fastapi/fastapi-5-cha-xun-can-shu-query-parameters/FastAPI-5%EF%BC%9A%E6%9F%A5%E8%AF%A2%E5%8F%82%E6%95%B0Query%20Parameters-7.png" class=""><ul><li>即使参数值写成数组形式也不会传值成功，因为查询参数都是字符串；</li><li>所以 <code>['北京','上海','广州','深圳']</code> 其实是一个字符串str，并不是List[str]，那么怎样才能传数组呢？</li></ul><h3 id="分开多次传-address-可以吗？"><a href="#分开多次传-address-可以吗？" class="headerlink" title="分开多次传 address 可以吗？"></a>分开多次传 <code>address</code> 可以吗？</h3><img src="/2023/11/09/python/fastapi/fastapi-5-cha-xun-can-shu-query-parameters/FastAPI-5%EF%BC%9A%E6%9F%A5%E8%AF%A2%E5%8F%82%E6%95%B0Query%20Parameters-8.png" class=""><p>答案也是否定的</p><h3 id="具体怎样做？"><a href="#具体怎样做？" class="headerlink" title="具体怎样做？"></a>具体怎样做？</h3><p>用Query库，下篇细说！！！</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> FasAPI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> FastAPI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FastAPI-4：路径参数Path Parameters</title>
      <link href="/2023/11/08/python/fastapi/fastapi-4-lu-jing-can-shu-path-parameters/"/>
      <url>/2023/11/08/python/fastapi/fastapi-4-lu-jing-can-shu-path-parameters/</url>
      
        <content type="html"><![CDATA[<h1 id="FastAPI-4：路径参数Path-Parameters"><a href="#FastAPI-4：路径参数Path-Parameters" class="headerlink" title="FastAPI-4：路径参数Path Parameters"></a>FastAPI-4：路径参数Path Parameters</h1><h2 id="什么是路径"><a href="#什么是路径" class="headerlink" title="什么是路径"></a>什么是路径</h2><ul><li>假设一个 <code>url</code> 是：<a href="http://127.0.0.1:8080/items/abcd">http://127.0.0.1:8080/items/abcd</a></li><li>那么路径 <code>path</code> 就是：/items/abcd</li></ul><h3 id="路径参数"><a href="#路径参数" class="headerlink" title="路径参数"></a>路径参数</h3><p>就是将路径上的某一部分变成参数，可通过请求传递，然后 FastAPI 解析。</p><h3 id="最简单的栗子"><a href="#最简单的栗子" class="headerlink" title="最简单的栗子"></a>最简单的栗子</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> uvicorn<span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPIapp <span class="token operator">=</span> fastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 路径参数 item_id</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>get</span><span class="token punctuation">(</span><span class="token string">'/items/{item_id}'</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_item</span><span class="token punctuation">(</span>item_id<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">'item_id'</span><span class="token punctuation">:</span> item_id<span class="token punctuation">}</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    uvicorn<span class="token punctuation">.</span>run<span class="token punctuation">(</span>app<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="请求结果："><a href="#请求结果：" class="headerlink" title="请求结果："></a>请求结果：</h4><img src="/2023/11/08/python/fastapi/fastapi-4-lu-jing-can-shu-path-parameters/FastAPI-4%EF%BC%9A%E8%B7%AF%E5%BE%84%E5%8F%82%E6%95%B0Path%20Parameters-1.png" class=""><h3 id="限定类型的路径参数"><a href="#限定类型的路径参数" class="headerlink" title="限定类型的路径参数"></a>限定类型的路径参数</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 指定类型的路径参数</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>get</span><span class="token punctuation">(</span><span class="token string">'/items/{item_id}/article/{num}'</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">path_test</span><span class="token punctuation">(</span>    item_id<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span>    num<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> item_id<span class="token punctuation">,</span> <span class="token string">'num'</span><span class="token punctuation">:</span> num<span class="token punctuation">}</span><span class="token comment"># 多个路径参数，且有指定类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="正确传参的请求结果："><a href="#正确传参的请求结果：" class="headerlink" title="正确传参的请求结果："></a>正确传参的请求结果：</h4><img src="/2023/11/08/python/fastapi/fastapi-4-lu-jing-can-shu-path-parameters/FastAPI-4%EF%BC%9A%E8%B7%AF%E5%BE%84%E5%8F%82%E6%95%B0Path%20Parameters-2.png" class=""><h4 id="num不传int的结果："><a href="#num不传int的结果：" class="headerlink" title="num不传int的结果："></a>num不传int的结果：</h4><img src="/2023/11/08/python/fastapi/fastapi-4-lu-jing-can-shu-path-parameters/FastAPI-4%EF%BC%9A%E8%B7%AF%E5%BE%84%E5%8F%82%E6%95%B0Path%20Parameters-3.png" class=""><h4 id="Swagger接口文档的显示效果"><a href="#Swagger接口文档的显示效果" class="headerlink" title="Swagger接口文档的显示效果"></a>Swagger接口文档的显示效果</h4><img src="/2023/11/08/python/fastapi/fastapi-4-lu-jing-can-shu-path-parameters/FastAPI-4%EF%BC%9A%E8%B7%AF%E5%BE%84%E5%8F%82%E6%95%B0Path%20Parameters-4.png" class=""><h3 id="路径函数顺序问题"><a href="#路径函数顺序问题" class="headerlink" title="路径函数顺序问题"></a>路径函数顺序问题</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>get</span><span class="token punctuation">(</span><span class="token string">'/users/me'</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_user_me</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">'user_id'</span><span class="token punctuation">:</span> <span class="token string">'the current user'</span><span class="token punctuation">}</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>get</span><span class="token punctuation">(</span><span class="token string">'/users/{user_id}'</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_user</span><span class="token punctuation">(</span>user_id<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">'user_id'</span><span class="token punctuation">:</span> user_id<span class="token punctuation">}</span><span class="token comment"># /users/{user_id} 路径是包含 /users/me 的</span><span class="token comment"># 当想匹配到固定路径时，需要将固定路径函数放在路径参数函前面</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="请求结果：-1"><a href="#请求结果：-1" class="headerlink" title="请求结果："></a>请求结果：</h4><img src="/2023/11/08/python/fastapi/fastapi-4-lu-jing-can-shu-path-parameters/FastAPI-4%EF%BC%9A%E8%B7%AF%E5%BE%84%E5%8F%82%E6%95%B0Path%20Parameters-5.png" class=""><h3 id="将两个函数顺序调换过来"><a href="#将两个函数顺序调换过来" class="headerlink" title="将两个函数顺序调换过来"></a>将两个函数顺序调换过来</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>get</span><span class="token punctuation">(</span><span class="token string">'/users/{user_id}'</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_user</span><span class="token punctuation">(</span>user_id<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">'user_id'</span><span class="token punctuation">:</span> user_id<span class="token punctuation">}</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>get</span><span class="token punctuation">(</span><span class="token string">'/users/me'</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_user_me</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">'user_id'</span><span class="token punctuation">:</span> <span class="token string">'the current user'</span><span class="token punctuation">}</span><span class="token comment"># 这样就无法匹配到固定路径 /users/me 函数了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="请求结果：-2"><a href="#请求结果：-2" class="headerlink" title="请求结果："></a>请求结果：</h4><img src="/2023/11/08/python/fastapi/fastapi-4-lu-jing-can-shu-path-parameters/FastAPI-4%EF%BC%9A%E8%B7%AF%E5%BE%84%E5%8F%82%E6%95%B0Path%20Parameters-6.png" class=""><h2 id="数据转换器"><a href="#数据转换器" class="headerlink" title="数据转换器"></a>数据转换器</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ul><li>当你有一个路径是 <code>/files/{file_path}</code> ，但是不确定 <code>file_path</code> 到底会取什么值，并不是固定的长度，可能是 <code>/files/home/johndoe/myfile.txt</code> 也可能是 <code>/files/test/myfile.txt</code> ，那怎么办呢？</li><li>路径转换器来啦！</li></ul><h3 id="实际栗子"><a href="#实际栗子" class="headerlink" title="实际栗子"></a>实际栗子</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>get</span><span class="token punctuation">(</span><span class="token string">'/files/{file_path:path}'</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_file</span><span class="token punctuation">(</span>file_path<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">'file_path'</span><span class="token punctuation">:</span> file_path<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="请求结果：-3"><a href="#请求结果：-3" class="headerlink" title="请求结果："></a>请求结果：</h4><img src="/2023/11/08/python/fastapi/fastapi-4-lu-jing-can-shu-path-parameters/FastAPI-4%EF%BC%9A%E8%B7%AF%E5%BE%84%E5%8F%82%E6%95%B0Path%20Parameters-7.png" class=""><h3 id="枚举类型的路径参数"><a href="#枚举类型的路径参数" class="headerlink" title="枚举类型的路径参数"></a>枚举类型的路径参数</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 导入枚举类型</span><span class="token keyword">from</span> enum <span class="token keyword">import</span> Enum<span class="token comment"># 自定义枚举类</span><span class="token keyword">class</span> <span class="token class-name">ModelName</span><span class="token punctuation">(</span>Enum<span class="token punctuation">)</span><span class="token punctuation">:</span>    polo <span class="token operator">=</span> <span class="token string">'polo'</span>    yy <span class="token operator">=</span> <span class="token string">'yy'</span>    test <span class="token operator">=</span> <span class="token string">'test'</span>    <span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>get</span><span class="token punctuation">(</span><span class="token string">'model/{model_name}'</span><span class="token punctuation">)</span><span class="token comment"># 类型限定为枚举类</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">get_model</span><span class="token punctuation">(</span>model_name<span class="token punctuation">:</span> ModelName<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 取枚举值方式一</span>    <span class="token keyword">if</span> model_name <span class="token operator">==</span> ModelName<span class="token punctuation">.</span>polo<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">'model_name'</span><span class="token punctuation">:</span> model_name<span class="token punctuation">,</span> <span class="token string">'message'</span><span class="token punctuation">:</span> <span class="token string">'Oh!!!polo!!!'</span><span class="token punctuation">}</span>    <span class="token comment"># 取枚举方式二</span>    <span class="token keyword">if</span> model_name<span class="token punctuation">.</span>value <span class="token operator">==</span> <span class="token string">'yy'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">'model_name'</span><span class="token punctuation">:</span> model_name<span class="token punctuation">,</span> <span class="token string">'message'</span><span class="token punctuation">:</span> <span class="token string">'God!!!yy!!!'</span><span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">'model_name'</span><span class="token punctuation">:</span> model_name<span class="token punctuation">,</span> <span class="token string">'message'</span><span class="token punctuation">:</span> <span class="token string">'巴啦啦能量!!!'</span><span class="token punctuation">}</span><span class="token comment"># 错误提示传的参数值并不是枚举类型中的值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="参数传枚举值请求结果："><a href="#参数传枚举值请求结果：" class="headerlink" title="参数传枚举值请求结果："></a>参数传枚举值请求结果：</h4><p>polo:</p><img src="/2023/11/08/python/fastapi/fastapi-4-lu-jing-can-shu-path-parameters/FastAPI-4%EF%BC%9A%E8%B7%AF%E5%BE%84%E5%8F%82%E6%95%B0Path%20Parameters-8.png" class=""><p>yy:</p><img src="/2023/11/08/python/fastapi/fastapi-4-lu-jing-can-shu-path-parameters/FastAPI-4%EF%BC%9A%E8%B7%AF%E5%BE%84%E5%8F%82%E6%95%B0Path%20Parameters-9.png" class=""><p>test:</p><img src="/2023/11/08/python/fastapi/fastapi-4-lu-jing-can-shu-path-parameters/FastAPI-4%EF%BC%9A%E8%B7%AF%E5%BE%84%E5%8F%82%E6%95%B0Path%20Parameters-10.png" class=""><h4 id="参数传入非枚举值的请求结果："><a href="#参数传入非枚举值的请求结果：" class="headerlink" title="参数传入非枚举值的请求结果："></a>参数传入非枚举值的请求结果：</h4><img src="/2023/11/08/python/fastapi/fastapi-4-lu-jing-can-shu-path-parameters/FastAPI-4%EF%BC%9A%E8%B7%AF%E5%BE%84%E5%8F%82%E6%95%B0Path%20Parameters-11.png" class=""><h2 id="重点："><a href="#重点：" class="headerlink" title="重点："></a>重点：</h2><h3 id="路径参数可以不传吗？答案：不可以！路径参数是必传参数。"><a href="#路径参数可以不传吗？答案：不可以！路径参数是必传参数。" class="headerlink" title="路径参数可以不传吗？答案：不可以！路径参数是必传参数。"></a>路径参数可以不传吗？答案：不可以！路径参数是必传参数。</h3><p>实际栗子：</p><img src="/2023/11/08/python/fastapi/fastapi-4-lu-jing-can-shu-path-parameters/FastAPI-4%EF%BC%9A%E8%B7%AF%E5%BE%84%E5%8F%82%E6%95%B0Path%20Parameters-12.png" class=""><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p><strong>路径参数是请求路径的一部分，如果不传，请求的是另一个路径，如果不存在就会404</strong></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> FasAPI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> FastAPI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FastAPI-3：uvicorn.run()</title>
      <link href="/2023/11/07/python/fastapi/fastapi-3-uvicorn.run/"/>
      <url>/2023/11/07/python/fastapi/fastapi-3-uvicorn.run/</url>
      
        <content type="html"><![CDATA[<h1 id="FastAPI-3：uvicorn-run"><a href="#FastAPI-3：uvicorn-run" class="headerlink" title="FastAPI-3：uvicorn.run()"></a>FastAPI-3：uvicorn.run()</h1><h2 id="Uvicorn"><a href="#Uvicorn" class="headerlink" title="Uvicorn"></a>Uvicorn</h2><ul><li>基于 <code>uvloop</code> 和 <code>httptools</code> 构建的非常快速的 <code>ASGI</code> 服务器；</li><li>它不是一个 <code>Web</code> 框架，而是一个服务器；</li><li>例如，他不是一个提供路径路由的框架，这是 <code>FastAPI</code> 框架提供的东西；</li><li>它是 <code>Starlette</code> 和 <code>FastAPI</code> 的推荐使用的服务器。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><code>uvicorn</code> 是运行 <code>FastAPI</code> 应用程序的主要 <code>Web</code> 服务器，<code>uvicorn</code> 和 <code>Gunicorn</code> 结合使用，拥有一个异步多进程服务器。</p><h2 id="什么是ASGI、WSGI"><a href="#什么是ASGI、WSGI" class="headerlink" title="什么是ASGI、WSGI"></a>什么是ASGI、WSGI</h2><p><a href="https://www.cnblogs.com/poloyy/15291403.html">https://www.cnblogs.com/poloyy/15291403.html</a></p><h2 id="最简单的-FastAPI代码"><a href="#最简单的-FastAPI代码" class="headerlink" title="最简单的 FastAPI代码"></a>最简单的 FastAPI代码</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPIapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">'message'</span><span class="token punctuation">:</span> <span class="token string">'Hello World'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="启动-uvicorn"><a href="#启动-uvicorn" class="headerlink" title="启动 uvicorn"></a>启动 uvicorn</h2><p>进到 <code>.py</code> 文件所处目录下的命令运行</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">uvicorn main<span class="token punctuation">:</span>app <span class="token operator">-</span><span class="token operator">-</span><span class="token builtin">reload</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../static/Python/FastAPI/FastAPI-2%EF%BC%9A%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-1.png" alt="1"></p><p>能不能不用命令行方式运行呢，否则太不方便了？ –可以！</p><h3 id="使用-uvicorn-run"><a href="#使用-uvicorn-run" class="headerlink" title="使用 uvicorn.run()"></a>使用 <code>uvicorn.run()</code></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPIapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">'message'</span><span class="token punctuation">:</span> <span class="token string">'Hello World'</span><span class="token punctuation">}</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    uvicorn<span class="token punctuation">.</span>run<span class="token punctuation">(</span>app<span class="token operator">=</span><span class="token string">'main:app'</span><span class="token punctuation">,</span> host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> post<span class="token operator">=</span><span class="token number">8010</span><span class="token punctuation">,</span> <span class="token builtin">reload</span><span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment"># 这样就不用敲命令行啦；</span><span class="token comment"># uvicorn 有什么命令行参数，run()方法就有什么参数。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="uvicorn常用参数"><a href="#uvicorn常用参数" class="headerlink" title="uvicorn常用参数"></a>uvicorn常用参数</h3><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>app</td><td>运行的 .py 文件:FastAPI实例对象</td></tr><tr><td>host</td><td>访问url，默认 127.0.0.1</td></tr><tr><td>port</td><td>访问端口，默认8080</td></tr><tr><td>reload</td><td>热更新，有内容修改自动重启服务器</td></tr><tr><td>debug</td><td>同 reload</td></tr><tr><td>reload_dirs</td><td>设置需要 reload 的目录，List[str] 类型</td></tr><tr><td>log_level</td><td>设置日志级别，默认 info</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> FasAPI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> FastAPI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FastAPI-2：快速入门</title>
      <link href="/2023/11/06/python/fastapi/fastapi-2-kuai-su-ru-men/"/>
      <url>/2023/11/06/python/fastapi/fastapi-2-kuai-su-ru-men/</url>
      
        <content type="html"><![CDATA[<h1 id="FastAPI-2：快速入门"><a href="#FastAPI-2：快速入门" class="headerlink" title="FastAPI-2：快速入门"></a>FastAPI-2：快速入门</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> fastapi<span class="token comment"># 将来需要将应用程序部署到生产环境可以安装 uvicorn 作为服务器</span>pip <span class="token function">install</span> uvicorn<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="最简单的代码栗子"><a href="#最简单的代码栗子" class="headerlink" title="最简单的代码栗子"></a>最简单的代码栗子</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPIapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">'message'</span><span class="token punctuation">:</span> <span class="token string">"Hello World"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="运行-uvicorn-命令，启动服务器"><a href="#运行-uvicorn-命令，启动服务器" class="headerlink" title="运行 uvicorn 命令，启动服务器"></a>运行 <code>uvicorn</code> 命令，启动服务器</h2><p>进入 <code>.py</code> 文件所属目录的命令行</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">uvicorn main<span class="token punctuation">:</span>app <span class="token operator">-</span><span class="token operator">-</span><span class="token builtin">reload</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>main</strong> ：main.py文件（一个Python[模块]）；</li><li><strong>app</strong> ：在 main.py 文件中通过 app = FastAPI() 创建的对象；</li><li><strong>–reload</strong> ：让服务器在更新代码后自动重新启动，仅在开发时使用该选项。</li></ul><h3 id="服务启动示例"><a href="#服务启动示例" class="headerlink" title="服务启动示例"></a>服务启动示例</h3><img src="/2023/11/06/python/fastapi/fastapi-2-kuai-su-ru-men/FastAPI-2%EF%BC%9A%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-1.png" class=""><h3 id="浏览器访问"><a href="#浏览器访问" class="headerlink" title="浏览器访问"></a>浏览器访问</h3><img src="/2023/11/06/python/fastapi/fastapi-2-kuai-su-ru-men/FastAPI-2%EF%BC%9A%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-2.png" class=""><h3 id="查看交互式文档"><a href="#查看交互式文档" class="headerlink" title="查看交互式文档"></a>查看交互式文档</h3><img src="/2023/11/06/python/fastapi/fastapi-2-kuai-su-ru-men/FastAPI-2%EF%BC%9A%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-3.png" class=""><h3 id="查看可选的API文档"><a href="#查看可选的API文档" class="headerlink" title="查看可选的API文档"></a>查看可选的API文档</h3><img src="/2023/11/06/python/fastapi/fastapi-2-kuai-su-ru-men/FastAPI-2%EF%BC%9A%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-4.png" class=""><h2 id="OpenAPI"><a href="#OpenAPI" class="headerlink" title="OpenAPI"></a>OpenAPI</h2><p>FastAPI使用API的OpenAPI标准为所有API生成schema</p><h3 id="schema"><a href="#schema" class="headerlink" title="schema"></a>schema</h3><ul><li>是对事务的一种定义或描述；</li><li>它并非具体的实现代码，只是抽象描述；</li></ul><h3 id="API-Schema"><a href="#API-Schema" class="headerlink" title="API Schema"></a>API Schema</h3><ul><li>OpenAPI 是一种规定如何定义API Schema的规范；</li><li>定义的OpenAPI Schema将包括API路径，以及它们肯能使用的参数等等；</li><li>比如：这个API的作用是什么，需要必传哪些参数，请求方法是什么。</li></ul><h3 id="Data-Schema"><a href="#Data-Schema" class="headerlink" title="Data Schema"></a>Data Schema</h3><ul><li>指的是某些数据比如JSON的结构；</li><li>它可以表示JSON的属性及其具有的数据类型；</li><li>比如：某个属性的数据类型是什么，有没有默认值，是不是必填，作用是什么。</li></ul><h3 id="JSON-Schema"><a href="#JSON-Schema" class="headerlink" title="JSON Schema"></a>JSON Schema</h3><ul><li>OpenAPI会为API定义API Schema，一般会包括API发送和接收的数据的定义，比如：发送的数据的类型，是否必填；</li><li>这些定义会以JSON数据格式展示出来，所以都会称为JSON Schema。</li></ul><h3 id="查看-openapi-json"><a href="#查看-openapi-json" class="headerlink" title="查看 openapi.json"></a>查看 openapi.json</h3><p>原始的OpenAPI Schema，其实它只是一个自动生成的包含了所有API描述的JSON数据结构。</p><img src="/2023/11/06/python/fastapi/fastapi-2-kuai-su-ru-men/FastAPI-2%EF%BC%9A%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-5.png" class=""><h2 id="拆分代码详情"><a href="#拆分代码详情" class="headerlink" title="拆分代码详情"></a>拆分代码详情</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">### 第一步</span><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token comment"># 1、FastAPI 是一个为API提供了所有功能的Python类，必写就对了；</span><span class="token comment"># 2、FastAPI 是直接从 Starlette 继承的类，可以通过FastAPI使用所有的Starlette的功能。</span><span class="token comment">### 第二步</span>app <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 1、app就是FastAPI类的一个实例对象啦；</span><span class="token comment"># 2、重点：app 将是创建所有API的主要交互对象；</span><span class="token comment"># 3、要点：uvicorn 执行命令时也会用到app。</span><span class="token comment"># 将app变量名换一下：</span>my_app <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 那么运行时也需要换</span>uvicorn main<span class="token punctuation">:</span>my_app <span class="token operator">-</span><span class="token operator">-</span><span class="token builtin">reload</span><span class="token comment">### 第三步</span><span class="token comment"># 创建一个路径操作</span><span class="token comment"># 路径</span><span class="token comment"># 1、指的是URL中从第一个 / 起的后半部分，即常说的path</span><span class="token comment"># 2、比如：https://example.com/items/foo 的路径就是 /items/foo</span><span class="token comment"># 3、路径也称为：端点路由</span><span class="token comment"># 操作：就是HTTP请求方式</span>    <span class="token comment"># 1、POST</span>    <span class="token comment"># 2、GET</span>    <span class="token comment"># 3、PUT</span>    <span class="token comment"># 4、DELETE</span>    <span class="token comment"># 5、OPTIONS</span>    <span class="token comment"># 6、HEAD</span>    <span class="token comment"># 7、PATCH</span>    <span class="token comment"># 8、TRACE</span><span class="token comment"># 在 HTTP 协议中，可以使用以上的其中一种（或多种）与每个路径进行通信</span><span class="token comment"># 遵守RESTFul风格的话</span><span class="token comment"># 通常使用：</span>    <span class="token comment"># 1、POST：新建数据</span>    <span class="token comment"># 2、GET：获取数据</span>    <span class="token comment"># 3、PUT：更新数据</span>    <span class="token comment"># 4、DELETE：删除数据</span><span class="token comment"># 定义一个路径操作装饰器</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token comment"># 有两点含义</span>    <span class="token comment"># 1、请求路径为'/'</span>    <span class="token comment"># 2、使用 get 请求</span><span class="token comment"># 其它请求方法的装饰器</span>    <span class="token comment"># 1、@app.post()</span>    <span class="token comment"># 2、@app.put()</span>    <span class="token comment"># 3、@app.delete()</span>    <span class="token comment"># 4、@app.potions()</span>    <span class="token comment"># 5、@app.head()</span>    <span class="token comment"># 6、@app.patch()</span>    <span class="token comment"># 7、@app.trace()</span>    <span class="token comment">### 第四步</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># 1、这就是一个普通的Python函数；</span><span class="token comment"># 2、每当FastAPI接收一个使用 GET 方法访问路径为 / 的请求时这个函数会被调用；</span><span class="token comment"># 3、在这个栗子中，它是一个 async 函数（异步处理函数）。</span><span class="token comment"># 可以不加 async</span><span class="token keyword">def</span> <span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">### 第五步</span><span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">'message'</span><span class="token punctuation">:</span> <span class="token string">'Hello World'</span><span class="token punctuation">}</span><span class="token comment"># 1、可以返回一个 dict、list，也可是 str、int单个值；</span><span class="token comment"># 2、还可以返回 Pydantic 模型；</span><span class="token comment"># 3、还可以是其他会自动转换为JSON的对象和模型（包括ORM对象等）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="FastAPI入门总结"><a href="#FastAPI入门总结" class="headerlink" title="FastAPI入门总结"></a>FastAPI入门总结</h2><p>编写一个最简单的FastAPI应用程序五部曲</p><ol><li>导入FastAPI</li><li>创建一个app实例</li><li>编写一个路径操作装饰器，如 <code>@app.get('/')</code></li><li>编写一个路径操作函数，如 <code>def first():</code></li><li>运行开发服务器，如 <code>uvicron main:app --reload</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> FasAPI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> FastAPI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FastAPI-1：介绍</title>
      <link href="/2023/11/06/python/fastapi/fastapi-1-jie-shao/"/>
      <url>/2023/11/06/python/fastapi/fastapi-1-jie-shao/</url>
      
        <content type="html"><![CDATA[<h1 id="FastAPI-1：介绍"><a href="#FastAPI-1：介绍" class="headerlink" title="FastAPI-1：介绍"></a>FastAPI-1：介绍</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>为啥要学它呢，因为学 <code>Flask</code> 的时候发现有人更推荐它代替 <code>Flask</code> ，看了下介绍，感觉很强，而且也能拿来做平台，当然学起来！卷起来！</p><h2 id="为什么要是用FastAPI？"><a href="#为什么要是用FastAPI？" class="headerlink" title="为什么要是用FastAPI？"></a>为什么要是用FastAPI？</h2><ul><li>日渐没落的是后端HTML渲染这种方式，比如 <code>Flask + Jinja2</code> </li><li>前后端分离成为主流</li><li>异步框架</li></ul><p>官方地址：<a href="https://fastapi.tiangolo.com/">https://fastapi.tiangolo.com/</a></p><h2 id="FastAPI是什么？"><a href="#FastAPI是什么？" class="headerlink" title="FastAPI是什么？"></a>FastAPI是什么？</h2><ul><li><code>FastAPI</code> 是一个现代、快速（高性能）的web框架</li><li>用于基于标准 <code>Python</code> 类型提示是用 <code>Python 3.6+</code> 构建API</li></ul><h2 id="FastAPI版本要求"><a href="#FastAPI版本要求" class="headerlink" title="FastAPI版本要求"></a>FastAPI版本要求</h2><p>Python3.6+</p><h2 id="FastAPI优点"><a href="#FastAPI优点" class="headerlink" title="FastAPI优点"></a>FastAPI优点</h2><p>官方说明：</p><ul><li>类型检查、自动swagger UI、支持asyncio、强大的依赖注入系统；</li><li>围绕着框架本身的插件生态，比如pydantic、SQLAlchemy，成熟；</li><li>速度快：非常高的性能，与 <code>NodeJS</code> 和 <code>Go</code> 不相上下，多亏 <code>Starlette</code> 和 <code>Pydantic</code> ， FastAPI是最快的 <code>Python</code> 框架之一；</li><li>编码快：将开发特性所需的速度提高大约 200% 到 300%；</li><li>错误少：减少大约 40% 的人为（开发）错误；</li><li>直观：强大的编辑器支持，支持多场景开发，调试所花的时间更少；</li><li>简单：被设计为易于使用和学习，减少阅读文档的时间；</li><li>代码少：最小化重复，更少的错误；</li><li>健壮：代码可随时部署到生产环境，并自动提供交互文档；</li><li>标准：基于（并完全兼容）api的开放标准：OpenAPI（以前称为Swagger）和JSON模式</li></ul><h2 id="Pydantic-在-FastAPI"><a href="#Pydantic-在-FastAPI" class="headerlink" title="Pydantic 在 FastAPI"></a>Pydantic 在 FastAPI</h2><ul><li>FastAPI是完全建立在Pydantic的基础上的；</li><li>Pydantic是一个用来执行数据校验的Python库，具体教程可看：<a href="https://www.cnblogs.com/poloyy/tag/Pydantic/">https://www.cnblogs.com/poloyy/tag/Pydantic/</a></li></ul><h2 id="Type-Hints-在FastAPI"><a href="#Type-Hints-在FastAPI" class="headerlink" title="Type Hints 在FastAPI"></a>Type Hints 在FastAPI</h2><ul><li>Type Hints 介绍：<a href="https://www.cnblogs.com/poloyy/p/15145380.html">https://www.cnblogs.com/poloyy/p/15145380.html</a></li><li>typing 模块：<a href="https://www.cnblogs.com/poloyy/p/15150315.html">https://www.cnblogs.com/poloyy/p/15150315.html</a></li></ul><h3 id="使用FastAPI时用Type-Hints声明参数可以获得"><a href="#使用FastAPI时用Type-Hints声明参数可以获得" class="headerlink" title="使用FastAPI时用Type Hints声明参数可以获得"></a>使用FastAPI时用Type Hints声明参数可以获得</h3><ul><li>编辑器支持智能提示，错误检查；</li><li>类型检查，不对会报warning；</li></ul><h3 id="FastAPI还会用类型提示来做"><a href="#FastAPI还会用类型提示来做" class="headerlink" title="FastAPI还会用类型提示来做"></a>FastAPI还会用类型提示来做</h3><ul><li><strong>定义参数要求</strong> ：声明对请求路径参数、查询参数、请求头、请求体、依赖等的要求；</li><li><strong>转换数据</strong> ：将来自请求的数据转换为需要的类型；</li><li>**校验数据 **：对于每一个请求当数据校验失败时自动生成错误信息返回给客户端；</li><li><strong>使用 OpenAPI 记录API</strong> ：然后用于自动生成交互式文档的用户界面，参数会显示对应的类型注释。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> FasAPI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> FastAPI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笔记</title>
      <link href="/2023/11/05/bi-ji/"/>
      <url>/2023/11/05/bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h1><h2 id="一、Python的requirements-txt文件"><a href="#一、Python的requirements-txt文件" class="headerlink" title="一、Python的requirements.txt文件"></a>一、Python的requirements.txt文件</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 自动生成requirements.txt文件</span>pip freeze <span class="token operator">&gt;</span> requirements<span class="token punctuation">.</span>txt<span class="token comment"># 安装requirements.txt依赖</span>pip install <span class="token operator">-</span>r requirements<span class="token punctuation">.</span>txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、vim编辑器中文乱码问题"><a href="#二、vim编辑器中文乱码问题" class="headerlink" title="二、vim编辑器中文乱码问题"></a>二、vim编辑器中文乱码问题</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 执行（打开vi编辑器新建.vimrc文件）</span>$: <span class="token function">vi</span> ~/.vimrc---------------------------------<span class="token comment"># 文件内容</span><span class="token builtin class-name">set</span> <span class="token assign-left variable">encoding</span><span class="token operator">=</span>utf-8  <span class="token comment"># 显示的编码</span><span class="token builtin class-name">set</span> <span class="token assign-left variable">fileencoding</span><span class="token operator">=</span>utf-8  <span class="token comment"># 写入文件的编码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、Nginx配置"><a href="#三、Nginx配置" class="headerlink" title="三、Nginx配置"></a>三、Nginx配置</h2><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token comment"># 配置静态文件</span><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>    <span class="token directive"><span class="token keyword">location</span> ^~/static</span> <span class="token punctuation">{</span>  <span class="token comment"># 静态文件路由</span>        <span class="token directive"><span class="token keyword">alias</span> /usr/project/static</span><span class="token punctuation">;</span>  <span class="token comment"># 静态文件所在目录</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment"># 配置项目相关</span><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>    <span class="token directive"><span class="token keyword">location</span> /api</span> <span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">proxy_pass</span> http://127.0.0.1:8000</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">proxy_set_header</span> Host <span class="token variable">$host</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Protocol https</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Forwarded-For <span class="token variable">$proxy_add_x_forwarded_for</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">proxy_set_header</span> X-USERTOKEN <span class="token variable">$http_x_usertoken</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">proxy_connect_timeout</span> xxx</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">proxy_read_timeout</span> xxx</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">proxy_send_timeout</span> xxx</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、pymysql"><a href="#四、pymysql" class="headerlink" title="四、pymysql"></a>四、pymysql</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymysqldb <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>user<span class="token operator">=</span><span class="token string">'用户名'</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">'密码'</span><span class="token punctuation">,</span> host<span class="token operator">=</span><span class="token string">'主机ip'</span><span class="token punctuation">,</span> database<span class="token operator">=</span><span class="token string">'要连接的库名'</span><span class="token punctuation">)</span>  <span class="token comment"># 连接数据库</span>sql <span class="token operator">=</span> <span class="token string">'sql语句'</span><span class="token triple-quoted-string string">'''使用with，调用完自动close()'''</span><span class="token keyword">with</span> db<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">)</span>  <span class="token comment"># 连接成功，返回True</span>    cur <span class="token operator">=</span> db<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 创建游标</span>    cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>  <span class="token comment"># 执行sql语句</span>    cur<span class="token punctuation">.</span>description  <span class="token comment"># 显示每列的详细信息</span><span class="token keyword">print</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">)</span>  <span class="token comment"># with结束以后自动关闭，返回False</span><span class="token triple-quoted-string string">'''使用try'''</span>cur <span class="token operator">=</span> db<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 创建游标</span><span class="token keyword">try</span><span class="token punctuation">:</span>    cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>  <span class="token comment"># 执行sql语句</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>  <span class="token comment"># 捕获异常</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    cur<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 关掉游标</span>    db<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 断开连接</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、sqlite3"><a href="#五、sqlite3" class="headerlink" title="五、sqlite3"></a>五、sqlite3</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sqlite3con <span class="token operator">=</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">'sqlite3文件所在位置'</span><span class="token punctuation">)</span>  <span class="token comment"># 创建连接</span>cur <span class="token operator">=</span> con<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 创建游标</span>sql <span class="token operator">=</span> <span class="token string">'sql语句'</span><span class="token keyword">try</span><span class="token punctuation">:</span>    cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>  <span class="token comment"># 执行sql语句</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>  <span class="token comment"># 捕获异常</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    cur<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 关掉游标</span>    con<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 断开连接</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token comment">-- lua 操作sqlite3</span><span class="token keyword">local</span> sqlite3 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"sqlite3"</span><span class="token punctuation">)</span><span class="token keyword">local</span> env <span class="token operator">=</span> sqlite3<span class="token punctuation">.</span><span class="token function">sqlite3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">local</span> sql <span class="token operator">=</span> env<span class="token punctuation">:</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">"db文件路径"</span><span class="token punctuation">)</span><span class="token keyword">local</span> cursor<span class="token punctuation">,</span> errorString <span class="token operator">=</span> sql<span class="token punctuation">:</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token string">"SQL语句"</span><span class="token punctuation">)</span><span class="token keyword">local</span> row <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment">-- 定义空table获取cursor中的数据</span><span class="token keyword">while</span> <span class="token keyword">true</span> <span class="token keyword">do</span>    row <span class="token operator">=</span> cursor<span class="token punctuation">:</span><span class="token function">fetch</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> row <span class="token operator">~=</span> <span class="token keyword">nil</span> <span class="token keyword">then</span>        <span class="token keyword">break</span>   <span class="token keyword">end</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 其他操作</span><span class="token comment"># 开启表头：.header on</span><span class="token comment"># 列 对 齐：.mode column</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="六、scp远程拷贝"><a href="#六、scp远程拷贝" class="headerlink" title="六、scp远程拷贝"></a>六、scp远程拷贝</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">scp</span> 连接名@连接地址:文件位置 要放到的位置<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="七、find查找文件"><a href="#七、find查找文件" class="headerlink" title="七、find查找文件"></a>七、find查找文件</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> <span class="token parameter variable">-name</span> <span class="token string">'文件名'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="八、MySQL基本查询语句"><a href="#八、MySQL基本查询语句" class="headerlink" title="八、MySQL基本查询语句"></a>八、MySQL基本查询语句</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> 表名 <span class="token keyword">WHERE</span> 条件<span class="token punctuation">;</span>  <span class="token comment"># 查询</span><span class="token keyword">UPDATE</span> 表名 <span class="token keyword">SET</span> 要修改的内容 <span class="token keyword">WHERE</span> 条件<span class="token punctuation">;</span>  <span class="token comment"># 修改</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> 表名 <span class="token punctuation">(</span>字段名<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span>字段对应内容<span class="token punctuation">)</span>； <span class="token comment"># 添加数据</span><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> 表名 <span class="token keyword">WHERE</span> 条件<span class="token punctuation">;</span>  <span class="token comment"># 删除字段</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> {表名}  <span class="token comment"># 删除表</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="九、es相关功能"><a href="#九、es相关功能" class="headerlink" title="九、es相关功能"></a>九、es相关功能</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token string">'localhost:9200/_cat/indices?v'</span>  <span class="token comment"># 查看所有索引</span><span class="token function">curl</span> <span class="token string">'localhost:9200/_cat/indices?v&amp;s={列名}'</span>  <span class="token comment"># 查看所有索引，根据某一列进行排序</span><span class="token function">curl</span> <span class="token parameter variable">-XPOST</span> <span class="token string">'http://localhost:9200/{索引名称}/_unfreeze'</span>  <span class="token comment"># 索引解冻</span><span class="token function">curl</span> <span class="token parameter variable">-XGET</span> <span class="token string">'http://localhost:9200/_mapping?pretty'</span>  <span class="token comment"># 查看所有type</span><span class="token function">curl</span> <span class="token parameter variable">-XGET</span> <span class="token string">'http://localhost:9200/_cat/templates/?v'</span>  <span class="token comment"># 查看所有模板</span><span class="token function">curl</span> <span class="token parameter variable">-XGET</span> <span class="token string">'http://localhost:9200/{索引名称}/_search?pretty'</span>  <span class="token comment"># 查看索引数据</span><span class="token function">curl</span> <span class="token parameter variable">-XGET</span> <span class="token string">'http://localhost:9200/{索引名称}/_mapping?pretty'</span>  <span class="token comment"># 查看索引结构</span><span class="token function">curl</span> <span class="token parameter variable">-XGET</span> <span class="token string">'http://localhost:9200/{索引名称}/_mapping/field/{字段名}?pretty'</span>  <span class="token comment"># 查看索引下字段的映射</span><span class="token function">curl</span> <span class="token parameter variable">-XGET</span> <span class="token string">'http://localhost:9200/_index_template/{索引模板名称}'</span>  <span class="token comment"># 查看索引模板名称</span><span class="token function">curl</span> <span class="token parameter variable">-XGET</span> <span class="token string">'http://localhost:9200/_component_template/{组件模板名称}'</span>  <span class="token comment"># 查看组件模板</span><span class="token comment"># es的cat命令</span><span class="token assign-left variable">EsIp</span><span class="token operator">=</span><span class="token string">"http://localhost:9200/"</span><span class="token function">curl</span> <span class="token parameter variable">-XGET</span> <span class="token variable">${EsIp}</span>_cat/master?help  <span class="token comment"># help 查看帮助</span><span class="token function">curl</span> <span class="token parameter variable">-XGET</span> <span class="token variable">${EsIp}</span>_cat/master?v  <span class="token comment"># verbose 显示列名，查看master节点</span><span class="token function">curl</span> <span class="token parameter variable">-XGET</span> <span class="token variable">${EsIp}</span>_cat/master?v<span class="token operator">&amp;</span><span class="token assign-left variable">h</span><span class="token operator">=</span>host,ip,node  <span class="token comment"># Headers 只显示特定列</span><span class="token function">curl</span> <span class="token parameter variable">-XGET</span> <span class="token variable">${EsIp}</span>_cat/indices?v<span class="token operator">&amp;</span><span class="token assign-left variable">h</span><span class="token operator">=</span>index,docs.count,store.size<span class="token operator">&amp;</span><span class="token assign-left variable">bytes</span><span class="token operator">=</span>kb  <span class="token comment"># Bytes 数字格式化展示</span><span class="token function">curl</span> <span class="token parameter variable">-XGET</span> <span class="token variable">${EsIp}</span>_cat/indices?v<span class="token operator">&amp;</span><span class="token assign-left variable">h</span><span class="token operator">=</span>index,docs.count,store.size<span class="token operator">&amp;</span><span class="token assign-left variable">bytes</span><span class="token operator">=</span>kb<span class="token operator">&amp;</span><span class="token assign-left variable">format</span><span class="token operator">=</span>json<span class="token operator">&amp;</span>pretty  <span class="token comment"># json格式输出</span><span class="token function">curl</span> <span class="token parameter variable">-XGET</span> <span class="token variable">${EsIp}</span>_cat/indices?v<span class="token operator">&amp;</span><span class="token assign-left variable">h</span><span class="token operator">=</span>index,docs.count,store.size<span class="token operator">&amp;</span><span class="token assign-left variable">bytes</span><span class="token operator">=</span>kb<span class="token operator">&amp;</span><span class="token assign-left variable">format</span><span class="token operator">=</span>yaml<span class="token operator">&amp;</span>pretty  <span class="token comment"># yaml格式输出</span><span class="token function">curl</span> <span class="token parameter variable">-XGET</span> <span class="token variable">${EsIp}</span>_cat/indices?v<span class="token operator">&amp;</span><span class="token assign-left variable">h</span><span class="token operator">=</span>index,docs.count,store.size<span class="token operator">&amp;</span><span class="token assign-left variable">bytes</span><span class="token operator">=</span>kb<span class="token operator">&amp;</span>pretty<span class="token operator">&amp;</span><span class="token assign-left variable">s</span><span class="token operator">=</span>index,docs.count:desc  <span class="token comment"># Sort排序，根据index升序，docs.count降序</span><span class="token function">curl</span> <span class="token parameter variable">-XGET</span> <span class="token variable">${EsIp}</span>_cat/health?v<span class="token operator">&amp;</span><span class="token assign-left variable">h</span><span class="token operator">=</span>cluster,status  <span class="token comment"># 查看集群健康状态</span><span class="token function">curl</span> <span class="token parameter variable">-XGET</span> <span class="token variable">${EsIp}</span>_cat/nodes?v  <span class="token comment"># 查看集群节点</span><span class="token function">curl</span> <span class="token parameter variable">-XGET</span> <span class="token variable">${EsIp}</span>_cat/nodes?v<span class="token operator">&amp;</span><span class="token assign-left variable">h</span><span class="token operator">=</span>ip,node.role,name,disk.avail  <span class="token comment"># 磁盘剩余</span><span class="token function">curl</span> <span class="token parameter variable">-XGET</span> <span class="token variable">${EsIp}</span>_cat/allocation?v  <span class="token comment"># 查看每个数据节点上的分片数（shards），以及每个数据节点磁盘剩余</span><span class="token function">curl</span> <span class="token parameter variable">-XGET</span> <span class="token variable">${EsIp}</span>_cat/pending_tasks?v  <span class="token comment"># 查看被挂起的任务</span><span class="token function">curl</span> <span class="token parameter variable">-XGET</span> <span class="token variable">${EsIp}</span>_cat/plugins?v  <span class="token comment"># 查看每个节点正在运行的插件</span><span class="token function">curl</span> <span class="token parameter variable">-XGET</span> <span class="token variable">${EsIp}</span>_cat/nodeattrs?v  <span class="token comment"># 查看每个节点的自定义属性</span><span class="token function">curl</span> <span class="token parameter variable">-XGET</span> <span class="token variable">${EsIp}</span>_cat/recovery/.kibana?v<span class="token operator">&amp;</span><span class="token assign-left variable">format</span><span class="token operator">=</span>json<span class="token operator">&amp;</span>pretty  <span class="token comment"># 查看索引分片的恢复视图</span><span class="token function">curl</span> <span class="token parameter variable">-XGET</span> <span class="token variable">${EsIp}</span>_cat/fielddata?v<span class="token operator">&amp;</span><span class="token assign-left variable">h</span><span class="token operator">=</span>node,field,size  <span class="token comment"># 查看每个数据节点上fielddate当前占用的堆栈内存</span><span class="token function">curl</span> <span class="token parameter variable">-XGET</span> <span class="token variable">${EsIp}</span>_cat/recovery/.kibana?v<span class="token operator">&amp;</span><span class="token assign-left variable">format</span><span class="token operator">=</span>json<span class="token operator">&amp;</span>pretty  <span class="token comment"># 对某一字段进行查看</span><span class="token function">curl</span> <span class="token parameter variable">-XGET</span> <span class="token variable">${EsIp}</span>_cat/repositories?v  <span class="token comment"># 查看注册的快照仓库</span><span class="token function">curl</span> <span class="token parameter variable">-XGET</span> <span class="token variable">${EsIp}</span>_cat/snapshots/repo1?v  <span class="token comment"># 查看快照仓库下的快照</span><span class="token function">curl</span> <span class="token parameter variable">-XGET</span> <span class="token variable">${EsIp}</span>_cat/thread_pool/bulk?v<span class="token operator">&amp;</span><span class="token assign-left variable">format</span><span class="token operator">=</span>json<span class="token operator">&amp;</span>pretty  <span class="token comment"># 查看每个节点线程池的统计信息</span><span class="token function">curl</span> <span class="token parameter variable">-XGET</span> <span class="token variable">${EsIp}</span>_cat/indices/.monitoring*?v<span class="token operator">&amp;</span><span class="token assign-left variable">h</span><span class="token operator">=</span>index,health  <span class="token comment"># 查看索引</span><span class="token function">curl</span> <span class="token parameter variable">-XGET</span> <span class="token variable">${EsIp}</span>_cat/aliases?v<span class="token operator">&amp;</span><span class="token assign-left variable">h</span><span class="token operator">=</span>alias,index  <span class="token comment"># 查看别名</span><span class="token function">curl</span> <span class="token parameter variable">-XGET</span> <span class="token variable">${EsIp}</span>_cat/templates?v<span class="token operator">&amp;</span><span class="token assign-left variable">format</span><span class="token operator">=</span>json<span class="token operator">&amp;</span>pretty  <span class="token comment"># 查看索引模板</span><span class="token function">curl</span> <span class="token parameter variable">-XGET</span> <span class="token variable">${EsIp}</span>_cat/count?v  <span class="token comment"># 整个集群文档数</span><span class="token function">curl</span> <span class="token parameter variable">-XGET</span> <span class="token variable">${EsIp}</span>_cat/count/.monitoring*?v  <span class="token comment"># 某一类索引文档数</span><span class="token function">curl</span> <span class="token parameter variable">-XGET</span> <span class="token variable">${EsIp}</span>_cat/shards?v<span class="token operator">&amp;</span><span class="token assign-left variable">format</span><span class="token operator">=</span>json<span class="token operator">&amp;</span>pretty<span class="token operator">&amp;</span><span class="token assign-left variable">s</span><span class="token operator">=</span>index  <span class="token comment"># 查看每个索引的分片</span><span class="token function">curl</span> <span class="token parameter variable">-XGET</span> <span class="token variable">${EsIp}</span>_cat/segments/.kibana?v<span class="token operator">&amp;</span><span class="token assign-left variable">format</span><span class="token operator">=</span>json<span class="token operator">&amp;</span>pretty  <span class="token comment"># 查看每个索引的segment</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="十、字符串转换为字典"><a href="#十、字符串转换为字典" class="headerlink" title="十、字符串转换为字典"></a>十、字符串转换为字典</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">'{"name": "Justin Bieber", "age": 44, "gender": "男"}'</span><span class="token keyword">import</span> jsonuser_dict <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Justin Bieber"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token string">"gender"</span><span class="token punctuation">:</span> <span class="token string">"男"</span><span class="token punctuation">}</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token keyword">import</span> astuser_dict <span class="token operator">=</span> ast<span class="token punctuation">.</span>lateral_eval<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>user_dict<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Justin Bieber"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token string">"gender"</span><span class="token punctuation">:</span> <span class="token string">"男"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="十一、IP转换、判断是否合法"><a href="#十一、IP转换、判断是否合法" class="headerlink" title="十一、IP转换、判断是否合法"></a>十一、IP转换、判断是否合法</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 端口范围 [0, 65535]</span><span class="token keyword">import</span> socket<span class="token punctuation">,</span> structsocket<span class="token punctuation">.</span>inet_ntoa<span class="token punctuation">(</span>struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">"!I"</span><span class="token punctuation">,</span> ip<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 整型转换为字符型 int -&gt; str</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token comment">--判断ip是否合法</span><span class="token keyword">function</span> <span class="token function">JudgeIPString</span><span class="token punctuation">(</span>ipStr<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token function">type</span><span class="token punctuation">(</span>ipStr<span class="token punctuation">)</span> <span class="token operator">~=</span> <span class="token string">"string"</span> <span class="token keyword">then</span>        <span class="token keyword">return</span> <span class="token keyword">false</span><span class="token punctuation">;</span>    <span class="token keyword">end</span>        <span class="token comment">--判断长度</span>    <span class="token keyword">local</span> len <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span>ipStr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> len <span class="token operator">&lt;</span> <span class="token number">7</span> <span class="token keyword">or</span> len <span class="token operator">&gt;</span> <span class="token number">15</span> <span class="token keyword">then</span> <span class="token comment">--长度不对</span>        <span class="token keyword">return</span> <span class="token keyword">false</span><span class="token punctuation">;</span>    <span class="token keyword">end</span>     <span class="token comment">--判断出现的非数字字符</span>    <span class="token keyword">local</span> point <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>ipStr<span class="token punctuation">,</span> <span class="token string">"%p"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">--字符"."出现的位置</span>    <span class="token keyword">local</span> pointNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">--字符"."出现的次数 正常ip有3个"."</span>    <span class="token keyword">while</span> point <span class="token operator">~=</span> <span class="token keyword">nil</span> <span class="token keyword">do</span>        <span class="token keyword">if</span> string<span class="token punctuation">.</span><span class="token function">sub</span><span class="token punctuation">(</span>ipStr<span class="token punctuation">,</span> point<span class="token punctuation">,</span> point<span class="token punctuation">)</span> <span class="token operator">~=</span> <span class="token string">"."</span> <span class="token keyword">then</span> <span class="token comment">--得到非数字符号不是字符"."</span>            <span class="token keyword">return</span> <span class="token keyword">false</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>        pointNum <span class="token operator">=</span> pointNum <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        point <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>ipStr<span class="token punctuation">,</span> <span class="token string">"%p"</span><span class="token punctuation">,</span> point <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> pointNum <span class="token operator">&gt;</span> <span class="token number">3</span> <span class="token keyword">then</span>            <span class="token keyword">return</span> <span class="token keyword">false</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>    <span class="token keyword">end</span>    <span class="token keyword">if</span> pointNum <span class="token operator">~=</span> <span class="token number">3</span> <span class="token keyword">then</span> <span class="token comment">--不是正确的ip格式</span>        <span class="token keyword">return</span> <span class="token keyword">false</span><span class="token punctuation">;</span>    <span class="token keyword">end</span>     <span class="token comment">--判断数字对不对</span>    <span class="token keyword">local</span> num <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> w <span class="token keyword">in</span> string<span class="token punctuation">.</span><span class="token function">gmatch</span><span class="token punctuation">(</span>ipStr<span class="token punctuation">,</span> <span class="token string">"%d+"</span><span class="token punctuation">)</span> <span class="token keyword">do</span>        num<span class="token punctuation">[</span><span class="token operator">#</span>num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> w<span class="token punctuation">;</span>        <span class="token keyword">local</span> kk <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> kk <span class="token operator">==</span> <span class="token keyword">nil</span> <span class="token keyword">or</span> kk <span class="token operator">&gt;</span> <span class="token number">255</span> <span class="token keyword">then</span> <span class="token comment">--不是数字或超过ip正常取值范围了</span>            <span class="token keyword">return</span> <span class="token keyword">false</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>    <span class="token keyword">end</span>     <span class="token keyword">if</span> <span class="token operator">#</span>num <span class="token operator">~=</span> <span class="token number">4</span> <span class="token keyword">then</span> <span class="token comment">--不是4段数字</span>        <span class="token keyword">return</span> <span class="token keyword">false</span><span class="token punctuation">;</span>    <span class="token keyword">end</span>     <span class="token keyword">return</span> ipStr<span class="token punctuation">;</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="十二、Redis查询key"><a href="#十二、Redis查询key" class="headerlink" title="十二、Redis查询key"></a>十二、Redis查询key</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ redis-cli$ keys *  <span class="token comment"># 查询所有的键</span>$ dbsize  <span class="token comment"># 获取键的总数</span>$ exists key <span class="token punctuation">[</span>key<span class="token punctuation">]</span>  <span class="token comment"># 查看键是否存在</span>$ del <span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token punctuation">[</span>key<span class="token punctuation">]</span>  <span class="token comment"># 删除键，可以删除一个或多个</span>$ <span class="token builtin class-name">type</span> <span class="token punctuation">[</span>key<span class="token punctuation">]</span>  <span class="token comment"># 查看键的类型</span>$ get <span class="token punctuation">[</span>key<span class="token punctuation">]</span>  <span class="token comment"># 查看键中的值</span>$ <span class="token builtin class-name">set</span> <span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token punctuation">[</span>value<span class="token punctuation">]</span>  <span class="token comment"># 存放键值</span>$ mset <span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token punctuation">[</span>value<span class="token punctuation">]</span> <span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token punctuation">[</span>value<span class="token punctuation">]</span>  <span class="token comment"># 批量存放键值</span>$ append <span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token punctuation">[</span>value<span class="token punctuation">]</span>  <span class="token comment"># 追加内容</span>$ <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="十三、celery相关"><a href="#十三、celery相关" class="headerlink" title="十三、celery相关"></a>十三、celery相关</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''启动相关'''</span><span class="token comment"># celery启动worker命令</span>celery <span class="token operator">-</span>A <span class="token punctuation">{</span>包含celery文件的文件夹名称<span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">{</span>celery启动文件<span class="token punctuation">}</span> worker <span class="token operator">-</span>l infocelery app <span class="token punctuation">{</span>包含celery文件的文件夹名称<span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">{</span>celery启动文件<span class="token punctuation">}</span> worker <span class="token operator">-</span>l info<span class="token comment"># 上面两条命令作用相同</span><span class="token comment"># celery启动beat的命令</span>celery beat <span class="token operator">-</span>A <span class="token punctuation">{</span>包含celery文件的文件夹名称<span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">{</span>celery启动文件<span class="token punctuation">}</span> <span class="token operator">-</span>l info  <span class="token comment"># Linux</span>celery beat app <span class="token punctuation">{</span>包含celery文件的文件夹名称<span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">{</span>celery启动文件<span class="token punctuation">}</span> <span class="token operator">-</span>l infocelery <span class="token operator">-</span>A <span class="token punctuation">{</span>包含celery文件的文件夹名称<span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">{</span>celery启动文件<span class="token punctuation">}</span> beat <span class="token operator">-</span>l info <span class="token comment"># Windows</span><span class="token comment"># 以上两条命令作用相同</span><span class="token triple-quoted-string string">'''停止相关'''</span><span class="token comment"># 杀死所有celery进程</span>ps auxww <span class="token operator">|</span> grep <span class="token string">'celery'</span> <span class="token operator">|</span> awk <span class="token string">'{print $2}'</span> <span class="token operator">|</span> xargs kill <span class="token operator">-</span><span class="token number">9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="十四、Python操作"><a href="#十四、Python操作" class="headerlink" title="十四、Python操作"></a>十四、Python操作</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''判断某键是否在字典中'''</span><span class="token punctuation">{</span>字典变量<span class="token punctuation">}</span><span class="token punctuation">.</span>__contains__<span class="token punctuation">(</span><span class="token string">'{键}'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="十五、MongoDB查询语法（大多数不能使用符号的都可以）"><a href="#十五、MongoDB查询语法（大多数不能使用符号的都可以）" class="headerlink" title="十五、MongoDB查询语法（大多数不能使用符号的都可以）"></a>十五、MongoDB查询语法（大多数不能使用符号的都可以）</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$gt</span><span class="token builtin class-name">:</span> 大于<span class="token variable">$lt</span><span class="token builtin class-name">:</span> 小于<span class="token variable">$gte</span><span class="token builtin class-name">:</span> 大于等于<span class="token variable">$lte</span><span class="token builtin class-name">:</span> 小于等于<span class="token variable">$ne</span><span class="token builtin class-name">:</span> 不等于<span class="token variable">$mod</span><span class="token builtin class-name">:</span> 取模运算db.things.find<span class="token punctuation">(</span><span class="token string">"this.a % 10 == 1"</span><span class="token punctuation">)</span> <span class="token operator">==</span> db.things.find<span class="token punctuation">(</span><span class="token punctuation">{</span>a: <span class="token punctuation">{</span><span class="token variable">$mod</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token number">10</span>, <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token variable">$all</span> 和 <span class="token variable">$in</span><span class="token builtin class-name">:</span> 匹配条件内所有的值<span class="token punctuation">{</span>a: <span class="token punctuation">[</span> <span class="token number">1</span>, <span class="token number">2</span>, <span class="token number">3</span> <span class="token punctuation">]</span><span class="token punctuation">}</span>这个：<span class="token variable"><span class="token variable">`</span>db.things.find<span class="token punctuation">(</span><span class="token punctuation">{</span>a: <span class="token punctuation">{</span>$all: <span class="token punctuation">[</span> <span class="token number">2</span>, <span class="token number">3</span> <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">`</span></span>可以匹配；这个：<span class="token variable"><span class="token variable">`</span>db.things.find<span class="token punctuation">(</span><span class="token punctuation">{</span>a: <span class="token punctuation">{</span>$all: <span class="token punctuation">[</span> <span class="token number">2</span>, <span class="token number">3</span>, <span class="token number">4</span> <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">`</span></span>无法匹配。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="十六、设备一分钟内允许返回的重启思路"><a href="#十六、设备一分钟内允许返回的重启思路" class="headerlink" title="十六、设备一分钟内允许返回的重启思路"></a>十六、设备一分钟内允许返回的重启思路</h2><blockquote><h3 id="python实现："><a href="#python实现：" class="headerlink" title="python实现："></a>python实现：</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;</span><span class="token comment"># 格式化获取现在时间(时：分)</span><span class="token operator">&gt;</span>now_time <span class="token operator">=</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%H:%M"</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token comment"># 分隔</span><span class="token operator">&gt;</span>now_time <span class="token operator">=</span> now_time<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token comment"># 给`分`位数字加一</span><span class="token operator">&gt;</span>dis_time <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>now_time<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token comment"># 再将时间进行替换拼接</span><span class="token operator">&gt;</span>now_time <span class="token operator">=</span> <span class="token string">":"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>dis_time <span class="token keyword">if</span> now_time<span class="token punctuation">.</span>index<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">else</span> i <span class="token keyword">for</span> i <span class="token keyword">in</span> now_time<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token comment"># 执行定时关机</span><span class="token operator">&gt;</span>os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"shutdown -r </span><span class="token interpolation"><span class="token punctuation">{</span>now_time<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="node-js实现："><a href="#node-js实现：" class="headerlink" title="node.js实现："></a>node.js实现：</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&gt;</span><span class="token comment">// 导入moment模块</span><span class="token operator">&gt;</span><span class="token keyword">const</span> moment <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'moment'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&gt;</span><span class="token keyword">var</span> execSync <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"child_process"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>execSync<span class="token punctuation">;</span><span class="token operator">&gt;</span><span class="token comment">// var now_time = moment().format('YYYY-MM-DD HH:mm:ss');</span><span class="token operator">&gt;</span><span class="token comment">// 获取现在时间（时：分）</span><span class="token operator">&gt;</span><span class="token keyword">var</span> now_time <span class="token operator">=</span> <span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'HH:mm'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&gt;</span><span class="token comment">// 给`分`位数字加一</span><span class="token operator">&gt;</span><span class="token keyword">var</span> dis_time <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>now_time<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">&gt;</span><span class="token comment">// 转换成字符串</span><span class="token operator">&gt;</span><span class="token keyword">var</span> dis_time <span class="token operator">=</span> dis_time<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&gt;</span><span class="token comment">// 定义一个空数组</span><span class="token operator">&gt;</span><span class="token keyword">var</span> new_time <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&gt;</span><span class="token comment">// 将需要的数（时、分）加入数组</span><span class="token operator">&gt;</span>new_time<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>now_time<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&gt;</span>new_time<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>dis_time<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&gt;</span><span class="token comment">// 将数组转换为字符串</span><span class="token operator">&gt;</span><span class="token keyword">var</span> new_time <span class="token operator">=</span> new_time<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&gt;</span><span class="token function">execSync</span><span class="token punctuation">(</span><span class="token string">"shutdown -r "</span> <span class="token operator">+</span> new_time<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="十七、node-js时间模块"><a href="#十七、node-js时间模块" class="headerlink" title="十七、node.js时间模块"></a>十七、node.js时间模块</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> moment <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'moment'</span><span class="token punctuation">)</span><span class="token keyword">var</span> now_time <span class="token operator">=</span> <span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM-DD HH:mm:ss'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="十八、tar命令"><a href="#十八、tar命令" class="headerlink" title="十八、tar命令"></a>十八、tar命令</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># tar打包命令</span>打包：tar <span class="token parameter variable">-cvf</span> 打包以后的文件名 要打包的文件名例子：tar <span class="token parameter variable">-cvf</span> flask.tar flask/打包：tar <span class="token parameter variable">-zcvf</span> 压缩以后的文件名 要压缩的文件名例子：tar <span class="token parameter variable">-zcvf</span> flask.tar.gz flask/<span class="token comment"># tar解压命令</span>解包：tar -xvf<span class="token punctuation">(</span>-zxvf<span class="token punctuation">)</span> 压缩包名指定位置解包：tar -xvf<span class="token punctuation">(</span>-zxvf<span class="token punctuation">)</span> 压缩包名 <span class="token parameter variable">-C</span> 要解压的位置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="十九、websocket"><a href="#十九、websocket" class="headerlink" title="十九、websocket"></a>十九、websocket</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 报错是需要可证的，直接取消验证许可</span><span class="token keyword">import</span> ssl<span class="token keyword">from</span> websocket <span class="token keyword">import</span> create_connectionurl <span class="token operator">=</span> <span class="token string">'wss://127.0.0.1/...'</span>ws <span class="token operator">=</span> create_connection<span class="token punctuation">(</span>url<span class="token punctuation">,</span> sslopt<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'cert_reqs'</span><span class="token punctuation">:</span> ssl<span class="token punctuation">.</span>CERT_NONE<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment"># 报错是没有'http、https、ws、wss'协议的，url的前缀不对</span>url <span class="token operator">=</span> <span class="token string">'`wss`://localhost/...'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二十、ip相关命令"><a href="#二十、ip相关命令" class="headerlink" title="二十、ip相关命令"></a>二十、ip相关命令</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ifconfig</span> eth0 <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">'inet addr'</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{ print $2}'</span> <span class="token operator">|</span> <span class="token function">awk</span> -F: <span class="token string">'{print $2}'</span>  <span class="token comment"># 获取eth0的ip</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="二十一、Linux一些命令说明"><a href="#二十一、Linux一些命令说明" class="headerlink" title="二十一、Linux一些命令说明"></a>二十一、Linux一些命令说明</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">~/  <span class="token comment">#是指 [/home/使用的用户/] </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="二十二、systemctl-服务命令无法启动"><a href="#二十二、systemctl-服务命令无法启动" class="headerlink" title="二十二、systemctl 服务命令无法启动"></a>二十二、systemctl 服务命令无法启动</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 因环境变量无法启动</span><span class="token comment"># 场景：python使用的sqlite3与系统中的sqlite3版本不一致导致项目无法启动</span><span class="token comment"># 解决：</span><span class="token comment"># 创建文件：/etc/systemd/system/[服务].service.d/[任意名称].conf</span><span class="token comment"># **注**：服务名称必须与.service文件的相同</span><span class="token comment"># /etc/systemd/system/*.service.d/*.conf</span><span class="token punctuation">[</span>Server<span class="token punctuation">]</span><span class="token assign-left variable">Environment</span><span class="token operator">=</span><span class="token string">"环境变量"</span><span class="token assign-left variable">Environment</span><span class="token operator">=</span><span class="token string">"环境变量"</span><span class="token punctuation">..</span>.<span class="token comment"># 重启服务</span>systemctl daemon-reload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二十三、无法加载文件-WindowsPowerShell-profile-ps1，因为在此系统上禁止-运行脚本"><a href="#二十三、无法加载文件-WindowsPowerShell-profile-ps1，因为在此系统上禁止-运行脚本" class="headerlink" title="二十三、无法加载文件 WindowsPowerShell\profile.ps1，因为在此系统上禁止 运行脚本"></a>二十三、无法加载文件 WindowsPowerShell\profile.ps1，因为在此系统上禁止 运行脚本</h2><img src="/2023/11/05/bi-ji/%E7%AC%94%E8%AE%B0-23.png" class=""><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 解决方案：</span><span class="token comment"># 使用管理员身份打开，Power Shell（Windows终端）</span>Set-ExecutionPolicy RemoteSigned<span class="token comment"># --如果弹出选项就输入： Y</span>Get-ExecutionPolicy<span class="token comment"># --输出：RemoteSigned</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二十四、命令行里面使用python导入报错"><a href="#二十四、命令行里面使用python导入报错" class="headerlink" title="二十四、命令行里面使用python导入报错"></a>二十四、命令行里面使用python导入报错</h2><img src="/2023/11/05/bi-ji/%E7%AC%94%E8%AE%B0-24.png" class=""><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 解决方法</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> django<span class="token punctuation">.</span>conf <span class="token keyword">import</span> settings  <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> settings<span class="token punctuation">.</span>configure<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="二十五、Vue-打包命令"><a href="#二十五、Vue-打包命令" class="headerlink" title="二十五、Vue 打包命令"></a>二十五、Vue 打包命令</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> run build<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="二十六、Navicat-远程连接数据库"><a href="#二十六、Navicat-远程连接数据库" class="headerlink" title="二十六、Navicat 远程连接数据库"></a>二十六、Navicat 远程连接数据库</h2><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 查询被连接主机MySQL用户状态USE mysql;SELECT host,user FROM user WHERE user="root";&gt;&gt;&gt; host       user&gt;&gt;&gt; localhost  root# 修改状态UPDATE user SET host="%" WHERE user="root";# 这样，任意机器都可以使用Navicat连接该设备的数据库了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二十七、MySQL初始化"><a href="#二十七、MySQL初始化" class="headerlink" title="二十七、MySQL初始化"></a>二十七、MySQL初始化</h2><blockquote><p>MySQL 报错MySQL.sock，不存在</p><p>ERROR 2002 (HY000): Can’t connect to local MySQL server through socket ‘/var/run/mysqld/mysqld.sock’ (2)</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">service</span> mysqld stop          <span class="token comment"># 停止MySQL服务</span><span class="token function">rm</span> <span class="token parameter variable">-rf</span> /var/lib/mysql/*      <span class="token comment"># 删除 /var/lib/mysql/ 下的所有文件</span><span class="token comment"># 下面的操作看情况进行</span><span class="token function">rm</span> /var/lock/subsys/mysqld   <span class="token comment"># 删除锁定文件</span><span class="token function">killall</span> mysqld               <span class="token comment"># 杀死所有MySQL进程</span><span class="token comment"># 上面的操作看情况进行</span>mysqld <span class="token parameter variable">--initialize</span>          <span class="token comment"># 初始化MySQL</span><span class="token function">service</span> mysql start          <span class="token comment"># 启动MySQL服务</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="免密启动"><a href="#免密启动" class="headerlink" title="免密启动"></a>免密启动</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/mysql/mysql.conf.d/mysqld.cnf<span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>skip-grant-table<span class="token comment"># 退出</span><span class="token function">service</span> mysql restart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="清空-authentication-string-字段"><a href="#清空-authentication-string-字段" class="headerlink" title="清空 authentication_string 字段"></a>清空 authentication_string 字段</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql -uroot                 # 进入MySQLUSE mysql;                   # 使用mysql数据库UPDATE `user`SET authentication_string=""WHERE user="root";           # 修改root用户密码为空exit                         # 退出数据库# 关闭免密，并重启服务<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql -urootSET password='自己的密码';FLUSH PRIVILEGES;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="二十八、Vue自适应"><a href="#二十八、Vue自适应" class="headerlink" title="二十八、Vue自适应"></a>二十八、Vue自适应</h2><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;el-col        :lg="{ span: 3, offset: 0 }"        :md="{ span: 8, offset: 0 }"        :sm="{ span: 8, offset: 0 }"        :xl="{ span: 6, offset: 0 }"         :xs="{ span: 8, offset: 0 }" &gt;&lt;/el-col&gt;&lt;!--栅栏一共24个lg: 大屏显示器，办公使用md：中屏显示器，笔记本                   span 栅格占据的列数 offset 栅格左侧的间隔数sm：小屏显示器，平板xs：超小屏显示器，手机xl：2k屏幕。--&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二十九、nvm-node管理器"><a href="#二十九、nvm-node管理器" class="headerlink" title="二十九、nvm node管理器"></a>二十九、nvm node管理器</h2><p><strong>注</strong>：nvm安装前删除计算机中的node.js</p><h3 id="第一步：下载nvm"><a href="#第一步：下载nvm" class="headerlink" title="第一步：下载nvm"></a>第一步：下载nvm</h3><blockquote><p>路径：<a href="https://github.com/coreybutler/nvm-windows/releases">Releases · coreybutler/nvm-windows (github.com)</a></p></blockquote><img src="/2023/11/05/bi-ji/%E7%AC%94%E8%AE%B0-29.png" class=""><h3 id="第二步：安装"><a href="#第二步：安装" class="headerlink" title="第二步：安装"></a>第二步：安装</h3><blockquote><p>安装步骤</p><h4 id="第一步：同意协议、下一步；（没什么说的，就不加图了）"><a href="#第一步：同意协议、下一步；（没什么说的，就不加图了）" class="headerlink" title="第一步：同意协议、下一步；（没什么说的，就不加图了）"></a>第一步：同意协议、下一步；（没什么说的，就不加图了）</h4><h4 id="第二步：选择nvm本地安装目录；（最好不要有空格）"><a href="#第二步：选择nvm本地安装目录；（最好不要有空格）" class="headerlink" title="第二步：选择nvm本地安装目录；（最好不要有空格）"></a>第二步：选择nvm本地安装目录；（最好不要有空格）</h4><h4 id="第三步：设置nodejs快捷方式路径；（需要手动创建名为nodejs的快捷方式）"><a href="#第三步：设置nodejs快捷方式路径；（需要手动创建名为nodejs的快捷方式）" class="headerlink" title="第三步：设置nodejs快捷方式路径；（需要手动创建名为nodejs的快捷方式）"></a>第三步：设置nodejs快捷方式路径；（需要手动创建名为nodejs的快捷方式）</h4><h4 id="第四部：install-finish"><a href="#第四部：install-finish" class="headerlink" title="第四部：install -> finish"></a>第四部：install -&gt; finish</h4></blockquote><h3 id="第三步：查看"><a href="#第三步：查看" class="headerlink" title="第三步：查看"></a>第三步：查看</h3><blockquote><p>命令窗口键入：nvm （查看是否安装成功）</p></blockquote><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>–help</td><td>显示命令行帮助信息</td></tr><tr><td>–version</td><td>打印当前nvm版本号</td></tr><tr><td>deactivate</td><td>取消当前nvm命令行效果</td></tr><tr><td>install [-s] <version></version></td><td>从源下载一个版本为<version>的node.js</version></td></tr><tr><td>uninstall <version></version></td><td>卸载一个版本为<version>的node.js</version></td></tr><tr><td>use <version></version></td><td>使用<version>版本的node</version></td></tr><tr><td>current</td><td>查看当前使用的node版本</td></tr><tr><td>ls</td><td>查看所有<strong>本地</strong>可用的node版本</td></tr><tr><td>ls <version></version></td><td>查看指定版本</td></tr><tr><td>ls-remote</td><td>查看所有可用的远程版本（Linux与Mac）</td></tr><tr><td>list available</td><td>同上（windows）</td></tr></tbody></table><h2 id="三十、搭梯子"><a href="#三十、搭梯子" class="headerlink" title="三十、搭梯子"></a>三十、搭梯子</h2><p>购买远程代理：<a href="https://x.syksdw.com/#/dashboard">X寄场</a></p><p>登录用户名：<a href="mailto:lyt_sy@sina.com">lyt_sy@sina.com</a></p><p>密    码：设置好的密码</p><p>安装包路径：<a href="https://github.com/97668589/v2rayN/releases/tag/v6.9">v2rayN</a></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ol><li><p>双击运行；</p><img src="/2023/11/05/bi-ji/%E7%AC%94%E8%AE%B0-30-1.png" class=""><ul><li>如果没有将程序放到桌面，找不到程序可以双击右下角<img src="/2023/11/05/bi-ji/%E7%AC%94%E8%AE%B0-30-2.png" class=""></li></ul></li><li><p>登录x-寄场：复制v2ray订阅地址；</p><img src="/2023/11/05/bi-ji/%E7%AC%94%E8%AE%B0-30-3.png" class=""></li><li><p>填写备注等信息，注意：勾选<strong>备用</strong>，然后保存；</p><img src="/2023/11/05/bi-ji/%E7%AC%94%E8%AE%B0-30-4.png" class=""></li><li><p>更新当前订阅；</p><img src="/2023/11/05/bi-ji/%E7%AC%94%E8%AE%B0-30-5.png" class=""></li><li><p>测试-启用节点（选择一个右键即可）。</p><img src="/2023/11/05/bi-ji/%E7%AC%94%E8%AE%B0-30-6.png" class=""></li></ol><h2 id="三十一、PostgreSQL设置自增长"><a href="#三十一、PostgreSQL设置自增长" class="headerlink" title="三十一、PostgreSQL设置自增长"></a>三十一、PostgreSQL设置自增长</h2><pre class="line-numbers language-postgresql" data-language="postgresql"><code class="language-postgresql">-- PostgreSQL 与 MySQL 不同，MySQL设置自增长直接用autoincrement设置，PostgreSQL需要先设置序列对象，并在创建字段时使用该序列对象作为缺省值，需要设置该字段不为空/* 设置序列对象 */[CREATE | ALTER | DROP] SEQUENCE IF NOT EXISTS &lt;序列对象名&gt;_seqINCREMENT 1          -- 序列每次自增多少START 1              -- 从1开始MINVALUE 1           -- 序列最小值MAXVALUE 2147483647  -- 序列最大值CACHE 1              -- 缓存序列（服务器重启之后缓存会丢失)NO CYCLE;            -- 是否循环（NO CYCLE | CYCLE: 序列增长到最大值之后是否从新开始）/* 创建表时引用 */CREATE TABLE &lt;表名&gt; (    "id" int4 NOT NULL DEFAULT NEXTVAL('&lt;序列对象名&gt;_seq::regclass'),    ......)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三十二、VSCode-远程免密连接"><a href="#三十二、VSCode-远程免密连接" class="headerlink" title="三十二、VSCode 远程免密连接"></a>三十二、VSCode 远程免密连接</h2><p>VSCode没有保存密码功能，只能通过ssh秘钥的方式进行自动登录，下面是使用RSA秘钥方式自动登录开发服务器。</p><blockquote><p>默认每次连接，打开文件都得输入密码，当密码很复杂的时候这是一件很痛苦的是。</p></blockquote><h3 id="1-生成秘钥对"><a href="#1-生成秘钥对" class="headerlink" title="1.生成秘钥对"></a>1.生成秘钥对</h3><p>默认电脑上安装了git，没有的话就先安装；打开终端或者git-bash输入以下命令（邮箱使用自己的）。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-C</span> <span class="token string">"&lt;邮箱&gt;"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后一路回车直到完成；秘钥文件存放在：<code>C:\User\&lt;用户名&gt;\.ssh</code></p><h3 id="2-将公钥上传到服务器"><a href="#2-将公钥上传到服务器" class="headerlink" title="2.将公钥上传到服务器"></a>2.将公钥上传到服务器</h3><ol><li>将id_rsa.pub重命名为authorized_keys；</li><li>然后上传到服务器的/root/.ssh目录下（没有则新建.ssh）；</li><li>修改VSCode的ssh_config文件。</li></ol><h3 id="3-配置VSCode远程ssh文件"><a href="#3-配置VSCode远程ssh文件" class="headerlink" title="3.配置VSCode远程ssh文件"></a>3.配置VSCode远程ssh文件</h3><p>以下是配置文件的栗子</p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini">Host &lt;服务IP&gt;    HostName &lt;服务名称&gt;    User &lt;ssh用户名&gt;    Port &lt;ssh连接端口&gt;    PreferredAuthentications publickey    IdentityFile &lt;本地key文件&gt;<span class="token comment"># 举例</span>Host 10.10.0.189    HostName 10.10.0.189    User root    Port 10022    PreferredAuthentications LGGawZI4EhMyjgvlcrTVYQMwZfe2c19cHzxABL3IUPA    IdentityFile "C:\Users\22759\.ssh\id_rsa"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-常见问题解决方法"><a href="#4-常见问题解决方法" class="headerlink" title="4.常见问题解决方法"></a>4.常见问题解决方法</h3><ol><li><p>文件权限不对</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">chmod</span> <span class="token number">700</span> /root$ <span class="token function">chmod</span> <span class="token number">700</span> /root/.ssh$ <span class="token function">chmod</span> <span class="token number">644</span> /root/.ssh/authorized_keys<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>sshd配置问题</p><p>编辑/etc/ssh/sshd_config文件；找到对应配置取消前面注释。</p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token comment"># 开启秘钥登录</span>PubkeyAuthentication yesAuthorizedKeysFile .ssh/authorized_keys .ssh/authorized_keys2<span class="token comment"># 将下面的配置注释掉</span><span class="token comment"># RSAAuthentication no</span><span class="token comment"># 退出并执行重启sshd</span>service sshd restart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> MySQL </tag>
            
            <tag> Linux </tag>
            
            <tag> Nginx </tag>
            
            <tag> sqlite3 </tag>
            
            <tag> ES </tag>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
